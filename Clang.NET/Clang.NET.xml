<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Clang.NET</name>
    </assembly>
    <members>
        <member name="M:LibClang.Clang.GetClangVersion">
            <summary>
                Return a version string, suitable for showing to a user, but not intended to be parsed
                (the format is not guaranteed to be stable).
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetFileTime(LibClang.File)">
            <summary>Retrieve the last modification time of the given file.</summary>
        </member>
        <member name="M:LibClang.Clang.ModuleMapDescriptorCreate">
            <summary>Create a ModuleMapDescriptor object.</summary>
        </member>
        <member name="M:LibClang.Clang.AnnotateTokens(LibClang.TranslationUnit,LibClang.Token[],System.UInt32,LibClang.Cursor[])">
            <summary>
                Annotate the given set of tokens by providing cursors for each token that can be mapped to
                a specific entity within the abstract syntax tree.
            </summary>
        </member>
        <member name="M:LibClang.Clang.BlockCommandCommentGetArgText(LibClang.Comment,System.UInt32)">
            <summary>
                a Comment_BlockCommand AST node. argument index (zero-based). text of the specified
                word-like argument.
            </summary>
        </member>
        <member name="M:LibClang.Clang.BlockCommandCommentGetCommandName(LibClang.Comment)">
            <summary>A Comment_BlockCommand AST node. name of the block command.</summary>
        </member>
        <member name="M:LibClang.Clang.BlockCommandCommentGetNumArgs(LibClang.Comment)">
            <summary>a Comment_BlockCommand AST node. number of word-like arguments.</summary>
        </member>
        <member name="M:LibClang.Clang.BlockCommandCommentGetParagraph(LibClang.Comment)">
            <summary>
                a Comment_BlockCommand or Comment_VerbatimBlockCommand AST node. paragraph argument of the
                block command.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CodeCompleteAt(LibClang.TranslationUnit,System.String,System.UInt32,System.UInt32,LibClang.UnsavedFile[],System.UInt32,LibClang.CodeCompleteFlags)">
            <summary>Perform code completion at a given location in a translation unit.</summary>
        </member>
        <member name="M:LibClang.Clang.CodeCompleteGetContainerKind(LibClang.CodeCompleteResults@,System.Boolean@)">
            <summary>Returns the cursor kind for the container for the current code completion context.</summary>
        </member>
        <member name="M:LibClang.Clang.CodeCompleteGetContainerUSR(LibClang.CodeCompleteResults@)">
            <summary>
                Returns the USR for the container for the current code completion context. If there is not
                a container for the current context, this function will return the empty string. the code
                completion results to query the USR for the container
            </summary>
        </member>
        <member name="M:LibClang.Clang.CodeCompleteGetContexts(LibClang.CodeCompleteResults@)">
            <summary>Determines what completions are appropriate for the context the given code completion.</summary>
        </member>
        <member name="M:LibClang.Clang.CodeCompleteGetDiagnostic(LibClang.CodeCompleteResults@,System.UInt32)">
            <summary>Retrieve a diagnostic associated with the given code completion.</summary>
        </member>
        <member name="M:LibClang.Clang.CodeCompleteGetNumDiagnostics(LibClang.CodeCompleteResults@)">
            <summary>
                Determine the number of diagnostics produced prior to the location where code completion
                was performed.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CodeCompleteGetObjCSelector(LibClang.CodeCompleteResults@)">
            <summary>
                Returns the currently-entered selector for an Objective-C message send, formatted like
                "initWithFoo:bar:".
            </summary>
        </member>
        <member name="M:LibClang.Clang.CommentGetChild(LibClang.Comment,System.UInt32)">
            <summary>AST node of any kind.</summary>
        </member>
        <member name="M:LibClang.Clang.CommentGetKind(LibClang.Comment)">
            <summary>AST node of any kind.</summary>
        </member>
        <member name="M:LibClang.Clang.CommentGetNumChildren(LibClang.Comment)">
            <summary>AST node of any kind.</summary>
        </member>
        <member name="M:LibClang.Clang.CommentIsWhitespace(LibClang.Comment)">
            <summary>
                A CommentParagraph node is considered whitespace if it contains only CommentText nodes
                that are empty or whitespace.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CompilationDatabaseDispose(LibClang.CompilationDatabase)">
            <summary>Free the given compilation database</summary>
        </member>
        <member name="M:LibClang.Clang.CompilationDatabaseFromDirectory(System.String,LibClang.CompilationDatabaseError@)">
            <summary>Creates a compilation database from the database found in directory buildDir.</summary>
        </member>
        <member name="M:LibClang.Clang.CompilationDatabaseGetAllCompileCommands(LibClang.CompilationDatabase)">
            <summary>Get all the compile commands in the given compilation database.</summary>
        </member>
        <member name="M:LibClang.Clang.CompilationDatabaseGetCompileCommands(LibClang.CompilationDatabase,System.String)">
            <summary>Find the compile commands used for a file.</summary>
        </member>
        <member name="M:LibClang.Clang.CompileCommandGetArg(LibClang.CompileCommand,System.UInt32)">
            <summary>
                Get the I'th argument value in the compiler invocations Invariant : - argument 0 is the
                compiler executable
            </summary>
        </member>
        <member name="M:LibClang.Clang.CompileCommandGetDirectory(LibClang.CompileCommand)">
            <summary>Get the working directory where the CompileCommand was executed from</summary>
        </member>
        <member name="M:LibClang.Clang.CompileCommandGetFilename(LibClang.CompileCommand)">
            <summary>Get the filename associated with the CompileCommand.</summary>
        </member>
        <member name="M:LibClang.Clang.CompileCommandGetMappedSourceContent(LibClang.CompileCommand,System.UInt32)">
            <summary>Get the I'th mapped source content for the compiler invocation.</summary>
        </member>
        <member name="M:LibClang.Clang.CompileCommandGetMappedSourcePath(LibClang.CompileCommand,System.UInt32)">
            <summary>Get the I'th mapped source path for the compiler invocation.</summary>
        </member>
        <member name="M:LibClang.Clang.CompileCommandGetNumArgs(LibClang.CompileCommand)">
            <summary>Get the number of arguments in the compiler invocation.</summary>
        </member>
        <member name="M:LibClang.Clang.CompileCommandGetNumMappedSources(LibClang.CompileCommand)">
            <summary>Get the number of source mappings for the compiler invocation.</summary>
        </member>
        <member name="M:LibClang.Clang.CompileCommandsDispose(LibClang.CompileCommands)">
            <summary>Free the given CompileCommands</summary>
        </member>
        <member name="M:LibClang.Clang.CompileCommandsGetCommand(LibClang.CompileCommands,System.UInt32)">
            <summary>Get the I'th CompileCommand for a file</summary>
        </member>
        <member name="M:LibClang.Clang.CompileCommandsGetSize(LibClang.CompileCommands)">
            <summary>Get the number of CompileCommand we have for a file</summary>
        </member>
        <member name="M:LibClang.Clang.ConstructorIsConvertingConstructor(LibClang.Cursor)">
            <summary>Determine if a C++ constructor is a converting constructor.</summary>
        </member>
        <member name="M:LibClang.Clang.ConstructorIsCopyConstructor(LibClang.Cursor)">
            <summary>Determine if a C++ constructor is a copy constructor.</summary>
        </member>
        <member name="M:LibClang.Clang.ConstructorIsDefaultConstructor(LibClang.Cursor)">
            <summary>Determine if a C++ constructor is the default constructor.</summary>
        </member>
        <member name="M:LibClang.Clang.ConstructorIsMoveConstructor(LibClang.Cursor)">
            <summary>Determine if a C++ constructor is a move constructor.</summary>
        </member>
        <member name="M:LibClang.Clang.ConstructUSRObjCCategory(System.String,System.String)">
            <summary>Construct a USR for a specified Objective-C category.</summary>
        </member>
        <member name="M:LibClang.Clang.ConstructUSRObjCClass(System.String)">
            <summary>Construct a USR for a specified Objective-C class.</summary>
        </member>
        <member name="M:LibClang.Clang.ConstructUSRObjCIvar(System.String,LibClang.String)">
            <summary>
                Construct a USR for a specified Objective-C instance variable and the USR for its
                containing class.
            </summary>
        </member>
        <member name="M:LibClang.Clang.ConstructUSRObjCMethod(System.String,System.UInt32,LibClang.String)">
            <summary>Construct a USR for a specified Objective-C method and the USR for its containing class.</summary>
        </member>
        <member name="M:LibClang.Clang.ConstructUSRObjCProperty(System.String,LibClang.String)">
            <summary>Construct a USR for a specified Objective-C property and the USR for its containing class.</summary>
        </member>
        <member name="M:LibClang.Clang.ConstructUSRObjCProtocol(System.String)">
            <summary>Construct a USR for a specified Objective-C protocol.</summary>
        </member>
        <member name="M:LibClang.Clang.CreateCursorSet">
            <summary>Creates an empty CursorSet.</summary>
        </member>
        <member name="M:LibClang.Clang.CreateIndex(System.Boolean,System.Boolean)">
            <summary>Provides a shared context for creating translation units.</summary>
        </member>
        <member name="M:LibClang.Clang.CreateTranslationUnit(LibClang.Index,System.String)">
            <summary>
                Same as clang_createTranslationUnit2, but returns the TranslationUnit instead of an error
                code. In case of an error this routine returns a NULL TranslationUnit, without further detailed
                error codes.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CreateTranslationUnit2(LibClang.Index,System.String,LibClang.TranslationUnit@)">
            <summary>
                Create a translation unit from an AST file ( -emit-ast). A non-NULL pointer to store the
                created TranslationUnit. Zero on success, otherwise returns an error code.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CreateTranslationUnitFromSourceFile(LibClang.Index,System.String,System.Int32,System.String[],System.UInt32,LibClang.UnsavedFile[])">
            <summary>
                Return the TranslationUnit for a given source file and the provided command line arguments
                one would pass to the compiler.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorEvaluate(LibClang.Cursor)">
            <summary>
                If cursor is a statement declaration tries to evaluate the statement and if its variable,
                tries to evaluate its initializer, into its corresponding type.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetArgument(LibClang.Cursor,System.UInt32)">
            <summary>
                Retrieve the argument cursor of a function or method. The argument cursor can be
                determined for calls as well as for declarations of functions or methods. For other cursors and
                for invalid indices, an invalid cursor is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetBriefCommentText(LibClang.Cursor)">
            <summary>
                Given a cursor that represents a documentable entity (e.g., declaration), return the
                associated \ brief paragraph; otherwise return the first paragraph.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetCommentRange(LibClang.Cursor)">
            <summary>
                Given a cursor that represents a declaration, return the associated comment's source
                range. The range may include multiple consecutive comments with whitespace in between.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetCXXManglings(LibClang.Cursor)">
            <summary>
                Retrieve the Strings representing the mangled symbols of the C++ constructor or destructor
                at the cursor.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetMangling(LibClang.Cursor)">
            <summary>Retrieve the String representing the mangled name of the cursor.</summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetModule(LibClang.Cursor)">
            <summary>Given a Cursor_ModuleImportDecl cursor, return the associated module.</summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetNumArguments(LibClang.Cursor)">
            <summary>
                Retrieve the number of non-variadic arguments associated with a given cursor. The number
                of arguments can be determined for calls as well as for declarations of functions or methods.
                For other cursors -1 is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetNumTemplateArguments(LibClang.Cursor)">
            <summary>
                Returns the number of template args of a function decl representing a template
                specialization. If the argument cursor cannot be converted into a template function
                declaration, -1 is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetObjCDeclQualifiers(LibClang.Cursor)">
            <summary>
                Given a cursor that represents an Objective-C method or parameter declaration, return the
                associated Objective-C qualifiers for the return type or the parameter respectively.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetObjCManglings(LibClang.Cursor)">
            <summary>
                Retrieve the Strings representing the mangled symbols of the ObjC class interface or
                implementation at the cursor.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetObjCPropertyAttributes(LibClang.Cursor,System.UInt32)">
            <summary>
                Given a cursor that represents a property declaration, return the associated property
                attributes.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetObjCSelectorIndex(LibClang.Cursor)">
            <summary>
                If the cursor points to a selector identifier in an Objective-C method or message
                expression, this returns the selector index. After getting a cursor with #clang_getCursor, this
                can be called to determine if the location points to a selector identifier. The selector index
                if the cursor is an Objective-C method or message expression and the cursor is pointing to a
                selector identifier, or -1 otherwise.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetOffsetOfField(LibClang.Cursor)">
            <summary>
                Return the offset of the field represented by the Cursor. If the cursor is not a field
                declaration, -1 is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetParsedComment(LibClang.Cursor)">
            <summary>
                Given a cursor that represents a documentable entity (e.g., declaration), return the
                associated parsed comment as a Comment_FullComment AST node.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetRawCommentText(LibClang.Cursor)">
            <summary>
                Given a cursor that represents a declaration, return the associated comment text,
                including comment markers.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetReceiverType(LibClang.Cursor)">
            <summary>
                Given a cursor pointing to an Objective-C message or property reference, or C++ method
                call, returns the Type of the receiver.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetSpellingNameRange(LibClang.Cursor,System.UInt32,System.UInt32)">
            <summary>
                Retrieve a range for a piece that forms the cursors spelling name. Most of the times there
                is only one range for the complete spelling but for Objective-C methods and Objective-C message
                expressions, there are multiple pieces for each selector identifier. the index of the spelling
                name piece. If this is greater than the actual number of pieces, it will return a NULL
                (invalid) range. Reserved.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetStorageClass(LibClang.Cursor)">
            <summary>
                Returns the storage class for a function or variable declaration. If the passed in Cursor
                is not a function or variable declaration, _SC_Invalid is returned else the storage class.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetTemplateArgumentKind(LibClang.Cursor,System.UInt32)">
            <summary>
                Retrieve the kind of the I'th template argument of the Cursor C. If the argument Cursor
                does not represent a FunctionDecl, an invalid template argument kind is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetTemplateArgumentType(LibClang.Cursor,System.UInt32)">
            <summary>
                Retrieve a Type representing the type of a TemplateArgument of a function decl
                representing a template specialization. If the argument Cursor does not represent a
                FunctionDecl whose I'th template argument has a kind of TemplateArgKind_Integral, an invalid
                type is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetTemplateArgumentUnsignedValue(LibClang.Cursor,System.UInt32)">
            <summary>
                Retrieve the value of an Integral TemplateArgument (of a function decl representing a
                template specialization) as an unsigned long long. It is undefined to call this function on a
                Cursor that does not represent a FunctionDecl or whose I'th template argument is not an
                integral value.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetTemplateArgumentValue(LibClang.Cursor,System.UInt32)">
            <summary>
                Retrieve the value of an Integral TemplateArgument (of a function decl representing a
                template specialization) as a signed long long. It is undefined to call this function on a
                Cursor that does not represent a FunctionDecl or whose I'th template argument is not an
                integral value.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorGetTranslationUnit(LibClang.Cursor)">
            <summary>Returns the translation unit that a cursor originated from.</summary>
        </member>
        <member name="M:LibClang.Clang.CursorHasAttrs(LibClang.Cursor)">
            <summary>Determine whether the given cursor has any attributes.</summary>
        </member>
        <member name="M:LibClang.Clang.CursorIsAnonymous(LibClang.Cursor)">
            <summary>Determine whether the given cursor represents an anonymous record declaration.</summary>
        </member>
        <member name="M:LibClang.Clang.CursorIsBitField(LibClang.Cursor)">
            <summary>Returns non-zero if the cursor specifies a Record member that is a bitfield.</summary>
        </member>
        <member name="M:LibClang.Clang.CursorIsDynamicCall(LibClang.Cursor)">
            <summary>
                Given a cursor pointing to a C++ method call or an Objective-C message, returns non-zero
                if the method/message is "dynamic", meaning: For a C++ method: the call is virtual. For an
                Objective-C message: the receiver is an object instance, not 'super' or a specific class. If
                the method/message is "static" or the cursor does not point to a method/message, it will return
                zero.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorIsExternalSymbol(LibClang.Cursor,LibClang.String@,LibClang.String@,System.Boolean@)">
            <summary>
                Returns <c>true</c> if the given cursor points to a symbol marked with
                external_source_symbol attribute.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorIsFunctionInlined(LibClang.Cursor)">
            <summary>Determine whether a  Cursor that is a function declaration, is an inline declaration.</summary>
        </member>
        <member name="M:LibClang.Clang.CursorIsMacroBuiltin(LibClang.Cursor)">
            <summary>Determine whether a  Cursor that is a macro, is a builtin one.</summary>
        </member>
        <member name="M:LibClang.Clang.CursorIsMacroFunctionLike(LibClang.Cursor)">
            <summary>Determine whether a  Cursor that is a macro, is function like.</summary>
        </member>
        <member name="M:LibClang.Clang.CursorIsNull(LibClang.Cursor)">
            <summary>Returns non-zero if cursor is null.</summary>
        </member>
        <member name="M:LibClang.Clang.CursorIsObjCOptional(LibClang.Cursor)">
            <summary>
                Given a cursor that represents an Objective-C method or property declaration, return
                non-zero if the declaration was affected by " @ optional". Returns zero if the cursor is not
                such a declaration or it is " @ required".
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorIsVariadic(LibClang.Cursor)">
            <summary>Returns non-zero if the given cursor is a variadic function or method.</summary>
        </member>
        <member name="M:LibClang.Clang.CursorSetContains(LibClang.CursorSet,LibClang.Cursor)">
            <summary>
                Queries a CursorSet to see if it contains a specific Cursor. Returns <c>true</c> if the
                set contains the specified cursor.
            </summary>
        </member>
        <member name="M:LibClang.Clang.CursorSetInsert(LibClang.CursorSet,LibClang.Cursor)">
            <summary>
                Inserts a Cursor into a CursorSet. <c>false</c> if the Cursor was already in the set, and
                <c>true</c> otherwise.
            </summary>
        </member>
        <member name="M:LibClang.Clang.DefaultCodeCompleteOptions">
            <summary>
                Returns a default set of code-completion options that can be passed to
                clang_codeCompleteAt().
            </summary>
        </member>
        <member name="M:LibClang.Clang.DefaultDiagnosticDisplayOptions">
            <summary>
                Retrieve the set of display options most similar to the default behavior of the clang
                compiler.
            </summary>
        </member>
        <member name="M:LibClang.Clang.DefaultEditingTranslationUnitOptions">
            <summary>
                Returns the set of flags that is suitable for parsing a translation unit that is being
                edited.
            </summary>
        </member>
        <member name="M:LibClang.Clang.DefaultReparseOptions(LibClang.TranslationUnit)">
            <summary>Returns the set of flags that is suitable for reparsing a translation unit.</summary>
        </member>
        <member name="M:LibClang.Clang.DefaultSaveOptions(LibClang.TranslationUnit)">
            <summary>Returns the set of flags that is suitable for saving a translation unit.</summary>
        </member>
        <member name="M:LibClang.Clang.DisposeCodeCompleteResults(LibClang.CodeCompleteResults@)">
            <summary>Free the given set of code-completion results.</summary>
        </member>
        <member name="M:LibClang.Clang.DisposeCursorSet(LibClang.CursorSet)">
            <summary>Disposes a CursorSet and releases its associated memory.</summary>
        </member>
        <member name="M:LibClang.Clang.DisposeCXPlatformAvailability(LibClang.PlatformAvailability@)">
            <summary>Free the memory associated with a PlatformAvailability structure.</summary>
        </member>
        <member name="M:LibClang.Clang.DisposeCXTUResourceUsage(LibClang.TUResourceUsage)">
            <summary></summary>
        </member>
        <member name="M:LibClang.Clang.DisposeDiagnostic(LibClang.Diagnostic)">
            <summary>Destroy a diagnostic.</summary>
        </member>
        <member name="M:LibClang.Clang.DisposeDiagnosticSet(LibClang.DiagnosticSet)">
            <summary>Release a DiagnosticSet and all of its contained diagnostics.</summary>
        </member>
        <member name="M:LibClang.Clang.DisposeIndex(LibClang.Index)">
            <summary>
                Destroy the given index. The index must not be destroyed until all of the translation
                units created within that index have been destroyed.
            </summary>
        </member>
        <member name="M:LibClang.Clang.DisposeOverriddenCursors(System.IntPtr)">
            <summary>Free the set of overridden cursors returned by clang_getOverriddenCursors().</summary>
        </member>
        <member name="M:LibClang.Clang.DisposeSourceRangeList(LibClang.SourceRangeList@)">
            <summary>Destroy the given SourceRangeList.</summary>
        </member>
        <member name="M:LibClang.Clang.DisposeString(LibClang.String)">
            <summary>Free the given string.</summary>
        </member>
        <member name="M:LibClang.Clang.DisposeStringSet(LibClang.StringSet@)">
            <summary>Free the given string set.</summary>
        </member>
        <member name="M:LibClang.Clang.DisposeTokens(LibClang.TranslationUnit,LibClang.Token[],System.UInt32)">
            <summary>Free the given set of tokens.</summary>
        </member>
        <member name="M:LibClang.Clang.DisposeTranslationUnit(LibClang.TranslationUnit)">
            <summary>Destroy the specified TranslationUnit object.</summary>
        </member>
        <member name="M:LibClang.Clang.EnumDeclIsScoped(LibClang.Cursor)">
            <summary>Determine if an enum declaration refers to a scoped enum.</summary>
        </member>
        <member name="M:LibClang.Clang.EqualCursors(LibClang.Cursor,LibClang.Cursor)">
            <summary>Determine whether two cursors are equivalent.</summary>
        </member>
        <member name="M:LibClang.Clang.EqualLocations(LibClang.SourceLocation,LibClang.SourceLocation)">
            <summary>
                Determine whether two source locations, which must refer into the same translation unit,
                refer to exactly the same point in the source code. non-zero if the source locations refer to
                the same location, zero if they refer to different locations.
            </summary>
        </member>
        <member name="M:LibClang.Clang.EqualRanges(LibClang.SourceRange,LibClang.SourceRange)">
            <summary>
                Determine whether two ranges are equivalent. non-zero if the ranges are the same, zero if
                they differ.
            </summary>
        </member>
        <member name="M:LibClang.Clang.EqualTypes(LibClang.Type,LibClang.Type)">
            <summary>
                Determine whether two Types represent the same type. non-zero if the Types represent the
                same type and zero otherwise.
            </summary>
        </member>
        <member name="M:LibClang.Clang.EvalResultDispose(LibClang.EvalResult)">
            <summary>Disposes the created Eval memory.</summary>
        </member>
        <member name="M:LibClang.Clang.EvalResultGetAsDouble(LibClang.EvalResult)">
            <summary>Returns the evaluation result as double if the kind is double.</summary>
        </member>
        <member name="M:LibClang.Clang.EvalResultGetAsInt(LibClang.EvalResult)">
            <summary>Returns the evaluation result as integer if the kind is Int.</summary>
        </member>
        <member name="M:LibClang.Clang.EvalResultGetAsLongLong(LibClang.EvalResult)">
            <summary>
                Returns the evaluation result as a long long integer if the kind is Int. This prevents
                overflows that may happen if the result is returned with clang_EvalResult_getAsInt.
            </summary>
        </member>
        <member name="M:LibClang.Clang.EvalResultGetAsStr(LibClang.EvalResult)">
            <summary>Returns the evaluation result as a constant string if the kind is other than Int or float.</summary>
        </member>
        <member name="M:LibClang.Clang.EvalResultGetAsUnsigned(LibClang.EvalResult)">
            <summary>
                Returns the evaluation result as an unsigned integer if the kind is Int and
                clang_EvalResult_isUnsignedInt is non-zero.
            </summary>
        </member>
        <member name="M:LibClang.Clang.EvalResultGetKind(LibClang.EvalResult)">
            <summary>Returns the kind of the evaluated result.</summary>
        </member>
        <member name="M:LibClang.Clang.EvalResultIsUnsignedInt(LibClang.EvalResult)">
            <summary>
                Returns a non-zero value if the kind is Int and the evaluation result resulted in an
                unsigned integer.
            </summary>
        </member>
        <member name="M:LibClang.Clang.ExecuteOnThread(System.Action,System.IntPtr,System.UInt32)">
            <summary>Executes the given action on the same thread.</summary>
        </member>
        <member name="M:LibClang.Clang.FieldIsMutable(LibClang.Cursor)">
            <summary>Determine if a C++ field is declared 'mutable'.</summary>
        </member>
        <member name="M:LibClang.Clang.FileIsEqual(LibClang.File,LibClang.File)">
            <summary>Returns non-zero if the file1 and file2 point to the same file, or they are both NULL.</summary>
        </member>
        <member name="M:LibClang.Clang.FindIncludesInFile(LibClang.TranslationUnit,LibClang.File,LibClang.CursorAndRangeVisitor)">
            <summary>
                Find #import/#include directives in a specific file. translation unit containing the file
                to query. to search for #import/#include directives. callback that will receive pairs of
                Cursor/CXSourceRange for each directive found. one of the Result enumerators.
            </summary>
        </member>
        <member name="M:LibClang.Clang.FindReferencesInFile(LibClang.Cursor,LibClang.File,LibClang.CursorAndRangeVisitor)">
            <summary>
                Find references of a declaration in a specific file. pointing to a declaration or a
                reference of one. to search for references.
            </summary>
        </member>
        <member name="M:LibClang.Clang.FormatDiagnostic(LibClang.Diagnostic,LibClang.DiagnosticDisplayOptions)">
            <summary>
                Format the given diagnostic in a manner that is suitable for display. This routine will
                format the given diagnostic to a string, rendering the diagnostic according to the various
                options given.
            </summary>
        </member>
        <member name="M:LibClang.Clang.Free(System.IntPtr)">
            <summary>Free memory allocated by LibClang.</summary>
        </member>
        <member name="M:LibClang.Clang.FullCommentGetAsHTML(LibClang.Comment)">
            <summary>Convert a given full parsed comment to an HTML fragment.</summary>
        </member>
        <member name="M:LibClang.Clang.FullCommentGetAsXML(LibClang.Comment)">
            <summary>Convert a given full parsed comment to an XML document.</summary>
        </member>
        <member name="M:LibClang.Clang.GetAddressSpace(LibClang.Type)">
            <summary>Returns the address space of the given type.</summary>
        </member>
        <member name="M:LibClang.Clang.GetAllSkippedRanges(LibClang.TranslationUnit)">
            <summary>
                Retrieve all ranges from all files that were skipped by the preprocessor. The preprocessor
                will skip lines when they are surrounded by an if/ifdef/ifndef directive whose condition does
                not evaluate to true.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetArgType(LibClang.Type,System.UInt32)">
            <summary>
                Retrieve the type of a parameter of a function type. If a non-function type is passed in
                or the function does not have enough parameters, an invalid type is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetArrayElementType(LibClang.Type)">
            <summary>
                Return the element type of an array type. If a non-array type is passed in, an invalid
                type is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetArraySize(LibClang.Type)">
            <summary>
                Return the array size of a constant array. If a non-array type is passed in, -1 is
                returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetBuildSessionTimestamp">
            <summary>Return the timestamp for use with Clang's -fbuild-session-timestamp= option.</summary>
        </member>
        <member name="M:LibClang.Clang.GetCanonicalCursor(LibClang.Cursor)">
            <summary>
                Retrieve the canonical cursor corresponding to the given cursor.
                <para>
                    In the C family of languages, many kinds of entities can be declared several times within
                    a single translation unit.
                </para>
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCanonicalType(LibClang.Type)">
            <summary>
                Return the canonical type for a <see cref="T:LibClang.Type" />.
                <para>
                    Clang's type system explicitly models typedefs and all the ways a specific type can be
                    represented.
                </para>
                <para>
                    The canonical type is the underlying type with all the "sugar" removed.  For example, if
                    'T' is a typedef for <c>int</c>, the canonical type for 'T' would be <c>int</c>.
                </para>
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetChildDiagnostics(LibClang.Diagnostic)">
            <summary>Retrieve the child diagnostics of a Diagnostic.</summary>
        </member>
        <member name="M:LibClang.Clang.GetCompletionAnnotation(LibClang.CompletionString,System.UInt32)">
            <summary>
                Retrieve the annotation associated with the given completion string. the completion string
                to query. the 0-based index of the annotation of the completion string. annotation string
                associated with the completion at index annotation_number, or a NULL string if that annotation
                is not available.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCompletionAvailability(LibClang.CompletionString)">
            <summary>
                Determine the availability of the entity that this code-completion string refers to. The
                completion string to query. The availability of the completion string.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCompletionBriefComment(LibClang.CompletionString)">
            <summary>
                Retrieve the brief documentation comment attached to the declaration that corresponds to
                the given completion string.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCompletionChunkCompletionString(LibClang.CompletionString,System.UInt32)">
            <summary>
                Retrieve the completion string associated with a particular chunk within a completion
                string. the completion string to query. the 0-based index of the chunk in the completion
                string. the completion string associated with the chunk at index chunk_number.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCompletionChunkKind(LibClang.CompletionString,System.UInt32)">
            <summary>
                Determine the kind of a particular chunk within a completion string. the completion string
                to query. the 0-based index of the chunk in the completion string. the kind of the chunk at the
                index chunk_number.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCompletionChunkText(LibClang.CompletionString,System.UInt32)">
            <summary>
                Retrieve the text associated with a particular chunk within a completion string. the
                completion string to query. the 0-based index of the chunk in the completion string. the text
                associated with the chunk at index chunk_number.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCompletionNumAnnotations(LibClang.CompletionString)">
            <summary>
                Retrieve the number of annotations associated with the given completion string. the
                completion string to query. the number of annotations associated with the given completion
                string.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCompletionParent(LibClang.CompletionString,LibClang.CursorKind@)">
            <summary>Retrieve the parent context of the given completion string.</summary>
        </member>
        <member name="M:LibClang.Clang.GetCompletionPriority(LibClang.CompletionString)">
            <summary>
                Determine the priority of this code completion. query. The priority of this completion
                string. Smaller values indicate higher-priority (more likely) completions.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCString(LibClang.String)">
            <summary>Retrieve the character data associated with the given string.</summary>
        </member>
        <member name="M:LibClang.Clang.GetCursor(LibClang.TranslationUnit,LibClang.SourceLocation)">
            <summary>
                Map a source location to the cursor that describes the entity at that location in the
                source code.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorAvailability(LibClang.Cursor)">
            <summary>
                Determine the availability of the entity that this cursor refers to, taking the current
                target platform into account. The cursor to query. The availability of the cursor.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorCompletionString(LibClang.Cursor)">
            <summary>
                Retrieve a completion string for an arbitrary declaration or macro definition cursor. The
                cursor to query. A non-context-sensitive completion string for declaration and macro definition
                cursors, or NULL for other kinds of cursors.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorDefinition(LibClang.Cursor)">
            <summary>
                For a cursor that is either a reference to or a declaration of some entity, retrieve a
                cursor that describes the definition of that entity. Some entities can be declared multiple
                times within a translation unit, but only one of those declarations can also be a definition.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorDisplayName(LibClang.Cursor)">
            <summary>
                Retrieve the display name for the entity referenced by this cursor. The display name
                contains extra information that helps identify the cursor, such as the parameters of a function
                or template or the arguments of a class template specialization.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorExceptionSpecificationType(LibClang.Cursor)">
            <summary>
                Retrieve the exception specification type associated with a given cursor. This only
                returns a valid result if the cursor refers to a function or method.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorExtent(LibClang.Cursor)">
            <summary>
                Retrieve the physical extent of the source construct referenced by the given cursor. The
                extent of a cursor starts with the file/line/column pointing at the first character within the
                source construct that the cursor refers to and ends with the last character within that source
                construct. For a declaration, the extent covers the declaration itself. For a reference, the
                extent covers the location of the reference (e.g., where the referenced entity was actually
                used).
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorKind(LibClang.Cursor)">
            <summary>Retrieve the kind of the given cursor.</summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorKindSpelling(LibClang.CursorKind)">
            <summary>
                CINDEX_DEBUG Debugging facilities These routines are used for testing and debugging, only,
                and should not be relied upon. @ {
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorLanguage(LibClang.Cursor)">
            <summary>Determine the "language" of the entity referred to by a given cursor.</summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorLexicalParent(LibClang.Cursor)">
            <summary>Determine the lexical parent of the given cursor.</summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorLinkage(LibClang.Cursor)">
            <summary>Determine the linkage of the entity referred to by a given cursor.</summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorLocation(LibClang.Cursor)">
            <summary>
                Retrieve the physical location of the source constructor referenced by the given cursor.
                The location of a declaration is typically the location of the name of that declaration, where
                the name of that declaration would occur if it is unnamed, or some keyword that introduces that
                particular declaration. The location of a reference is where that reference occurs within the
                source code.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorPlatformAvailability(LibClang.Cursor,System.Int32@,LibClang.String@,System.Boolean@,LibClang.String@,System.IntPtr@,System.Int32)">
            <summary>
                Determine the availability of the entity that this cursor refers to on any platforms for
                which availability information is known. The cursor to query.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorReferenced(LibClang.Cursor)">
            <summary>
                For a cursor that is a reference, retrieve a cursor representing the entity that it
                references.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorReferenceNameRange(LibClang.Cursor,LibClang.NameRefFlags,System.UInt32)">
            <summary>
                Given a cursor that references something else, return the source range covering that
                reference.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorResultType(LibClang.Cursor)">
            <summary>
                Retrieve the return type associated with a given cursor. This only returns a valid type if
                the cursor refers to a function or method.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorSemanticParent(LibClang.Cursor)">
            <summary>Determine the semantic parent of the given cursor.</summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorSpelling(LibClang.Cursor)">
            <summary>Retrieve a name for the entity referenced by this cursor.</summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorTLSKind(LibClang.Cursor)">
            <summary>
                Determine the "thread-local storage (TLS) kind" of the declaration referred to by a
                cursor.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorType(LibClang.Cursor)">
            <summary>Retrieve the type of a Cursor (if any).</summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorUSR(LibClang.Cursor)">
            <summary>
                Retrieve a Unified Symbol Resolution (USR) for the entity referenced by the given cursor.
                A Unified Symbol Resolution (USR) is a string that identifies a particular entity (function,
                class, variable, etc.) within a program. USRs can be compared across translation units to
                determine, e.g., when references in one translation refer to an entity defined in another
                translation unit.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCursorVisibility(LibClang.Cursor)">
            <summary>
                Describe the visibility of the entity referred to by a cursor. This returns the default
                visibility if not explicitly specified by a visibility attribute. The default visibility may be
                changed by commandline arguments. The cursor to query.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetCXTUResourceUsage(LibClang.TranslationUnit)">
            <summary>Return the memory usage of a translation unit.</summary>
        </member>
        <member name="M:LibClang.Clang.GetCXXAccessSpecifier(LibClang.Cursor)">
            <summary>
                Returns the access control level for the referenced object. If the cursor refers to a C++
                declaration, its access control level within its parent scope is returned. Otherwise, if the
                cursor refers to a base specifier or access specifier, the specifier itself is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetDeclObjCTypeEncoding(LibClang.Cursor)">
            <summary>Returns the Objective-C type encoding for the specified declaration.</summary>
        </member>
        <member name="M:LibClang.Clang.GetDefinitionSpellingAndExtent(LibClang.Cursor,System.IntPtr@,System.IntPtr@,System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary></summary>
        </member>
        <member name="M:LibClang.Clang.GetDiagnostic(LibClang.TranslationUnit,System.UInt32)">
            <summary>
                Retrieve a diagnostic associated with the given translation unit. the translation unit to
                query.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetDiagnosticCategory(LibClang.Diagnostic)">
            <summary>Retrieve the category number for this diagnostic.</summary>
        </member>
        <member name="M:LibClang.Clang.GetDiagnosticCategoryName(System.UInt32)">
            <summary>Retrieve the name of a particular diagnostic category.</summary>
        </member>
        <member name="M:LibClang.Clang.GetDiagnosticCategoryText(LibClang.Diagnostic)">
            <summary>
                Retrieve the diagnostic category text for a given diagnostic. The text of the given
                diagnostic category.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetDiagnosticFixIt(LibClang.Diagnostic,System.UInt32,LibClang.SourceRange@)">
            <summary>
                Retrieve the replacement information for a given fix-it. Fix-its are described in terms of
                a source range whose contents should be replaced by a string.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetDiagnosticInSet(LibClang.DiagnosticSet,System.UInt32)">
            <summary>
                Retrieve a diagnostic associated with the given DiagnosticSet. the DiagnosticSet to query.
                the zero-based diagnostic number to retrieve. the requested diagnostic.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetDiagnosticLocation(LibClang.Diagnostic)">
            <summary>
                Retrieve the source location of the given diagnostic. This location is where Clang would
                print the caret ('^') when displaying the diagnostic on the command line.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetDiagnosticNumFixIts(LibClang.Diagnostic)">
            <summary>Determine the number of fix-it hints associated with the given diagnostic.</summary>
        </member>
        <member name="M:LibClang.Clang.GetDiagnosticNumRanges(LibClang.Diagnostic)">
            <summary>Determine the number of source ranges associated with the given diagnostic.</summary>
        </member>
        <member name="M:LibClang.Clang.GetDiagnosticOption(LibClang.Diagnostic,LibClang.String@)">
            <summary>Retrieve the name of the command-line option that enabled this diagnostic.</summary>
        </member>
        <member name="M:LibClang.Clang.GetDiagnosticOption(LibClang.Diagnostic,System.IntPtr)">
            <summary>Retrieve the name of the command-line option that enabled this diagnostic.</summary>
        </member>
        <member name="M:LibClang.Clang.GetDiagnosticRange(LibClang.Diagnostic,System.UInt32)">
            <summary>
                Retrieve a source range associated with the diagnostic. A diagnostic's source ranges
                highlight important elements in the source code. On the command line, Clang displays source
                ranges by underlining them with '~' characters. the diagnostic whose range is being extracted.
                the zero-based index specifying which range to the requested source range.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetDiagnosticSetFromTU(LibClang.TranslationUnit)">
            <summary>Retrieve the complete set of diagnostics associated with a translation unit.</summary>
        </member>
        <member name="M:LibClang.Clang.GetDiagnosticSeverity(LibClang.Diagnostic)">
            <summary>Determine the severity of the given diagnostic.</summary>
        </member>
        <member name="M:LibClang.Clang.GetDiagnosticSpelling(LibClang.Diagnostic)">
            <summary>Retrieve the text of the given diagnostic.</summary>
        </member>
        <member name="M:LibClang.Clang.GetElementType(LibClang.Type)">
            <summary>
                Return the element type of an array, complex, or vector type. If a type is passed in that
                is not an array, complex, or vector type, an invalid type is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetEnumConstantDeclUnsignedValue(LibClang.Cursor)">
            <summary>
                Retrieve the integer value of an enum constant declaration as a <see cref="T:System.UInt64" />.
                <para>
                    If the cursor does not reference an enum constant declaration,
                    <see cref="F:System.UInt64.MaxValue" /> is returned. Since this is also potentially a valid constant
                    value, the kind of the cursor must be verified before calling this function.
                </para>
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetEnumConstantDeclValue(LibClang.Cursor)">
            <summary>
                Retrieve the integer value of an enum constant declaration as a <c>long</c>.
                <para>
                    If the cursor does not reference an enum constant declaration,
                    <see cref="F:System.Int64.MinValue" /> is returned. Since this is also potentially a valid constant
                    value, the kind of the cursor must be verified before calling this function.
                </para>
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetEnumDeclIntegerType(LibClang.Cursor)">
            <summary>
                Retrieve the integer type of an enum declaration. If the cursor does not reference an enum
                declaration, an invalid type is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetExceptionSpecificationType(LibClang.Type)">
            <summary>
                Retrieve the exception specification type associated with a function type. If a
                non-function type is passed in, an error code of -1 is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetExpansionLocation(LibClang.SourceLocation,LibClang.File@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>Retrieve the file, line, column, and offset represented by the given source location.</summary>
        </member>
        <member name="M:LibClang.Clang.GetFieldDeclBitWidth(LibClang.Cursor)">
            <summary>
                Retrieve the bit width of a bit field declaration as an integer. If a cursor that is not a
                bit field declaration is passed in, -1 is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetFile(LibClang.TranslationUnit,System.String)">
            <summary>
                Retrieve a file handle within the given translation unit. the translation unit the name of
                the file. the file handle for the named file in the translation unit tu, or a NULL file handle
                if the file was not a part of this translation unit.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetFileContents(LibClang.TranslationUnit,LibClang.File,System.UIntPtr@)">
            <summary>
                Retrieve the buffer associated with the given file. the translation unit the file for
                which to retrieve the buffer. [out] if non-NULL, will be set to the size of the buffer. a
                pointer to the buffer in memory that holds the contents of file, or a NULL pointer when the
                file is not loaded.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetFileLocation(LibClang.SourceLocation,LibClang.File@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>Retrieve the file, line, column, and offset represented by the given source location.</summary>
        </member>
        <member name="M:LibClang.Clang.GetFileName(LibClang.File)">
            <summary>Retrieve the complete file and path name of the given file.</summary>
        </member>
        <member name="M:LibClang.Clang.GetFileTimeLong(LibClang.File)">
            <summary>Retrieve the last modification time of the given file.</summary>
        </member>
        <member name="M:LibClang.Clang.GetFileUniqueID(LibClang.File,LibClang.FileUniqueID@)">
            <summary>
                Retrieve the unique ID for the given file. the file to get the ID for. stores the returned
                FileUniqueID. If there was a failure getting the unique ID, returns non-zero, otherwise returns
                0.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetFunctionTypeCallingConv(LibClang.Type)">
            <summary>
                Retrieve the calling convention associated with a function type. If a non-function type is
                passed in, <see cref="F:LibClang.CallingConv.Invalid" /> is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetIBOutletCollectionType(LibClang.Cursor)">
            <summary>
                For cursors representing an IB outlet collection attribute, this function returns the
                collection element type.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetIncludedFile(LibClang.Cursor)">
            <summary>Retrieve the file that is included by the given inclusion directive cursor.</summary>
        </member>
        <member name="M:LibClang.Clang.GetInclusions(LibClang.TranslationUnit,LibClang.InclusionVisitor,LibClang.ClientData)">
            <summary>
                Visit the set of preprocessor inclusions in a translation unit. The visitor function is
                called with the provided data for every included file.  This does not include headers included
                by the PCH file (unless one is inspecting the inclusions in the PCH file itself).
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetInstantiationLocation(LibClang.SourceLocation,LibClang.File@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
                Legacy API to retrieve the file, line, column, and offset represented by the given source
                location.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetLocation(LibClang.TranslationUnit,LibClang.File,System.UInt32,System.UInt32)">
            <summary>
                Retrieves the source location associated with a given file/line/column in a particular
                translation unit.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetLocationForOffset(LibClang.TranslationUnit,LibClang.File,System.UInt32)">
            <summary>
                Retrieves the source location associated with a given character offset in a particular
                translation unit.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetModuleForFile(LibClang.TranslationUnit,LibClang.File)">
            <summary>Given a File header file, return the module that contains it, if one exists.</summary>
        </member>
        <member name="M:LibClang.Clang.GetNullCursor">
            <summary>Retrieve the NULL cursor, which represents no entity.</summary>
        </member>
        <member name="M:LibClang.Clang.GetNullLocation">
            <summary>Retrieve a NULL (invalid) source location.</summary>
        </member>
        <member name="M:LibClang.Clang.GetNullRange">
            <summary>Retrieve a NULL (invalid) source range.</summary>
        </member>
        <member name="M:LibClang.Clang.GetNumArgTypes(LibClang.Type)">
            <summary>
                Retrieve the number of non-variadic parameters associated with a function type. If a
                non-function type is passed in, -1 is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetNumCompletionChunks(LibClang.CompletionString)">
            <summary>Retrieve the number of chunks in the given code-completion string.</summary>
        </member>
        <member name="M:LibClang.Clang.GetNumDiagnostics(LibClang.TranslationUnit)">
            <summary>Determine the number of diagnostics produced for the given translation unit.</summary>
        </member>
        <member name="M:LibClang.Clang.GetNumDiagnosticsInSet(LibClang.DiagnosticSet)">
            <summary>Determine the number of diagnostics in a DiagnosticSet.</summary>
        </member>
        <member name="M:LibClang.Clang.GetNumElements(LibClang.Type)">
            <summary>
                Return the number of elements of an array or vector type. If a type is passed in that is
                not an array or vector type, -1 is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetNumOverloadedDecls(LibClang.Cursor)">
            <summary>
                Determine the number of overloaded declarations referenced by a Cursor_OverloadedDeclRef
                cursor. The cursor whose overloaded declarations are being queried. The number of overloaded
                declarations referenced by cursor. If it is not a Cursor_OverloadedDeclRef cursor, returns 0.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetOverloadedDecl(LibClang.Cursor,System.UInt32)">
            <summary>
                Retrieve a cursor for one of the overloaded declarations referenced by a
                Cursor_OverloadedDeclRef cursor.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetOverriddenCursors(LibClang.Cursor,System.IntPtr@,System.UInt32@)">
            <summary>Determine the set of methods that are overridden by the given method.</summary>
        </member>
        <member name="M:LibClang.Clang.GetPointeeType(LibClang.Type)">
            <summary>For pointer types, returns the type of the pointee.</summary>
        </member>
        <member name="M:LibClang.Clang.GetPresumedLocation(LibClang.SourceLocation,LibClang.String@,System.UInt32@,System.UInt32@)">
            <summary>
                Retrieve the file, line and column represented by the given source location, as specified
                in a # line directive.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetRange(LibClang.SourceLocation,LibClang.SourceLocation)">
            <summary>Retrieve a source range given the beginning and ending source locations.</summary>
        </member>
        <member name="M:LibClang.Clang.GetRangeEnd(LibClang.SourceRange)">
            <summary>Retrieve a source location representing the last character within a source range.</summary>
        </member>
        <member name="M:LibClang.Clang.GetRangeStart(LibClang.SourceRange)">
            <summary>Retrieve a source location representing the first character within a source range.</summary>
        </member>
        <member name="M:LibClang.Clang.GetRemappings(System.String)">
            <summary>
                Retrieve a remapping. the path that contains metadata about remappings. the requested
                remapping.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetRemappingsFromFileList(System.String[],System.UInt32)">
            <summary>
                Retrieve a remapping. pointer to an array of file paths containing remapping info. number
                of file paths. the requested remapping.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetResultType(LibClang.Type)">
            <summary>
                Retrieve the return type associated with a function type. If a non-function type is passed
                in, an invalid type is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetSkippedRanges(LibClang.TranslationUnit,LibClang.File)">
            <summary>
                Retrieve all ranges that were skipped by the preprocessor. The preprocessor will skip
                lines when they are surrounded by an if/ifdef/ifndef directive whose condition does not
                evaluate to true.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetSpecializedCursorTemplate(LibClang.Cursor)">
            <summary>
                Given a cursor that may represent a specialization or instantiation of a template,
                retrieve the cursor that represents the template that it specializes or from which it was
                instantiated.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetSpellingLocation(LibClang.SourceLocation,LibClang.File@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>Retrieve the file, line, column, and offset represented by the given source location.</summary>
        </member>
        <member name="M:LibClang.Clang.GetTemplateCursorKind(LibClang.Cursor)">
            <summary>
                Given a cursor that represents a template, determine the cursor kind of the
                specializations would be generated by instantiating the template.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetTokenExtent(LibClang.TranslationUnit,LibClang.Token)">
            <summary>Retrieve a source range that covers the given token.</summary>
        </member>
        <member name="M:LibClang.Clang.GetTokenKind(LibClang.Token)">
            <summary>Determine the kind of the given token.</summary>
        </member>
        <member name="M:LibClang.Clang.GetTokenLocation(LibClang.TranslationUnit,LibClang.Token)">
            <summary>Retrieve the source location of the given token.</summary>
        </member>
        <member name="M:LibClang.Clang.GetTokenSpelling(LibClang.TranslationUnit,LibClang.Token)">
            <summary>
                Determine the spelling of the given token. The spelling of a token is the textual
                representation of that token, e.g., the text of an identifier or keyword.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetTranslationUnitCursor(LibClang.TranslationUnit)">
            <summary>
                Retrieve the cursor that represents the given translation unit. The translation unit
                cursor can be used to start traversing the various declarations within the given translation
                unit.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetTranslationUnitSpelling(LibClang.TranslationUnit)">
            <summary>Get the original translation unit source file name.</summary>
        </member>
        <member name="M:LibClang.Clang.GetTranslationUnitTargetInfo(LibClang.TranslationUnit)">
            <summary>
                Get target information for this translation unit.
                <para>
                    The <see cref="T:LibClang.TargetInfo" /> object cannot outlive the <see cref="T:LibClang.TranslationUnit" />.
                    object.
                </para>
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetTUResourceUsageName(LibClang.TUResourceUsageKind)">
            <summary>
                Returns the human-readable null-terminated C string that represents the name of the memory
                category.  This string should never be freed.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetTypeDeclaration(LibClang.Type)">
            <summary>Return the cursor for the declaration of the given type.</summary>
        </member>
        <member name="M:LibClang.Clang.GetTypedefDeclUnderlyingType(LibClang.Cursor)">
            <summary>
                Retrieve the underlying type of a typedef declaration. If the cursor does not reference a
                typedef declaration, an invalid type is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.GetTypedefName(LibClang.Type)">
            <summary>Returns the typedef name of the given type.</summary>
        </member>
        <member name="M:LibClang.Clang.GetTypeKindSpelling(LibClang.TypeKind)">
            <summary>Retrieve the spelling of a given TypeKind.</summary>
        </member>
        <member name="M:LibClang.Clang.GetTypeSpelling(LibClang.Type)">
            <summary>
                Pretty-print the underlying type using the rules of the language of the translation unit
                from which it came. If the type is invalid, an empty string is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.HashCursor(LibClang.Cursor)">
            <summary>Compute a hash value for the given cursor.</summary>
        </member>
        <member name="M:LibClang.Clang.HTMLStartTagCommentIsSelfClosing(LibClang.Comment)">
            <summary>Determines if a comment HTML start tag that is self-closing.</summary>
        </member>
        <member name="M:LibClang.Clang.HTMLStartTagGetAttrName(LibClang.Comment,System.UInt32)">
            <summary>
                a Comment_HTMLStartTag AST node. attribute index (zero-based). name of the specified
                attribute.
            </summary>
        </member>
        <member name="M:LibClang.Clang.HTMLStartTagGetAttrValue(LibClang.Comment,System.UInt32)">
            <summary>
                a Comment_HTMLStartTag AST node. attribute index (zero-based). value of the specified
                attribute.
            </summary>
        </member>
        <member name="M:LibClang.Clang.HTMLStartTagGetNumAttrs(LibClang.Comment)">
            <summary>
                a Comment_HTMLStartTag AST node. number of attributes (name-value pairs) attached to the
                start tag.
            </summary>
        </member>
        <member name="M:LibClang.Clang.HTMLTagCommentGetAsString(LibClang.Comment)">
            <summary>Convert an HTML tag AST node to string.</summary>
        </member>
        <member name="M:LibClang.Clang.HTMLTagCommentGetTagName(LibClang.Comment)">
            <summary>a Comment_HTMLStartTag or Comment_HTMLEndTag AST node. HTML tag name.</summary>
        </member>
        <member name="M:LibClang.Clang.IndexActionCreate(LibClang.Index)">
            <summary>
                An indexing action/session, to be applied to one or multiple translation units. The index
                object with which the index action will be associated.
            </summary>
        </member>
        <member name="M:LibClang.Clang.IndexActionDispose(LibClang.IndexAction)">
            <summary>
                Destroy the given index action. The index action must not be destroyed until all of the
                translation units created within that index action have been destroyed.
            </summary>
        </member>
        <member name="M:LibClang.Clang.IndexGetClientContainer(LibClang.IdxContainerInfo[])">
            <summary>For retrieving a custom IdxClientContainer attached to a container.</summary>
        </member>
        <member name="M:LibClang.Clang.IndexGetClientEntity(LibClang.IdxEntityInfo[])">
            <summary>For retrieving a custom IdxClientEntity attached to an entity.</summary>
        </member>
        <member name="M:LibClang.Clang.IndexGetCXXClassDeclInfo(LibClang.IdxDeclInfo[])">
            <summary></summary>
        </member>
        <member name="M:LibClang.Clang.IndexGetGlobalOptions(LibClang.Index)">
            <summary>Gets the general options associated with a index.</summary>
        </member>
        <member name="M:LibClang.Clang.IndexGetIBOutletCollectionAttrInfo(LibClang.IdxAttrInfo[])">
            <summary></summary>
        </member>
        <member name="M:LibClang.Clang.IndexGetObjCCategoryDeclInfo(LibClang.IdxDeclInfo[])">
            <summary></summary>
        </member>
        <member name="M:LibClang.Clang.IndexGetObjCContainerDeclInfo(LibClang.IdxDeclInfo[])">
            <summary></summary>
        </member>
        <member name="M:LibClang.Clang.IndexGetObjCInterfaceDeclInfo(LibClang.IdxDeclInfo[])">
            <summary></summary>
        </member>
        <member name="M:LibClang.Clang.IndexGetObjCPropertyDeclInfo(LibClang.IdxDeclInfo[])">
            <summary></summary>
        </member>
        <member name="M:LibClang.Clang.IndexGetObjCProtocolRefListInfo(LibClang.IdxDeclInfo[])">
            <summary></summary>
        </member>
        <member name="M:LibClang.Clang.IndexLocGetCXSourceLocation(LibClang.IdxLoc)">
            <summary>Retrieve the SourceLocation represented by the given IdxLoc.</summary>
        </member>
        <member name="M:LibClang.Clang.IndexLocGetFileLocation(LibClang.IdxLoc,LibClang.IdxClientFile@,LibClang.File@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
                Retrieve the IdxFile, file, line, column, and offset represented by the given IdxLoc. If
                the location refers into a macro expansion, retrieves the location of the macro expansion and
                if it refers into a macro argument retrieves the location of the argument.
            </summary>
        </member>
        <member name="M:LibClang.Clang.IndexSetClientContainer(LibClang.IdxContainerInfo[],LibClang.IdxClientContainer)">
            <summary>For setting a custom IdxClientContainer attached to a container.</summary>
        </member>
        <member name="M:LibClang.Clang.IndexSetClientEntity(LibClang.IdxEntityInfo[],LibClang.IdxClientEntity)">
            <summary>For setting a custom IdxClientEntity attached to an entity.</summary>
        </member>
        <member name="M:LibClang.Clang.IndexSetGlobalOptions(LibClang.Index,LibClang.GlobalOptFlags)">
            <summary>Sets general options associated with a Index.</summary>
        </member>
        <member name="M:LibClang.Clang.IndexSetInvocationEmissionPathOption(LibClang.Index,System.String)">
            <summary>
                Sets the invocation emission path option. The invocation emission path specifies a path
                which will contain log files for certain LibClang invocations.
                <para>A <c>null</c> value (default) implies that LibClang invocations are not logged.</para>
            </summary>
        </member>
        <member name="M:LibClang.Clang.IndexSourceFile(LibClang.IndexAction,LibClang.ClientData,LibClang.IndexerCallbacks,System.UInt32,System.UInt32,System.String,System.String[],System.Int32,LibClang.UnsavedFile[],System.UInt32,LibClang.TranslationUnit@,System.UInt32)">
            <summary>
                Index the given source file and the translation unit corresponding to that file via
                callbacks implemented through #IndexerCallbacks.
            </summary>
        </member>
        <member name="M:LibClang.Clang.IndexSourceFileFullArgv(LibClang.IndexAction,LibClang.ClientData,LibClang.IndexerCallbacks,System.UInt32,System.UInt32,System.String,System.String[],System.Int32,LibClang.UnsavedFile[],System.UInt32,LibClang.TranslationUnit@,System.UInt32)">
            <summary>
                Same as clang_indexSourceFile but requires a full command line for command_line_args
                including argv[0]. This is useful if the standard library paths are relative to the binary.
            </summary>
        </member>
        <member name="M:LibClang.Clang.IndexTranslationUnit(LibClang.IndexAction,LibClang.ClientData,LibClang.IndexerCallbacks,System.UInt32,System.UInt32,LibClang.TranslationUnit)">
            <summary>Index the given translation unit via callbacks implemented through #IndexerCallbacks.</summary>
        </member>
        <member name="M:LibClang.Clang.InlineCommandCommentGetArgText(LibClang.Comment,System.UInt32)">
            <summary>
                a Comment_InlineCommand AST node. argument index (zero-based). text of the specified
                argument.
            </summary>
        </member>
        <member name="M:LibClang.Clang.InlineCommandCommentGetCommandName(LibClang.Comment)">
            <summary>a Comment_InlineCommand AST node. name of the inline command.</summary>
        </member>
        <member name="M:LibClang.Clang.InlineCommandCommentGetNumArgs(LibClang.Comment)">
            <summary>a Comment_InlineCommand AST node. number of command arguments.</summary>
        </member>
        <member name="M:LibClang.Clang.InlineCommandCommentGetRenderKind(LibClang.Comment)">
            <summary>
                a Comment_InlineCommand AST node. the most appropriate rendering mode, chosen on command
                semantics in Doxygen.
            </summary>
        </member>
        <member name="M:LibClang.Clang.InlineContentCommentHasTrailingNewline(LibClang.Comment)">
            <summary>
                <c>true</c> if <see cref="T:LibClang.Comment" /> is inline content and has a newline immediately
                following it in the comment text.
                <para>Newlines between paragraphs do not count.</para>
            </summary>
        </member>
        <member name="M:LibClang.Clang.IsAttribute(LibClang.CursorKind)">
            <summary>Determine whether the given cursor kind represents an attribute.</summary>
        </member>
        <member name="M:LibClang.Clang.IsConstQualifiedType(LibClang.Type)">
            <summary>
                Determine whether a Type has the "const" qualifier set, without looking through typedefs
                that may have added "const" at a different level.
            </summary>
        </member>
        <member name="M:LibClang.Clang.IsCursorDefinition(LibClang.Cursor)">
            <summary>
                Determine whether the declaration pointed to by this cursor is also a definition of that
                entity.
            </summary>
        </member>
        <member name="M:LibClang.Clang.IsDeclaration(LibClang.CursorKind)">
            <summary>Determine whether the given cursor kind represents a declaration.</summary>
        </member>
        <member name="M:LibClang.Clang.IsExpression(LibClang.CursorKind)">
            <summary>Determine whether the given cursor kind represents an expression.</summary>
        </member>
        <member name="M:LibClang.Clang.IsFileMultipleIncludeGuarded(LibClang.TranslationUnit,LibClang.File)">
            <summary>
                Determine whether the given header is guarded against multiple inclusions, either with the
                conventional # ifndef/ # define/ # endif macro guards or with # pragma once.
            </summary>
        </member>
        <member name="M:LibClang.Clang.IsFunctionTypeVariadic(LibClang.Type)">
            <summary>
                Return <c>true</c> if the <see cref="T:LibClang.Type" /> is a variadic function type, and
                <c>false</c> otherwise.
            </summary>
        </member>
        <member name="M:LibClang.Clang.IsInvalid(LibClang.CursorKind)">
            <summary>Determine whether the given cursor kind represents an invalid cursor.</summary>
        </member>
        <member name="M:LibClang.Clang.IsPODType(LibClang.Type)">
            <summary>
                Return <c>true</c> if the <see cref="T:LibClang.Type" /> is a POD (plain old data) type, and
                <c>false</c> otherwise.
            </summary>
        </member>
        <member name="M:LibClang.Clang.IsPreprocessing(LibClang.CursorKind)">
            <summary>
                Determine whether the given cursor represents a preprocessing element, such as a
                preprocessor directive or macro instantiation.
            </summary>
        </member>
        <member name="M:LibClang.Clang.IsReference(LibClang.CursorKind)">
            <summary>Determine whether the given cursor kind represents a simple reference.</summary>
        </member>
        <member name="M:LibClang.Clang.IsRestrictQualifiedType(LibClang.Type)">
            <summary>
                Determine whether a Type has the "restrict" qualifier set, without looking through
                typedefs that may have added "restrict" at a different level.
            </summary>
        </member>
        <member name="M:LibClang.Clang.IsStatement(LibClang.CursorKind)">
            <summary>Determine whether the given cursor kind represents a statement.</summary>
        </member>
        <member name="M:LibClang.Clang.IsTranslationUnit(LibClang.CursorKind)">
            <summary>Determine whether the given cursor kind represents a translation unit.</summary>
        </member>
        <member name="M:LibClang.Clang.IsUnexposed(LibClang.CursorKind)">
            <summary>Determine whether the given cursor represents a currently unexposed piece of the AST.</summary>
        </member>
        <member name="M:LibClang.Clang.IsVirtualBase(LibClang.Cursor)">
            <summary>Returns <c>true</c> if the base class specified by the cursor is virtual.</summary>
        </member>
        <member name="M:LibClang.Clang.IsVolatileQualifiedType(LibClang.Type)">
            <summary>
                Determine whether a Type has the "volatile" qualifier set, without looking through
                typedefs that may have added "volatile" at a different level.
            </summary>
        </member>
        <member name="M:LibClang.Clang.LoadDiagnostics(System.String,LibClang.LoadDiagError@,LibClang.String@)">
            <summary>Deserialize a set of diagnostics from a Clang diagnostics bitcode file.</summary>
        </member>
        <member name="M:LibClang.Clang.LocationIsFromMainFile(LibClang.SourceLocation)">
            <summary>
                Returns non-zero if the given source location is in the main file of the corresponding
                translation unit.
            </summary>
        </member>
        <member name="M:LibClang.Clang.LocationIsInSystemHeader(LibClang.SourceLocation)">
            <summary>Returns non-zero if the given source location is in a system header.</summary>
        </member>
        <member name="M:LibClang.Clang.MethodIsConst(LibClang.Cursor)">
            <summary>Determine if a C++ member function or member function template is declared 'const'.</summary>
        </member>
        <member name="M:LibClang.Clang.MethodIsDefaulted(LibClang.Cursor)">
            <summary>Determine if a C++ method is declared '= default'.</summary>
        </member>
        <member name="M:LibClang.Clang.MethodIsPureVirtual(LibClang.Cursor)">
            <summary>Determine if a C++ member function or member function template is pure virtual.</summary>
        </member>
        <member name="M:LibClang.Clang.MethodIsStatic(LibClang.Cursor)">
            <summary>Determine if a C++ member function or member function template is declared 'static'.</summary>
        </member>
        <member name="M:LibClang.Clang.MethodIsVirtual(LibClang.Cursor)">
            <summary>
                Determine if a C++ member function or member function template is explicitly declared
                'virtual' or if it overrides a virtual method from one of the base classes.
            </summary>
        </member>
        <member name="M:LibClang.Clang.ModuleGetASTFile(LibClang.Module)">
            <summary>a module object. the module file where the provided module object came from.</summary>
        </member>
        <member name="M:LibClang.Clang.ModuleGetFullName(LibClang.Module)">
            <summary>a module object. the full name of the module, e.g. "std.vector".</summary>
        </member>
        <member name="M:LibClang.Clang.ModuleGetName(LibClang.Module)">
            <summary>
                a module object. the name of the module, e.g. for the 'std.vector' sub-module it will
                return "vector".
            </summary>
        </member>
        <member name="M:LibClang.Clang.ModuleGetNumTopLevelHeaders(LibClang.TranslationUnit,LibClang.Module)">
            <summary>a module object. the number of top level headers associated with this module.</summary>
        </member>
        <member name="M:LibClang.Clang.ModuleGetParent(LibClang.Module)">
            <summary>
                a module object. the parent of a sub-module or NULL if the given module is top-level, e.g.
                for 'std.vector' it will return the 'std' module.
            </summary>
        </member>
        <member name="M:LibClang.Clang.ModuleGetTopLevelHeader(LibClang.TranslationUnit,LibClang.Module,System.UInt32)">
            <summary>
                a module object. top level header index (zero-based). the specified top level header
                associated with the module.
            </summary>
        </member>
        <member name="M:LibClang.Clang.ModuleIsSystem(LibClang.Module)">
            <summary>a module object. non-zero if the module is a system one.</summary>
        </member>
        <member name="M:LibClang.Clang.ModuleMapDescriptorCreate(System.UInt32)">
            <summary>Create a ModuleMapDescriptor object.</summary>
        </member>
        <member name="M:LibClang.Clang.ModuleMapDescriptorDispose(LibClang.ModuleMapDescriptor)">
            <summary>Dispose a ModuleMapDescriptor object.</summary>
        </member>
        <member name="M:LibClang.Clang.ModuleMapDescriptorSetFrameworkModuleName(LibClang.ModuleMapDescriptor,System.String)">
            <summary>
                Sets the framework module name that the module.map describes. 0 for success, non-zero to
                indicate an error.
            </summary>
        </member>
        <member name="M:LibClang.Clang.ModuleMapDescriptorSetUmbrellaHeader(LibClang.ModuleMapDescriptor,System.String)">
            <summary>
                Sets the umbrealla header name that the module.map describes. 0 for success, non-zero to
                indicate an error.
            </summary>
        </member>
        <member name="M:LibClang.Clang.ModuleMapDescriptorWriteToBuffer(LibClang.ModuleMapDescriptor,System.UInt32,System.IntPtr@,System.UInt32@)">
            <summary>
                Write out the ModuleMapDescriptor object to a char buffer. is reserved, always pass 0.
                pointer to receive the buffer pointer, which should be disposed using clang_free(). pointer to
                receive the buffer size. 0 for success, non-zero to indicate an error.
            </summary>
        </member>
        <member name="M:LibClang.Clang.ParamCommandCommentGetDirection(LibClang.Comment)">
            <summary>a Comment_ParamCommand AST node. parameter passing direction.</summary>
        </member>
        <member name="M:LibClang.Clang.ParamCommandCommentGetParamIndex(LibClang.Comment)">
            <summary>a Comment_ParamCommand AST node. zero-based parameter index in function prototype.</summary>
        </member>
        <member name="M:LibClang.Clang.ParamCommandCommentGetParamName(LibClang.Comment)">
            <summary>a Comment_ParamCommand AST node. parameter name.</summary>
        </member>
        <member name="M:LibClang.Clang.ParamCommandCommentIsDirectionExplicit(LibClang.Comment)">
            <summary>
                a Comment_ParamCommand AST node. non-zero if parameter passing direction was specified
                explicitly in the comment.
            </summary>
        </member>
        <member name="M:LibClang.Clang.ParamCommandCommentIsParamIndexValid(LibClang.Comment)">
            <summary>
                a Comment_ParamCommand AST node. non-zero if the parameter that this AST node represents
                was found in the function prototype and clang_ParamCommandComment_getParamIndex function will
                return a meaningful value.
            </summary>
        </member>
        <member name="M:LibClang.Clang.ParseTranslationUnit(LibClang.Index,System.String,System.String[],System.Int32,LibClang.UnsavedFile[],System.UInt32,System.UInt32)">
            <summary>
                Same as clang_parseTranslationUnit2, but returns the TranslationUnit instead of an error
                code. In case of an error this routine returns a NULL TranslationUnit, without further detailed
                error codes.
            </summary>
        </member>
        <member name="M:LibClang.Clang.ParseTranslationUnit2(LibClang.Index,System.String,System.String[],System.Int32,LibClang.UnsavedFile[],System.UInt32,System.UInt32,LibClang.TranslationUnit@)">
            <summary>
                Parse the given source file and the translation unit corresponding to that file.
                <para>
                    This routine is the main entry point for the Clang C API, providing the ability to parse
                    a source file into a translation unit that can then be queried by other functions in the
                    API. This routine accepts a set of command-line arguments so that the compilation can be
                    configured in the same way that the compiler is configured on the command line.
                </para>
                <para>
                    The index object with which the translation unit will be associated. The name of the
                    source file to load, or NULL if the source file is included in command_line_args. The
                    command-line arguments that would be passed to the clang executable if it were being
                    invoked out-of-process. These command-line options will be parsed and will affect how the
                    translation unit is parsed.
                </para>
            </summary>
        </member>
        <member name="M:LibClang.Clang.ParseTranslationUnit2FullArgv(LibClang.Index,System.String,System.String[],System.Int32,LibClang.UnsavedFile[],System.UInt32,System.UInt32,LibClang.TranslationUnit@)">
            <summary>
                Same as clang_parseTranslationUnit2 but requires a full command line for command_line_args
                including argv[0]. This is useful if the standard library paths are relative to the binary.
            </summary>
        </member>
        <member name="M:LibClang.Clang.RangeIsNull(LibClang.SourceRange)">
            <summary>Returns non-zero if range is null.</summary>
        </member>
        <member name="M:LibClang.Clang.RecordIsAbstract(LibClang.Cursor)">
            <summary>
                Determine if a C++ record is abstract, i.e. whether a class or struct has a pure virtual
                member function.
            </summary>
        </member>
        <member name="M:LibClang.Clang.RemapDispose(LibClang.Remapping)">
            <summary>Dispose the remapping.</summary>
        </member>
        <member name="M:LibClang.Clang.RemapGetFilenames(LibClang.Remapping,System.UInt32,LibClang.String@,LibClang.String@)">
            <summary>
                Get the original and the associated filename from the remapping. If non-NULL, will be set
                to the original filename. If non-NULL, will be set to the filename that the original is
                associated with.
            </summary>
        </member>
        <member name="M:LibClang.Clang.RemapGetNumFiles(LibClang.Remapping)">
            <summary>Determine the number of remappings.</summary>
        </member>
        <member name="M:LibClang.Clang.ReparseTranslationUnit(LibClang.TranslationUnit,System.UInt32,LibClang.UnsavedFile[],LibClang.ReparseFlags)">
            <summary>Reparse the source files that produced this translation unit.</summary>
        </member>
        <member name="M:LibClang.Clang.SaveTranslationUnit(LibClang.TranslationUnit,System.String,LibClang.SaveTranslationUnitFlags)">
            <summary>
                Saves a translation unit into a serialized representation of that translation unit on
                disk. Any translation unit that was parsed without error can be saved into a file.
            </summary>
        </member>
        <member name="M:LibClang.Clang.SortCodeCompletionResults(LibClang.CompletionResult[],System.UInt32)">
            <summary>
                Sort the code-completion results in case-insensitive alphabetical order. The set of
                results to sort. The number of results in Results.
            </summary>
        </member>
        <member name="M:LibClang.Clang.SuspendTranslationUnit(LibClang.TranslationUnit)">
            <summary>Suspend a translation unit in order to free memory associated with it.
                <para>A suspended translation unit uses significantly less memory.</para>
            </summary>
        </member>
        <member name="M:LibClang.Clang.TargetInfoDispose(LibClang.TargetInfo)">
            <summary>Destroy the TargetInfo object.</summary>
        </member>
        <member name="M:LibClang.Clang.TargetInfoGetPointerWidth(LibClang.TargetInfo)">
            <summary>Get the pointer width of the target in bits. Returns -1 in case of error.</summary>
        </member>
        <member name="M:LibClang.Clang.TargetInfoGetTriple(LibClang.TargetInfo)">
            <summary>
                Get the normalized target triple as a string. Returns the empty string in case of any
                error.
            </summary>
        </member>
        <member name="M:LibClang.Clang.TextCommentGetText(LibClang.Comment)">
            <summary>a Comment_Text AST node. text contained in the AST node.</summary>
        </member>
        <member name="M:LibClang.Clang.ToggleCrashRecovery(System.Boolean)">
            <summary>Enable/disable crash recovery.
                <param name="enabled">Flag to indicate if crash recovery is enabled.</param>
            </summary>
        </member>
        <member name="M:LibClang.Clang.Tokenize(LibClang.TranslationUnit,LibClang.SourceRange,System.IntPtr@,System.UInt32@)">
            <summary>Tokenize the source code described by the given range into raw lexical tokens.</summary>
            <param name="unit">The translation unit whose text is being tokenized.</param>
            <param name="range">
                The source range in which text should be tokenized. All of the tokens produced
                by tokenization will fall within this source range, this pointer will be set to point to the
                array of tokens that occur within the given source range. The returned pointer must be freed
                with clang_disposeTokens() before the translation unit is destroyed. will be set to the number
                of tokens in the *Tokens array.
            </param>
            <param name="tokens">The tokens.</param>
            <param name="numTokens">The number tokens.</param>
        </member>
        <member name="M:LibClang.Clang.TParamCommandCommentGetDepth(LibClang.Comment)">
            <summary>
                a Comment_TParamCommand AST node. zero-based nesting depth of this parameter in the
                template parameter list
            </summary>
        </member>
        <member name="M:LibClang.Clang.TParamCommandCommentGetIndex(LibClang.Comment,System.UInt32)">
            <summary>
                a Comment_TParamCommand AST node. zero-based parameter index in the template parameter
                list at a given nesting depth.
            </summary>
        </member>
        <member name="M:LibClang.Clang.TParamCommandCommentGetParamName(LibClang.Comment)">
            <summary>a Comment_TParamCommand AST node. template parameter name.</summary>
        </member>
        <member name="M:LibClang.Clang.TParamCommandCommentIsParamPositionValid(LibClang.Comment)">
            <summary>
                a Comment_TParamCommand AST node. non-zero if the parameter that this AST node represents
                was found in the template parameter list and clang_TParamCommandComment_getDepth and
                clang_TParamCommandComment_getIndex functions will return a meaningful value.
            </summary>
        </member>
        <member name="M:LibClang.Clang.TypeGetAlignOf(LibClang.Type)">
            <summary>Return the alignment of a type in bytes as per C++[expr.alignof] standard.</summary>
        </member>
        <member name="M:LibClang.Clang.TypeGetClassType(LibClang.Type)">
            <summary>
                Return the class type of an member pointer type. If a non-member-pointer type is passed
                in, an invalid type is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.TypeGetCXXRefQualifier(LibClang.Type)">
            <summary>
                Retrieve the ref-qualifier kind of a function or method. The ref-qualifier is returned for
                C++ functions or methods. For other types or non-C++ declarations, RefQualifier_None is
                returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.TypeGetNamedType(LibClang.Type)">
            <summary>
                Retrieve the type named by the qualified-id. If a non-elaborated type is passed in, an
                invalid type is returned.
            </summary>
        </member>
        <member name="M:LibClang.Clang.TypeGetNumTemplateArguments(LibClang.Type)">
            <summary>
                Returns the number of template arguments for given template specialization, or -1 if type
                T is not a template specialization.
            </summary>
        </member>
        <member name="M:LibClang.Clang.TypeGetObjCEncoding(LibClang.Type)">
            <summary>Returns the Objective-C type encoding for the specified Type.</summary>
        </member>
        <member name="M:LibClang.Clang.TypeGetOffsetOf(LibClang.Type,System.String)">
            <summary>Return the offset of the field with the specified name.</summary>
        </member>
        <member name="M:LibClang.Clang.TypeGetSizeOf(LibClang.Type)">
            <summary>Return the size of a type in bytes as per C++[expr.sizeof] standard.</summary>
        </member>
        <member name="M:LibClang.Clang.TypeGetTemplateArgumentAsType(LibClang.Type,System.UInt32)">
            <summary>
                Returns the type template argument of a template class specialization at given index. This
                function only returns template type arguments and does not handle template template arguments
                or variadic packs.
            </summary>
        </member>
        <member name="M:LibClang.Clang.TypeIsTransparentTagTypedef(LibClang.Type)">
            <summary>
                Determine if a typedef is 'transparent' tag. A typedef is considered 'transparent' if it
                shares a name and spelling location with its underlying tag type, as is the case with the
                NS_ENUM macro. non-zero if transparent and zero otherwise.
            </summary>
        </member>
        <member name="M:LibClang.Clang.TypeVisitFields(LibClang.Type,LibClang.FieldVisitor,LibClang.ClientData)">
            <summary>
                Visit the fields of a particular type. This function visits all the direct fields of the
                given cursor, invoking the given visitor function with the cursors of each visited field.
            </summary>
        </member>
        <member name="M:LibClang.Clang.VerbatimBlockLineCommentGetText(LibClang.Comment)">
            <summary>a Comment_VerbatimBlockLine AST node. text contained in the AST node.</summary>
        </member>
        <member name="M:LibClang.Clang.VerbatimLineCommentGetText(LibClang.Comment)">
            <summary>a Comment_VerbatimLine AST node. text contained in the AST node.</summary>
        </member>
        <member name="M:LibClang.Clang.VirtualFileOverlayAddFileMapping(LibClang.VirtualFileOverlay,System.String,System.String)">
            <summary>
                Map an absolute virtual file path to an absolute real one. The virtual path must be
                canonicalized (not contain "."/"..").
            </summary>
        </member>
        <member name="M:LibClang.Clang.VirtualFileOverlayCreate(System.UInt32)">
            <summary>Create a VirtualFileOverlay object.</summary>
        </member>
        <member name="M:LibClang.Clang.VirtualFileOverlayDispose(LibClang.VirtualFileOverlay)">
            <summary>Dispose a VirtualFileOverlay object.</summary>
        </member>
        <member name="M:LibClang.Clang.VirtualFileOverlaySetCaseSensitivity(LibClang.VirtualFileOverlay,System.Boolean)">
            <summary>
                Set the case sensitivity for the <see cref="T:LibClang.VirtualFileOverlay" /> object.
                <para>
                    The <see cref="T:LibClang.VirtualFileOverlay" /> object is case-sensitive by default, this option
                    can be used to override the default.
                </para>
            </summary>
        </member>
        <member name="M:LibClang.Clang.VirtualFileOverlayWriteToBuffer(LibClang.VirtualFileOverlay,System.UInt32,System.IntPtr@,System.UInt32@)">
            <summary>Write out the VirtualFileOverlay object to a char buffer.</summary>
        </member>
        <member name="M:LibClang.Clang.VisitChildren(LibClang.Cursor,LibClang.CursorVisitor,LibClang.ClientData)">
            <summary>
                Visit the children of a particular cursor. This function visits all the direct children of
                the given cursor, invoking the given visitor function with the cursors of each visited child.
            </summary>
        </member>
        <member name="T:LibClang.AvailabilityKind">
            <summary>
                Describes the availability of a particular entity, which indicates whether the use of this
                entity will result in a warning or error due to it being deprecated or unavailable.
            </summary>
        </member>
        <member name="F:LibClang.AvailabilityKind.Available">
            <summary>The entity is available.</summary>
        </member>
        <member name="F:LibClang.AvailabilityKind.Deprecated">
            <summary>The entity is available, but has been deprecated (and its use is not recommended).</summary>
        </member>
        <member name="F:LibClang.AvailabilityKind.NotAvailable">
            <summary>The entity is not available; any use of it will be an error.</summary>
        </member>
        <member name="F:LibClang.AvailabilityKind.NotAccessible">
            <summary>The entity is available, but not accessible; any use of it will be an error.</summary>
        </member>
        <member name="T:LibClang.CallingConv">
            <summary>Describes the calling convention of a function type</summary>
        </member>
        <member name="F:LibClang.CallingConv.Default">
            <summary></summary>
        </member>
        <member name="F:LibClang.CallingConv.C">
            <summary></summary>
        </member>
        <member name="F:LibClang.CallingConv.X86StdCall">
            <summary></summary>
        </member>
        <member name="F:LibClang.CallingConv.X86FastCall">
            <summary></summary>
        </member>
        <member name="F:LibClang.CallingConv.X86ThisCall">
            <summary></summary>
        </member>
        <member name="F:LibClang.CallingConv.X86Pascal">
            <summary></summary>
        </member>
        <member name="F:LibClang.CallingConv.AAPCS">
            <summary></summary>
        </member>
        <member name="F:LibClang.CallingConv.AAPCSVFP">
            <summary></summary>
        </member>
        <member name="F:LibClang.CallingConv.X86RegCall">
            <summary></summary>
        </member>
        <member name="F:LibClang.CallingConv.IntelOclBicc">
            <summary></summary>
        </member>
        <member name="F:LibClang.CallingConv.Win64">
            <summary></summary>
        </member>
        <member name="F:LibClang.CallingConv.X8664Win64">
            <summary></summary>
        </member>
        <member name="F:LibClang.CallingConv.X8664SysV">
            <summary></summary>
        </member>
        <member name="F:LibClang.CallingConv.X86VectorCall">
            <summary></summary>
        </member>
        <member name="F:LibClang.CallingConv.Swift">
            <summary></summary>
        </member>
        <member name="F:LibClang.CallingConv.PreserveMost">
            <summary></summary>
        </member>
        <member name="F:LibClang.CallingConv.PreserveAll">
            <summary></summary>
        </member>
        <member name="F:LibClang.CallingConv.Invalid">
            <summary></summary>
        </member>
        <member name="F:LibClang.CallingConv.Unexposed">
            <summary></summary>
        </member>
        <member name="T:LibClang.ChildVisitResult">
            <summary>
                Describes how the traversal of the children of a particular cursor should proceed after
                visiting a particular child cursor.
                <para>
                    A value of this enumeration type should be returned by each <see cref="T:LibClang.CursorVisitor" />
                    to indicate how <see cref="M:LibClang.Clang.VisitChildren(LibClang.Cursor,LibClang.CursorVisitor,LibClang.ClientData)" /> proceed.
                </para>
            </summary>
        </member>
        <member name="F:LibClang.ChildVisitResult.Break">
            <summary>Terminates the cursor traversal.</summary>
        </member>
        <member name="F:LibClang.ChildVisitResult.Continue">
            <summary>
                Continues the cursor traversal with the next sibling of the cursor just visited, without
                visiting its children.
            </summary>
        </member>
        <member name="F:LibClang.ChildVisitResult.Recurse">
            <summary>Recursively traverse the children of this cursor, using the same visitor and client data.</summary>
        </member>
        <member name="T:LibClang.CodeCompleteFlags">
            <summary>
                Flags that can be passed to  <see cref="M:LibClang.Clang.CodeCompleteAt(LibClang.TranslationUnit,System.String,System.UInt32,System.UInt32,LibClang.UnsavedFile[],System.UInt32,LibClang.CodeCompleteFlags)" /> to modify its behavior.
                <para>
                    The enumerators in this enumeration can be bitwise-OR'd together to provide multiple
                    options to <see cref="M:LibClang.Clang.CodeCompleteAt(LibClang.TranslationUnit,System.String,System.UInt32,System.UInt32,LibClang.UnsavedFile[],System.UInt32,LibClang.CodeCompleteFlags)" />.
                </para>
            </summary>
        </member>
        <member name="F:LibClang.CodeCompleteFlags.IncludeMacros">
            <summary>Whether to include macros within the set of code completions returned.</summary>
        </member>
        <member name="F:LibClang.CodeCompleteFlags.IncludeCodePatterns">
            <summary>
                Whether to include code patterns for language constructs within the set of code
                completions, e.g., for loops.
            </summary>
        </member>
        <member name="F:LibClang.CodeCompleteFlags.IncludeBriefComments">
            <summary>Whether to include brief documentation within the set of code completions returned.</summary>
        </member>
        <member name="T:LibClang.CommentInlineCommandRenderKind">
            <summary>
                The most appropriate rendering mode for an inline command, chosen on command semantics in
                Doxygen.
            </summary>
        </member>
        <member name="F:LibClang.CommentInlineCommandRenderKind.Normal">
            <summary>Command argument should be rendered in a normal font.</summary>
        </member>
        <member name="F:LibClang.CommentInlineCommandRenderKind.Bold">
            <summary>Command argument should be rendered in a bold font.</summary>
        </member>
        <member name="F:LibClang.CommentInlineCommandRenderKind.Monospaced">
            <summary>Command argument should be rendered in a monospaced font.</summary>
        </member>
        <member name="F:LibClang.CommentInlineCommandRenderKind.Emphasized">
            <summary>Command argument should be rendered emphasized (typically italic font).</summary>
        </member>
        <member name="T:LibClang.CommentKind">
            <summary>
                Describes the type of the comment AST node (<see cref="T:LibClang.Comment" />).
                <para>
                    A comment node can be considered block content (e. g., paragraph), inline content (plain
                    text) or neither (the root AST node).
                </para>
            </summary>
        </member>
        <member name="F:LibClang.CommentKind.Null">
            <summary>
                Null comment.  No AST node is constructed at the requested location because there is no
                text or a syntax error.
            </summary>
        </member>
        <member name="F:LibClang.CommentKind.Text">
            <summary>Plain text.  Inline content.</summary>
        </member>
        <member name="F:LibClang.CommentKind.InlineCommand">
            <summary>A command with word-like arguments that is considered inline content.</summary>
        </member>
        <member name="F:LibClang.CommentKind.HtmlStartTag">
            <summary>HTML start tag with attributes (name-value pairs).  Considered inline content.</summary>
        </member>
        <member name="F:LibClang.CommentKind.HtmlEndTag">
            <summary>HTML end tag.  Considered inline content.</summary>
        </member>
        <member name="F:LibClang.CommentKind.Paragraph">
            <summary>A paragraph, contains inline comment.  The paragraph itself is block content.</summary>
        </member>
        <member name="F:LibClang.CommentKind.BlockCommand">
            <summary>
                A command that has zero or more word-like arguments (number of word-like arguments depends
                on command name) and a paragraph as an argument.
                <para>Block command is block content. Paragraph argument is also a child of the block command.</para>
            </summary>
        </member>
        <member name="F:LibClang.CommentKind.ParamCommand">
            <summary>
                A param or arg command that describes the function parameter (name, passing direction,
                description).
            </summary>
        </member>
        <member name="F:LibClang.CommentKind.TParamCommand">
            <summary>A tparam command that describes a template parameter (name and description).</summary>
        </member>
        <member name="F:LibClang.CommentKind.VerbatimBlockCommand">
            <summary>A verbatim block command (e. g., preformatted code).</summary>
        </member>
        <member name="F:LibClang.CommentKind.VerbatimBlockLine">
            <summary>A line of text that is contained within a verbatim comment node.</summary>
        </member>
        <member name="F:LibClang.CommentKind.VerbatimLine">
            <summary>
                A verbatim line command.  Verbatim line has an opening command, a single line of text (up
                to the newline after the opening command) and has no closing command.
            </summary>
        </member>
        <member name="F:LibClang.CommentKind.FullComment">
            <summary>A full comment attached to a declaration, contains block content.</summary>
        </member>
        <member name="T:LibClang.CommentParamPassDirection">
            <summary>Describes parameter passing direction for param or arg command.</summary>
        </member>
        <member name="F:LibClang.CommentParamPassDirection.In">
            <summary>The parameter is an input parameter.</summary>
        </member>
        <member name="F:LibClang.CommentParamPassDirection.Out">
            <summary>The parameter is an output parameter.</summary>
        </member>
        <member name="F:LibClang.CommentParamPassDirection.InOut">
            <summary>The parameter is an input and output parameter.</summary>
        </member>
        <member name="T:LibClang.CompilationDatabaseError">
            <summary>Error codes for Compilation Database</summary>
        </member>
        <member name="F:LibClang.CompilationDatabaseError.NoError">
            <summary>Success.</summary>
        </member>
        <member name="F:LibClang.CompilationDatabaseError.CanNotLoadDatabase">
            <summary>The database failed to load.</summary>
        </member>
        <member name="T:LibClang.CompletionChunkKind">
            <summary>
                Describes a single piece of text within a code-completion string. Each "chunk" within a
                code-completion string ( CXCompletionString) is either a piece of text with a specific "kind"
                that describes how that text should be interpreted by the client or is another completion
                string.
            </summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.Optional">
            <summary>
                A code-completion string that describes "optional" text that could be a part of the
                template (but is not required).
            </summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.TypedText">
            <summary>Text that a user would be expected to type to get this code-completion result.</summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.Text">
            <summary>
                Text that should be inserted as part of a code-completion result.
                <para>
                    A "text" chunk represents text that is part of the template to be inserted into user code
                    should this particular code-completion result be selected.
                </para>
            </summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.Placeholder">
            <summary>Placeholder text that should be replaced by the user.</summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.Informative">
            <summary>Informative text that should be displayed but never inserted as</summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.CurrentParameter">
            <summary>
                Text that describes the current parameter when code-completion is referring to function
                call, message send, or template specialization.
            </summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.LeftParen">
            <summary>
                A left parenthesis ('('), used to initiate a function call or signal the beginning of a
                function parameter list.
            </summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.RightParen">
            <summary>
                A right parenthesis (')'), used to finish a function call or signal the end of a function
                parameter list.
            </summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.LeftBracket">
            <summary>A left bracket ('[').</summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.RightBracket">
            <summary>A right bracket (']').</summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.LeftBrace">
            <summary>A left brace ('{').</summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.RightBrace">
            <summary>A right brace ('}').</summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.LeftAngle">
            <summary>A left angle bracket</summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.RightAngle">
            <summary>A right angle bracket</summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.Comma">
            <summary>A comma separator (',').</summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.ResultType">
            <summary>Text that specifies the result type of a given result.</summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.Colon">
            <summary>A colon (':').</summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.SemiColon">
            <summary>A semicolon (';').</summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.Equal">
            <summary>An '=' sign.</summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.HorizontalSpace">
            <summary>Horizontal space (' ').</summary>
        </member>
        <member name="F:LibClang.CompletionChunkKind.VerticalSpace">
            <summary>Vertical space</summary>
        </member>
        <member name="T:LibClang.CompletionContext">
            <summary>
                Bits that represent the context under which completion is occurring. The enumerators in
                this enumeration may be bitwise-OR'd together if multiple contexts are occurring
                simultaneously.
            </summary>
        </member>
        <member name="F:LibClang.CompletionContext.Unexposed">
            <summary>
                The context for completions is unexposed, as only Clang results should be included. (This
                is equivalent to having no context bits set.)
            </summary>
        </member>
        <member name="F:LibClang.CompletionContext.AnyType">
            <summary>Completions for any possible type should be included in the results.</summary>
        </member>
        <member name="F:LibClang.CompletionContext.AnyValue">
            <summary>
                Completions for any possible value (variables, function calls, etc.) should be included in
                the results.
            </summary>
        </member>
        <member name="F:LibClang.CompletionContext.ObjCObjectValue">
            <summary>
                Completions for values that resolve to an Objective-C object should be included in the
                results.
            </summary>
        </member>
        <member name="F:LibClang.CompletionContext.ObjCSelectorValue">
            <summary>
                Completions for values that resolve to an Objective-C selector should be included in the
                results.
            </summary>
        </member>
        <member name="F:LibClang.CompletionContext.CXXClassTypeValue">
            <summary>Completions for values that resolve to a C++ class type should be included in the results.</summary>
        </member>
        <member name="F:LibClang.CompletionContext.DotMemberAccess">
            <summary>
                Completions for fields of the member being accessed using the dot operator should be
                included in the results.
            </summary>
        </member>
        <member name="F:LibClang.CompletionContext.ArrowMemberAccess">
            <summary>
                Completions for fields of the member being accessed using the arrow operator should be
                included in the results.
            </summary>
        </member>
        <member name="F:LibClang.CompletionContext.ObjCPropertyAccess">
            <summary>
                Completions for properties of the Objective-C object being accessed using the dot operator
                should be included in the results.
            </summary>
        </member>
        <member name="F:LibClang.CompletionContext.EnumTag">
            <summary>Completions for enum tags should be included in the results.</summary>
        </member>
        <member name="F:LibClang.CompletionContext.UnionTag">
            <summary>Completions for union tags should be included in the results.</summary>
        </member>
        <member name="F:LibClang.CompletionContext.StructTag">
            <summary>Completions for struct tags should be included in the results.</summary>
        </member>
        <member name="F:LibClang.CompletionContext.ClassTag">
            <summary>Completions for C++ class names should be included in the results.</summary>
        </member>
        <member name="F:LibClang.CompletionContext.Namespace">
            <summary>Completions for C++ namespaces and namespace aliases should be included in the results.</summary>
        </member>
        <member name="F:LibClang.CompletionContext.NestedNameSpecifier">
            <summary>Completions for C++ nested name specifiers should be included in the results.</summary>
        </member>
        <member name="F:LibClang.CompletionContext.ObjCInterface">
            <summary>Completions for Objective-C interfaces (classes) should be included in the results.</summary>
        </member>
        <member name="F:LibClang.CompletionContext.ObjCProtocol">
            <summary>Completions for Objective-C protocols should be included in the results.</summary>
        </member>
        <member name="F:LibClang.CompletionContext.ObjCCategory">
            <summary>Completions for Objective-C categories should be included in the results.</summary>
        </member>
        <member name="F:LibClang.CompletionContext.ObjCInstanceMessage">
            <summary>Completions for Objective-C instance messages should be included in the results.</summary>
        </member>
        <member name="F:LibClang.CompletionContext.ObjCClassMessage">
            <summary>Completions for Objective-C class messages should be included in the results.</summary>
        </member>
        <member name="F:LibClang.CompletionContext.ObjCSelectorName">
            <summary>Completions for Objective-C selector names should be included in the results.</summary>
        </member>
        <member name="F:LibClang.CompletionContext.MacroName">
            <summary>Completions for preprocessor macro names should be included in the results.</summary>
        </member>
        <member name="F:LibClang.CompletionContext.NaturalLanguage">
            <summary>Natural language completions should be included in the results.</summary>
        </member>
        <member name="F:LibClang.CompletionContext.Unknown">
            <summary>The current context is unknown, so set all contexts.</summary>
        </member>
        <member name="T:LibClang.CursorExceptionKind">
            <summary>Describes the exception specification of a cursor.
                <para>A negative value indicates that the cursor is not a function declaration.</para>
            </summary>
        </member>
        <member name="F:LibClang.CursorExceptionKind.None">
            <summary>The cursor has no exception specification.</summary>
        </member>
        <member name="F:LibClang.CursorExceptionKind.DynamicNone">
            <summary>The cursor has exception specification throw()</summary>
        </member>
        <member name="F:LibClang.CursorExceptionKind.Dynamic">
            <summary>The cursor has exception specification throw(T1, T2)</summary>
        </member>
        <member name="F:LibClang.CursorExceptionKind.MSAny">
            <summary>The cursor has exception specification throw(...).</summary>
        </member>
        <member name="F:LibClang.CursorExceptionKind.BasicNoexcept">
            <summary>The cursor has exception specification basic noexcept.</summary>
        </member>
        <member name="F:LibClang.CursorExceptionKind.ComputedNoexcept">
            <summary>The cursor has exception specification computed noexcept.</summary>
        </member>
        <member name="F:LibClang.CursorExceptionKind.Unevaluated">
            <summary>The exception specification has not yet been evaluated.</summary>
        </member>
        <member name="F:LibClang.CursorExceptionKind.Uninstantiated">
            <summary>The exception specification has not yet been instantiated.</summary>
        </member>
        <member name="F:LibClang.CursorExceptionKind.Unparsed">
            <summary>The exception specification has not been parsed yet.</summary>
        </member>
        <member name="T:LibClang.CursorKind">
            <summary>Describes the kind of entity that a cursor refers to.</summary>
        </member>
        <member name="F:LibClang.CursorKind.UnexposedDecl">
            <summary>A declaration whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.StructDecl">
            <summary>A C or C++ struct.</summary>
        </member>
        <member name="F:LibClang.CursorKind.UnionDecl">
            <summary>A C or C++ union.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ClassDecl">
            <summary>A C++ class.</summary>
        </member>
        <member name="F:LibClang.CursorKind.EnumDecl">
            <summary>An enumeration.</summary>
        </member>
        <member name="F:LibClang.CursorKind.FieldDecl">
            <summary>A field (in C) or non-static data member (in C++) in a struct, union, or C++ class.</summary>
        </member>
        <member name="F:LibClang.CursorKind.EnumConstantDecl">
            <summary>An enumerator constant.</summary>
        </member>
        <member name="F:LibClang.CursorKind.FunctionDecl">
            <summary>A function.</summary>
        </member>
        <member name="F:LibClang.CursorKind.VarDecl">
            <summary>A variable.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ParmDecl">
            <summary>A function or method parameter.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCInterfaceDecl">
            <summary>An Objective-C @ interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCCategoryDecl">
            <summary>An Objective-C @ interface for a category.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCProtocolDecl">
            <summary>An Objective-C @ protocol declaration.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCPropertyDecl">
            <summary>An Objective-C @ property declaration.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCIvarDecl">
            <summary>An Objective-C instance variable.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCInstanceMethodDecl">
            <summary>An Objective-C instance method.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCClassMethodDecl">
            <summary>An Objective-C class method.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCImplementationDecl">
            <summary>An Objective-C @ implementation.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCCategoryImplDecl">
            <summary>An Objective-C @ implementation for a category.</summary>
        </member>
        <member name="F:LibClang.CursorKind.TypedefDecl">
            <summary>A typedef.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXMethod">
            <summary>A C++ class method.</summary>
        </member>
        <member name="F:LibClang.CursorKind.Namespace">
            <summary>A C++ namespace.</summary>
        </member>
        <member name="F:LibClang.CursorKind.LinkageSpec">
            <summary>A linkage specification, e.g. 'extern "C"'.</summary>
        </member>
        <member name="F:LibClang.CursorKind.Constructor">
            <summary>A C++ constructor.</summary>
        </member>
        <member name="F:LibClang.CursorKind.Destructor">
            <summary>A C++ destructor.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ConversionFunction">
            <summary>A C++ conversion function.</summary>
        </member>
        <member name="F:LibClang.CursorKind.TemplateTypeParameter">
            <summary>A C++ template type parameter.</summary>
        </member>
        <member name="F:LibClang.CursorKind.NonTypeTemplateParameter">
            <summary>A C++ non-type template parameter.</summary>
        </member>
        <member name="F:LibClang.CursorKind.TemplateTemplateParameter">
            <summary>A C++ template template parameter.</summary>
        </member>
        <member name="F:LibClang.CursorKind.FunctionTemplate">
            <summary>A C++ function template.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ClassTemplate">
            <summary>A C++ class template.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ClassTemplatePartialSpecialization">
            <summary>A C++ class template partial specialization.</summary>
        </member>
        <member name="F:LibClang.CursorKind.NamespaceAlias">
            <summary>A C++ namespace alias declaration.</summary>
        </member>
        <member name="F:LibClang.CursorKind.UsingDirective">
            <summary>A C++ using directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.UsingDeclaration">
            <summary>A C++ using declaration.</summary>
        </member>
        <member name="F:LibClang.CursorKind.TypeAliasDecl">
            <summary>A C++ alias declaration</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCSynthesizeDecl">
            <summary>An Objective-C @ synthesize definition.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCDynamicDecl">
            <summary>An Objective-C @ dynamic definition.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXAccessSpecifier">
            <summary>An access specifier.</summary>
        </member>
        <member name="F:LibClang.CursorKind.FirstDecl">
            <summary>An access specifier.</summary>
        </member>
        <member name="F:LibClang.CursorKind.LastDecl">
            <summary>An access specifier.</summary>
        </member>
        <member name="F:LibClang.CursorKind.FirstRef">
            <summary>An access specifier.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCSuperClassRef">
            <summary>An access specifier.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCProtocolRef">
            <summary>An access specifier.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCClassRef">
            <summary>An access specifier.</summary>
        </member>
        <member name="F:LibClang.CursorKind.TypeRef">
            <summary>
                A reference to a type declaration. A type reference occurs anywhere where a type is named
                but not declared. For example, given: typedef unsigned size_type; size_type size; The typedef
                is a declaration of size_type (CXCursor_TypedefDecl), while the type of the variable "size" is
                referenced. The cursor referenced by the type of size is the typedef for size_type.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXBaseSpecifier">
            <summary>
                A reference to a type declaration. A type reference occurs anywhere where a type is named
                but not declared. For example, given: typedef unsigned size_type; size_type size; The typedef
                is a declaration of size_type (CXCursor_TypedefDecl), while the type of the variable "size" is
                referenced. The cursor referenced by the type of size is the typedef for size_type.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.TemplateRef">
            <summary>
                A reference to a class template, function template, template template parameter, or class
                template partial specialization.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.NamespaceRef">
            <summary>A reference to a namespace or namespace alias.</summary>
        </member>
        <member name="F:LibClang.CursorKind.MemberRef">
            <summary>
                A reference to a member of a struct, union, or class that occurs in some non-expression
                context, e.g., a designated initializer.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.LabelRef">
            <summary>A reference to a labeled statement. ///</summary>
        </member>
        <member name="F:LibClang.CursorKind.OverloadedDeclRef">
            ///
            <summary>A reference to an overloaded declaration.</summary>
        </member>
        <member name="F:LibClang.CursorKind.VariableRef">
            <summary>
                A reference to a variable that occurs in some non-expression context, e.g., a C++ lambda
                capture list.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.LastRef">
            <summary>
                A reference to a variable that occurs in some non-expression context, e.g., a C++ lambda
                capture list.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.FirstInvalid">
            <summary>
                A reference to a variable that occurs in some non-expression context, e.g., a C++ lambda
                capture list.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.InvalidFile">
            <summary>
                A reference to a variable that occurs in some non-expression context, e.g., a C++ lambda
                capture list.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.NoDeclFound">
            <summary>
                A reference to a variable that occurs in some non-expression context, e.g., a C++ lambda
                capture list.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.NotImplemented">
            <summary>
                A reference to a variable that occurs in some non-expression context, e.g., a C++ lambda
                capture list.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.InvalidCode">
            <summary>
                A reference to a variable that occurs in some non-expression context, e.g., a C++ lambda
                capture list.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.LastInvalid">
            <summary>
                A reference to a variable that occurs in some non-expression context, e.g., a C++ lambda
                capture list.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.FirstExpr">
            <summary>
                A reference to a variable that occurs in some non-expression context, e.g., a C++ lambda
                capture list.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.UnexposedExpr">
            <summary>An expression whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.DeclRefExpr">
            <summary>
                An expression that refers to some value declaration, such as a function, variable, or
                enumerator.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.MemberRefExpr">
            <summary>An expression that refers to a member of a struct, union, class, Objective-C class, etc.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CallExpr">
            <summary>An expression that calls a function.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCMessageExpr">
            <summary>An expression that sends a message to an Objective-C object or class.</summary>
        </member>
        <member name="F:LibClang.CursorKind.BlockExpr">
            <summary>An expression that represents a block literal.</summary>
        </member>
        <member name="F:LibClang.CursorKind.IntegerLiteral">
            <summary>An integer literal.</summary>
        </member>
        <member name="F:LibClang.CursorKind.FloatingLiteral">
            <summary>A floating point number literal.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ImaginaryLiteral">
            <summary>An imaginary number literal.</summary>
        </member>
        <member name="F:LibClang.CursorKind.StringLiteral">
            <summary>A string literal.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CharacterLiteral">
            <summary>A character literal.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ParenExpr">
            <summary>A parenthesized expression, e.g. "(1)".
                <para>This AST node is only formed if full location information is requested.</para>
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.UnaryOperator">
            <summary>This represents the unary-expression's (except sizeof and alignof).</summary>
        </member>
        <member name="F:LibClang.CursorKind.ArraySubscriptExpr">
            <summary>[C99 6.5.2.1] Array Subscripting.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:LibClang.CursorKind.BinaryOperator" -->
        <member name="F:LibClang.CursorKind.CompoundAssignOperator">
            <summary>Compound assignment such as "+=".</summary>
        </member>
        <member name="F:LibClang.CursorKind.ConditionalOperator">
            <summary>The ?: ternary operator.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CStyleCastExpr">
            <summary>
                An explicit cast in C (C99 6.5.4) or a C-style cast in C++ (C++ [expr.cast]), which uses
                the syntax (Type)expr. For example: (int)f.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.CompoundLiteralExpr">
            <summary>[C99 6.5.2.5]</summary>
        </member>
        <member name="F:LibClang.CursorKind.InitListExpr">
            <summary>Describes an C or C++ initializer list.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:LibClang.CursorKind.AddrLabelExpr" -->
        <member name="F:LibClang.CursorKind.StmtExpr">
            <summary>This is the GNU Statement Expression extension: ({int X=4; X;})</summary>
        </member>
        <member name="F:LibClang.CursorKind.GenericSelectionExpr">
            <summary>Represents a C11 generic selection.</summary>
        </member>
        <member name="F:LibClang.CursorKind.GNUNullExpr">
            <summary>
                Implements the GNU __null extension, which is a name for a null pointer constant that has
                integral type (e.g., int or long) and is the same size and alignment as a pointer.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXStaticCastExpr">
            <summary>C++'s static_cast expression.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXDynamicCastExpr">
            <summary>C++'s dynamic_cast expression.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXReinterpretCastExpr">
            <summary>C++'s reinterpret_cast expression.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXConstCastExpr">
            <summary>C++'s const_cast expression.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXFunctionalCastExpr">
            <summary>
                Represents an explicit C++ type conversion that uses "functional" notion (C++
                [expr.type.conv]).
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXTypeidExpr">
            <summary>A C++ typeid expression (C++ [expr.typeid]).</summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXBoolLiteralExpr">
            <summary>[C++ 2.13.5] C++ Boolean Literal.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXNullPtrLiteralExpr">
            <summary>[C++0x 2.14.7] C++ Pointer Literal.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXThisExpr">
            <summary>Represents the "this" expression in C++</summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXThrowExpr">
            <summary>
                [C++ 15] C++ Throw Expression. This handles 'throw' and 'throw' assignment-expression.
                When assignment-expression isn't present, Op will be null.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXNewExpr">
            <summary>A new expression for memory allocation and constructor calls, e.g: "new CXXNewExpr(foo)".</summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXDeleteExpr">
            <summary>A delete expression for memory deallocation and destructor calls, e.g. "delete[] pArray".</summary>
        </member>
        <member name="F:LibClang.CursorKind.UnaryExpr">
            <summary>A unary expression. (noexcept, sizeof, or other traits)</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCStringLiteral">
            <summary>An Objective-C string literal i.e. " foo".</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCEncodeExpr">
            <summary>An Objective-C @ encode expression.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCSelectorExpr">
            <summary>An Objective-C @ selector expression.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCProtocolExpr">
            <summary>An Objective-C @ protocol expression.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCBridgedCastExpr">
            <summary>
                An Objective-C "bridged" cast expression, which casts between Objective-C pointers and C
                pointers, transferring ownership in the process. NSString *str = (__bridge_transfer NSString
                *)CFCreateString();
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.PackExpansionExpr">
            <summary>Represents a C++0x pack expansion that produces a sequence of expressions.</summary>
        </member>
        <member name="F:LibClang.CursorKind.SizeOfPackExpr">
            <summary>Represents an expression that computes the length of a parameter pack.</summary>
        </member>
        <member name="F:LibClang.CursorKind.LambdaExpr">
            <summary></summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCBoolLiteralExpr">
            <summary>Objective-c Boolean Literal.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCSelfExpr">
            <summary>Represents the "self" expression in an Objective-C method.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPArraySectionExpr">
            <summary>OpenMP 4.0 [2.4, Array Section].</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCAvailabilityCheckExpr">
            <summary>Represents an (...) check.</summary>
        </member>
        <member name="F:LibClang.CursorKind.LastExpr">
            <summary>Represents an (...) check.</summary>
        </member>
        <member name="F:LibClang.CursorKind.FirstStmt">
            <summary>Represents an (...) check.</summary>
        </member>
        <member name="F:LibClang.CursorKind.UnexposedStmt">
            <summary>A statement whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.LabelStmt">
            <summary>A labelled statement in a function.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CompoundStmt">
            <summary>
                A group of statements like { stmt stmt }. This cursor kind is used to describe compound
                statements, e.g. function bodies.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.CaseStmt">
            <summary>A case statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.DefaultStmt">
            <summary>A default statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.IfStmt">
            <summary>An if statement</summary>
        </member>
        <member name="F:LibClang.CursorKind.SwitchStmt">
            <summary>A switch statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.WhileStmt">
            <summary>A while statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.DoStmt">
            <summary>A do statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ForStmt">
            <summary>A for statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.GotoStmt">
            <summary>A goto statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.IndirectGotoStmt">
            <summary>An indirect goto statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ContinueStmt">
            <summary>A continue statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.BreakStmt">
            <summary>A break statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ReturnStmt">
            <summary>A return statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.GCCAsmStmt">
            <summary>A GCC inline assembly statement extension.</summary>
        </member>
        <member name="F:LibClang.CursorKind.AsmStmt">
            <summary>A GCC inline assembly statement extension.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCAtTryStmt">
            <summary>Objective-C's overall</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCAtCatchStmt">
            <summary>Objective-C's @ catch statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCAtFinallyStmt">
            <summary>Objective-C's @ finally statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCAtThrowStmt">
            <summary>Objective-C's @ throw statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCAtSynchronizedStmt">
            <summary>Objective-C's @ synchronized statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCAutoreleasePoolStmt">
            <summary>Objective-C's autorelease pool statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ObjCForCollectionStmt">
            <summary>Objective-C's collection statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXCatchStmt">
            <summary>C++'s catch statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXTryStmt">
            <summary>C++'s try statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXForRangeStmt">
            <summary>C++'s for (* : *) statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.SEHTryStmt">
            <summary>Windows Structured Exception Handling's try statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.SEHExceptStmt">
            <summary>Windows Structured Exception Handling's except statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.SEHFinallyStmt">
            <summary>Windows Structured Exception Handling's finally statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.MSAsmStmt">
            <summary>A MS inline assembly statement extension.</summary>
        </member>
        <member name="F:LibClang.CursorKind.NullStmt">
            <summary>
                The null statement ";": C99 6.8.3p3. This cursor kind is used to describe the null
                statement.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.DeclStmt">
            <summary>Adaptor class for mixing declarations with statements and expressions.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPParallelDirective">
            <summary>OpenMP parallel directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPSimdDirective">
            <summary>OpenMP SIMD directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPForDirective">
            <summary>OpenMP for directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPSectionsDirective">
            <summary>OpenMP sections directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPSectionDirective">
            <summary>OpenMP section directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPSingleDirective">
            <summary>OpenMP single directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPParallelForDirective">
            <summary>OpenMP parallel for directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPParallelSectionsDirective">
            <summary>OpenMP parallel sections directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTaskDirective">
            <summary>OpenMP task directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPMasterDirective">
            <summary>OpenMP master directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPCriticalDirective">
            <summary>OpenMP critical directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTaskyieldDirective">
            <summary>OpenMP taskyield directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPBarrierDirective">
            <summary>OpenMP barrier directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTaskwaitDirective">
            <summary>OpenMP taskwait directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPFlushDirective">
            <summary>OpenMP flush directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.SEHLeaveStmt">
            <summary>Windows Structured Exception Handling's leave statement.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPOrderedDirective">
            <summary>OpenMP ordered directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPAtomicDirective">
            <summary>OpenMP atomic directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPForSimdDirective">
            <summary>OpenMP for SIMD directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPParallelForSimdDirective">
            <summary>OpenMP parallel for SIMD directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTargetDirective">
            <summary>OpenMP target directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTeamsDirective">
            <summary>OpenMP teams directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTaskgroupDirective">
            <summary>OpenMP taskgroup directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPCancellationPointDirective">
            <summary>OpenMP cancellation point directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPCancelDirective">
            <summary>OpenMP cancel directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTargetDataDirective">
            <summary>OpenMP target data directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTaskLoopDirective">
            <summary>OpenMP taskloop directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTaskLoopSimdDirective">
            <summary>OpenMP taskloop simd directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPDistributeDirective">
            <summary>OpenMP distribute directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTargetEnterDataDirective">
            <summary>OpenMP target enter data directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTargetExitDataDirective">
            <summary>OpenMP target exit data directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTargetParallelDirective">
            <summary>OpenMP target parallel directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTargetParallelForDirective">
            <summary>OpenMP target parallel for directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTargetUpdateDirective">
            <summary>OpenMP target update directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPDistributeParallelForDirective">
            <summary>OpenMP distribute parallel for directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPDistributeParallelForSimdDirective">
            <summary>OpenMP distribute parallel for simd directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPDistributeSimdDirective">
            <summary>OpenMP distribute simd directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTargetParallelForSimdDirective">
            <summary>OpenMP target parallel for simd directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTargetSimdDirective">
            <summary>OpenMP target simd directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTeamsDistributeDirective">
            <summary>OpenMP teams distribute directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTeamsDistributeSimdDirective">
            <summary>OpenMP teams distribute simd directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTeamsDistributeParallelForSimdDirective">
            <summary>OpenMP teams distribute parallel for simd directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTeamsDistributeParallelForDirective">
            <summary>OpenMP teams distribute parallel for directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTargetTeamsDirective">
            <summary>OpenMP target teams directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTargetTeamsDistributeDirective">
            <summary>OpenMP target teams distribute directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTargetTeamsDistributeParallelForDirective">
            <summary>OpenMP target teams distribute parallel for directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTargetTeamsDistributeParallelForSimdDirective">
            <summary>OpenMP target teams distribute parallel for simd directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OMPTargetTeamsDistributeSimdDirective">
            <summary>OpenMP target teams distribute simd directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.LastStmt">
            <summary>OpenMP target teams distribute simd directive.</summary>
        </member>
        <member name="F:LibClang.CursorKind.TranslationUnit">
            <summary>
                Cursor that represents the translation unit itself. The translation unit cursor exists
                primarily to act as the root cursor for traversing the contents of a translation unit.
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.FirstAttr">
            <summary>
                Cursor that represents the translation unit itself.
                <para>
                    The translation unit cursor exists primarily to act as the root cursor for traversing the
                    contents of a translation unit.
                </para>
            </summary>
        </member>
        <member name="F:LibClang.CursorKind.UnexposedAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.IBActionAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.IBOutletAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.IBOutletCollectionAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXFinalAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CXXOverrideAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.AnnotateAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.AsmLabelAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.PackedAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.PureAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ConstAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.NoDuplicateAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CUDAConstantAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CUDADeviceAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CUDAGlobalAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CUDAHostAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.CUDASharedAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.VisibilityAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.DLLExport">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.DLLImport">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.LastAttr">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.PreprocessingDirective">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.MacroDefinition">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.MacroExpansion">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.MacroInstantiation">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.InclusionDirective">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.FirstPreprocessing">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.LastPreprocessing">
            <summary>An attribute whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.CursorKind.ModuleImportDecl">
            <summary>A module import declaration.</summary>
        </member>
        <member name="F:LibClang.CursorKind.TypeAliasTemplateDecl">
            <summary>A module import declaration.</summary>
        </member>
        <member name="F:LibClang.CursorKind.StaticAssert">
            <summary>A static_assert or _Static_assert node</summary>
        </member>
        <member name="F:LibClang.CursorKind.FriendDecl">
            <summary>a friend declaration.</summary>
        </member>
        <member name="F:LibClang.CursorKind.FirstExtraDecl">
            <summary>a friend declaration.</summary>
        </member>
        <member name="F:LibClang.CursorKind.LastExtraDecl">
            <summary>a friend declaration.</summary>
        </member>
        <member name="F:LibClang.CursorKind.OverloadCandidate">
            <summary>A code completion overload candidate.</summary>
        </member>
        <member name="T:LibClang.CXXAccessSpecifier">
            <summary>
                Represents the C++ access control level to a base class for a cursor with kind
                CX_CXXBaseSpecifier.
            </summary>
        </member>
        <member name="F:LibClang.CXXAccessSpecifier.Invalid">
            <summary></summary>
        </member>
        <member name="F:LibClang.CXXAccessSpecifier.Public">
            <summary></summary>
        </member>
        <member name="F:LibClang.CXXAccessSpecifier.Protected">
            <summary></summary>
        </member>
        <member name="F:LibClang.CXXAccessSpecifier.Private">
            <summary></summary>
        </member>
        <member name="T:LibClang.DiagnosticDisplayOptions">
            <summary>
                Options to control the display of diagnostics. The values in this enum are meant to be
                combined to customize the behavior of <see cref="M:LibClang.Clang.FormatDiagnostic(LibClang.Diagnostic,LibClang.DiagnosticDisplayOptions)" />.
            </summary>
        </member>
        <member name="F:LibClang.DiagnosticDisplayOptions.SourceLocation">
            <summary>Display the source-location information where the diagnostic was located.</summary>
        </member>
        <member name="F:LibClang.DiagnosticDisplayOptions.Column">
            <summary>
                If displaying the source-location information of the diagnostic, also include the column
                number.
            </summary>
        </member>
        <member name="F:LibClang.DiagnosticDisplayOptions.SourceRanges">
            <summary>
                If displaying the source-location information of the diagnostic, also include information
                about source ranges in a machine-parsable format.
            </summary>
        </member>
        <member name="F:LibClang.DiagnosticDisplayOptions.Option">
            <summary>
                Display the option name associated with this diagnostic, if any. The option name displayed
                (e.g., -Wconversion) will be placed in brackets after the diagnostic text. This option
                corresponds to the clang flag -fdiagnostics-show-option.
            </summary>
        </member>
        <member name="F:LibClang.DiagnosticDisplayOptions.CategoryId">
            <summary>
                Display the category number associated with this diagnostic, if any. The category number
                is displayed within brackets after the diagnostic text. This option corresponds to the clang
                flag -fdiagnostics-show-category=id.
            </summary>
        </member>
        <member name="F:LibClang.DiagnosticDisplayOptions.CategoryName">
            <summary>
                Display the category name associated with this diagnostic, if any. The category name is
                displayed within brackets after the diagnostic text. This option corresponds to the clang flag
                -fdiagnostics-show-category=name.
            </summary>
        </member>
        <member name="T:LibClang.DiagnosticSeverity">
            <summary>Describes the severity of a particular diagnostic.</summary>
        </member>
        <member name="F:LibClang.DiagnosticSeverity.Ignored">
            <summary>A diagnostic that has been suppressed, e.g., by a command-line option.</summary>
        </member>
        <member name="F:LibClang.DiagnosticSeverity.Note">
            <summary>This diagnostic is a note that should be attached to the previous (non-note) diagnostic.</summary>
        </member>
        <member name="F:LibClang.DiagnosticSeverity.Warning">
            <summary>This diagnostic indicates suspicious code that may not be wrong.</summary>
        </member>
        <member name="F:LibClang.DiagnosticSeverity.Error">
            <summary>This diagnostic indicates that the code is ill-formed.</summary>
        </member>
        <member name="F:LibClang.DiagnosticSeverity.Fatal">
            <summary>
                This diagnostic indicates that the code is ill-formed such that future parser recovery is
                unlikely to produce useful results.
            </summary>
        </member>
        <member name="T:LibClang.ErrorCode">
            <summary>
                Error codes returned by LibClang routines. <see cref="F:LibClang.ErrorCode.Success" /> is the only error code
                indicating success.  Other error codes, including not yet assigned non-zero values, indicate
                errors.
            </summary>
        </member>
        <member name="F:LibClang.ErrorCode.Success">
            <summary>No error.</summary>
        </member>
        <member name="F:LibClang.ErrorCode.Failure">
            <summary>
                A generic error code, no further details are available. Errors of this kind can get their
                own specific error codes in future LibClang versions.
            </summary>
        </member>
        <member name="F:LibClang.ErrorCode.Crashed">
            <summary>LibClang crashed while performing the requested operation.</summary>
        </member>
        <member name="F:LibClang.ErrorCode.InvalidArguments">
            <summary>The function detected that the arguments violate the function contract.</summary>
        </member>
        <member name="F:LibClang.ErrorCode.ASTReadError">
            <summary>An AST deserialization error has occurred.</summary>
        </member>
        <member name="T:LibClang.EvalResultKind">
            <summary></summary>
        </member>
        <member name="F:LibClang.EvalResultKind.Int">
            <summary></summary>
        </member>
        <member name="F:LibClang.EvalResultKind.Float">
            <summary></summary>
        </member>
        <member name="F:LibClang.EvalResultKind.ObjCStrLiteral">
            <summary></summary>
        </member>
        <member name="F:LibClang.EvalResultKind.StrLiteral">
            <summary></summary>
        </member>
        <member name="F:LibClang.EvalResultKind.CFStr">
            <summary></summary>
        </member>
        <member name="F:LibClang.EvalResultKind.Other">
            <summary></summary>
        </member>
        <member name="F:LibClang.EvalResultKind.UnExposed">
            <summary></summary>
        </member>
        <member name="T:LibClang.GlobalOptFlags">
            <summary></summary>
        </member>
        <member name="F:LibClang.GlobalOptFlags.None">
            <summary>Used to indicate that no special CXIndex options are needed.</summary>
        </member>
        <member name="F:LibClang.GlobalOptFlags.ThreadBackgroundPriorityForIndexing">
            <summary>
                Used to indicate that threads that LibClang creates for indexing purposes should use
                background priority. Affects #clang_indexSourceFile, #clang_indexTranslationUnit,
                #clang_parseTranslationUnit, #clang_saveTranslationUnit.
            </summary>
        </member>
        <member name="F:LibClang.GlobalOptFlags.ThreadBackgroundPriorityForEditing">
            <summary>
                Used to indicate that threads that LibClang creates for editing purposes should use
                background priority. Affects #clang_reparseTranslationUnit, #clang_codeCompleteAt,
                #clang_annotateTokens
            </summary>
        </member>
        <member name="F:LibClang.GlobalOptFlags.ThreadBackgroundPriorityForAll">
            <summary>Used to indicate that all threads that LibClang creates should use background priority.</summary>
        </member>
        <member name="T:LibClang.IdxAttrKind">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxAttrKind.Unexposed">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxAttrKind.IBAction">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxAttrKind.IBOutlet">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxAttrKind.IBOutletCollection">
            <summary></summary>
        </member>
        <member name="T:LibClang.IdxDeclInfoFlags">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxDeclInfoFlags.FlagSkipped">
            <summary></summary>
        </member>
        <member name="T:LibClang.IdxEntityCXXTemplateKind">
            <summary>Extra C++ template information for an entity.</summary>
        </member>
        <member name="F:LibClang.IdxEntityCXXTemplateKind.NonTemplate">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityCXXTemplateKind.Template">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityCXXTemplateKind.TemplatePartialSpecialization">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityCXXTemplateKind.TemplateSpecialization">
            <summary></summary>
        </member>
        <member name="T:LibClang.IdxEntityKind">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.Unexposed">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.Typedef">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.Function">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.Variable">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.Field">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.EnumConstant">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.ObjCClass">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.ObjCProtocol">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.ObjCCategory">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.ObjCInstanceMethod">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.ObjCClassMethod">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.ObjCProperty">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.ObjCIvar">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.Enum">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.Struct">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.Union">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.CXXClass">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.CXXNamespace">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.CXXNamespaceAlias">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.CXXStaticVariable">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.CXXStaticMethod">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.CXXInstanceMethod">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.CXXConstructor">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.CXXDestructor">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.CXXConversionFunction">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.CXXTypeAlias">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityKind.CXXInterface">
            <summary></summary>
        </member>
        <member name="T:LibClang.IdxEntityLanguage">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityLanguage.None">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityLanguage.C">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityLanguage.ObjC">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityLanguage.CXX">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityLanguage.Swift">
            <summary></summary>
        </member>
        <member name="T:LibClang.IdxEntityRefKind">
            <summary>Data for IndexerCallbacks#indexEntityReference.</summary>
        </member>
        <member name="F:LibClang.IdxEntityRefKind.Direct">
            <summary>The entity is referenced directly in user's code.</summary>
        </member>
        <member name="F:LibClang.IdxEntityRefKind.Implicit">
            <summary>An implicit reference, e.g. a reference of an Objective-C method via the dot syntax.</summary>
        </member>
        <member name="T:LibClang.IdxObjCContainerKind">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCContainerKind.ForwardRef">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCContainerKind.Interface">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCContainerKind.Implementation">
            <summary></summary>
        </member>
        <member name="T:LibClang.IndexOptFlags">
            <summary></summary>
        </member>
        <member name="F:LibClang.IndexOptFlags.None">
            <summary>Used to indicate that no special indexing options are needed.</summary>
        </member>
        <member name="F:LibClang.IndexOptFlags.SuppressRedundantRefs">
            <summary>
                Used to indicate that IndexerCallbacks#indexEntityReference should be invoked for only one
                reference of an entity per source file that does not also include a declaration/definition of
                the entity.
            </summary>
        </member>
        <member name="F:LibClang.IndexOptFlags.IndexFunctionLocalSymbols">
            <summary>
                Function-local symbols should be indexed. If this is not set function-local symbols will
                be ignored.
            </summary>
        </member>
        <member name="F:LibClang.IndexOptFlags.IndexImplicitTemplateInstantiations">
            <summary>
                Implicit function/class template instantiations should be indexed. If this is not set,
                implicit instantiations will be ignored.
            </summary>
        </member>
        <member name="F:LibClang.IndexOptFlags.SuppressWarnings">
            <summary>Suppress all compiler warnings when parsing for indexing.</summary>
        </member>
        <member name="F:LibClang.IndexOptFlags.SkipParsedBodiesInSession">
            <summary>
                Skip a function/method body that was already parsed during an indexing session associated
                with a CXIndexAction object. Bodies in system headers are always skipped.
            </summary>
        </member>
        <member name="T:LibClang.LanguageKind">
            <summary>Describe the "language" of the entity referred to by a cursor.</summary>
        </member>
        <member name="F:LibClang.LanguageKind.Invalid">
            <summary></summary>
        </member>
        <member name="F:LibClang.LanguageKind.C">
            <summary></summary>
        </member>
        <member name="F:LibClang.LanguageKind.ObjC">
            <summary></summary>
        </member>
        <member name="F:LibClang.LanguageKind.CPlusPlus">
            <summary></summary>
        </member>
        <member name="T:LibClang.LinkageKind">
            <summary>Describe the linkage of the entity referred to by a cursor.</summary>
        </member>
        <member name="F:LibClang.LinkageKind.Invalid">
            <summary>This value indicates that no linkage information is available for a provided CXCursor.</summary>
        </member>
        <member name="F:LibClang.LinkageKind.NoLinkage">
            <summary>
                This is the linkage for variables, parameters, and so on that have automatic storage. This
                covers normal (non-extern) local variables.
            </summary>
        </member>
        <member name="F:LibClang.LinkageKind.Internal">
            <summary>This is the linkage for static variables and static functions.</summary>
        </member>
        <member name="F:LibClang.LinkageKind.UniqueExternal">
            <summary>
                This is the linkage for entities with external linkage that live in C++ anonymous
                namespaces.
            </summary>
        </member>
        <member name="F:LibClang.LinkageKind.External">
            <summary>This is the linkage for entities with true, external linkage.</summary>
        </member>
        <member name="T:LibClang.LoadDiagError">
            <summary>Describes the kind of error that occurred (if any) in a call to clang_loadDiagnostics.</summary>
        </member>
        <member name="F:LibClang.LoadDiagError.None">
            <summary>Indicates that no error occurred.</summary>
        </member>
        <member name="F:LibClang.LoadDiagError.Unknown">
            <summary>Indicates that an unknown error occurred while attempting to deserialize diagnostics.</summary>
        </member>
        <member name="F:LibClang.LoadDiagError.CannotLoad">
            <summary>Indicates that the file containing the serialized diagnostics could not be opened.</summary>
        </member>
        <member name="F:LibClang.LoadDiagError.InvalidFile">
            <summary>Indicates that the serialized diagnostics file is invalid or corrupt.</summary>
        </member>
        <member name="T:LibClang.NameRefFlags">
            <summary></summary>
        </member>
        <member name="F:LibClang.NameRefFlags.WantQualifier">
            <summary>Include the nested-name-specifier, e.g. Foo:: in x.Foo::y, in the range.</summary>
        </member>
        <member name="F:LibClang.NameRefFlags.WantTemplateArgs">
            <summary>Include the explicit template arguments.</summary>
        </member>
        <member name="F:LibClang.NameRefFlags.WantSinglePiece">
            <summary>If the name is non-contiguous, return the full spanning range.</summary>
        </member>
        <member name="T:LibClang.ObjCDeclQualifierKind">
            <summary>
                'Qualifiers' written next to the return and parameter types in Objective-C method
                declarations.
            </summary>
        </member>
        <member name="F:LibClang.ObjCDeclQualifierKind.None">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCDeclQualifierKind.In">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCDeclQualifierKind.Inout">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCDeclQualifierKind.Out">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCDeclQualifierKind.Bycopy">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCDeclQualifierKind.Byref">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCDeclQualifierKind.Oneway">
            <summary></summary>
        </member>
        <member name="T:LibClang.ObjCPropertyAttrKind">
            <summary>Property attributes for a ObjCPropertyDecl.</summary>
        </member>
        <member name="F:LibClang.ObjCPropertyAttrKind.Noattr">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCPropertyAttrKind.Readonly">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCPropertyAttrKind.Getter">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCPropertyAttrKind.Assign">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCPropertyAttrKind.Readwrite">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCPropertyAttrKind.Retain">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCPropertyAttrKind.Copy">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCPropertyAttrKind.Nonatomic">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCPropertyAttrKind.Setter">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCPropertyAttrKind.Atomic">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCPropertyAttrKind.Weak">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCPropertyAttrKind.Strong">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCPropertyAttrKind.UnsafeUnretained">
            <summary></summary>
        </member>
        <member name="F:LibClang.ObjCPropertyAttrKind.Class">
            <summary></summary>
        </member>
        <member name="T:LibClang.RefQualifierKind">
            <summary></summary>
        </member>
        <member name="F:LibClang.RefQualifierKind.None">
            <summary>No ref-qualifier was provided.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:LibClang.RefQualifierKind.LValue" -->
        <!-- Badly formed XML comment ignored for member "F:LibClang.RefQualifierKind.RValue" -->
        <member name="T:LibClang.ReparseFlags">
            <summary>
                Flags that control the reparsing of translation units. The enumerators in this enumeration
                type are meant to be bitwise ORed together to specify which options should be used when
                reparsing the translation unit.
            </summary>
        </member>
        <member name="F:LibClang.ReparseFlags.None">
            <summary>Used to indicate that no special reparsing options are needed.</summary>
        </member>
        <member name="T:LibClang.Result">
            <summary></summary>
        </member>
        <member name="F:LibClang.Result.Success">
            <summary>Function returned successfully.</summary>
        </member>
        <member name="F:LibClang.Result.Invalid">
            <summary>One of the parameters was invalid for the function.</summary>
        </member>
        <member name="F:LibClang.Result.VisitBreak">
            <summary>The function was terminated by a callback (e.g. it returned CXVisit_Break)</summary>
        </member>
        <member name="T:LibClang.SaveError">
            <summary>
                Describes the kind of error that occurred (if any) in a call to
                clang_saveTranslationUnit().
            </summary>
        </member>
        <member name="F:LibClang.SaveError.None">
            <summary>Indicates that no error occurred while saving a translation unit.</summary>
        </member>
        <member name="F:LibClang.SaveError.Unknown">
            <summary>
                Indicates that an unknown error occurred while attempting to save the file. This error
                typically indicates that file I/O failed when attempting to write the file.
            </summary>
        </member>
        <member name="F:LibClang.SaveError.TranslationErrors">
            <summary>
                Indicates that errors during translation prevented this attempt to save the translation
                unit.
            </summary>
        </member>
        <member name="F:LibClang.SaveError.InvalidTU">
            <summary>Indicates that the translation unit to be saved was somehow invalid (e.g., NULL).</summary>
        </member>
        <member name="T:LibClang.SaveTranslationUnitFlags">
            <summary>
                Flags that control how translation units are saved. The enumerators in this enumeration
                type are meant to be bitwise ORed together to specify which options should be used when saving
                the translation unit.
            </summary>
        </member>
        <member name="F:LibClang.SaveTranslationUnitFlags.None">
            <summary>Used to indicate that no special saving options are needed.</summary>
        </member>
        <member name="T:LibClang.StorageClass">
            <summary>
                Represents the storage classes as declared in the source. CX_SC_Invalid was added for the
                case that the passed cursor in not a declaration.
            </summary>
        </member>
        <member name="F:LibClang.StorageClass.SCInvalid">
            <summary></summary>
        </member>
        <member name="F:LibClang.StorageClass.SCNone">
            <summary></summary>
        </member>
        <member name="F:LibClang.StorageClass.SCExtern">
            <summary></summary>
        </member>
        <member name="F:LibClang.StorageClass.SCStatic">
            <summary></summary>
        </member>
        <member name="F:LibClang.StorageClass.SCPrivateExtern">
            <summary></summary>
        </member>
        <member name="F:LibClang.StorageClass.SCOpenCLWorkGroupLocal">
            <summary></summary>
        </member>
        <member name="F:LibClang.StorageClass.SCAuto">
            <summary></summary>
        </member>
        <member name="F:LibClang.StorageClass.SCRegister">
            <summary></summary>
        </member>
        <member name="T:LibClang.TemplateArgumentKind">
            <summary>
                Describes the kind of a template argument. See the definition of
                llvm::clang::TemplateArgument::ArgKind for full element descriptions.
            </summary>
        </member>
        <member name="F:LibClang.TemplateArgumentKind.Null">
            <summary></summary>
        </member>
        <member name="F:LibClang.TemplateArgumentKind.Type">
            <summary></summary>
        </member>
        <member name="F:LibClang.TemplateArgumentKind.Declaration">
            <summary></summary>
        </member>
        <member name="F:LibClang.TemplateArgumentKind.NullPtr">
            <summary></summary>
        </member>
        <member name="F:LibClang.TemplateArgumentKind.Integral">
            <summary></summary>
        </member>
        <member name="F:LibClang.TemplateArgumentKind.Template">
            <summary></summary>
        </member>
        <member name="F:LibClang.TemplateArgumentKind.TemplateExpansion">
            <summary></summary>
        </member>
        <member name="F:LibClang.TemplateArgumentKind.Expression">
            <summary></summary>
        </member>
        <member name="F:LibClang.TemplateArgumentKind.Pack">
            <summary></summary>
        </member>
        <member name="F:LibClang.TemplateArgumentKind.Invalid">
            <summary></summary>
        </member>
        <member name="T:LibClang.TLSKind">
            <summary>Describe the "thread-local storage (TLS) kind" of the declaration referred to by a cursor.</summary>
        </member>
        <member name="F:LibClang.TLSKind.None">
            <summary></summary>
        </member>
        <member name="F:LibClang.TLSKind.Dynamic">
            <summary></summary>
        </member>
        <member name="F:LibClang.TLSKind.Static">
            <summary></summary>
        </member>
        <member name="T:LibClang.TokenKind">
            <summary>Describes a kind of token.</summary>
        </member>
        <member name="F:LibClang.TokenKind.Punctuation">
            <summary>A token that contains some kind of punctuation.</summary>
        </member>
        <member name="F:LibClang.TokenKind.Keyword">
            <summary>A language keyword.</summary>
        </member>
        <member name="F:LibClang.TokenKind.Identifier">
            <summary>An identifier (that is not a keyword).</summary>
        </member>
        <member name="F:LibClang.TokenKind.Literal">
            <summary>A numeric, string, or character literal.</summary>
        </member>
        <member name="F:LibClang.TokenKind.Comment">
            <summary>A comment.</summary>
        </member>
        <member name="T:LibClang.TranslationUnitFlags">
            <summary>
                Flags that control the creation of translation units. The enumerators in this enumeration
                type are meant to be bitwise ORed together to specify which options should be used when
                constructing the translation unit.
            </summary>
        </member>
        <member name="F:LibClang.TranslationUnitFlags.None">
            <summary>Used to indicate that no special translation-unit options are needed.</summary>
        </member>
        <member name="F:LibClang.TranslationUnitFlags.DetailedPreprocessingRecord">
            <summary>
                Used to indicate that the parser should construct a "detailed" preprocessing record,
                including all macro definitions and instantiations. Constructing a detailed preprocessing
                record requires more memory and time to parse, since the information contained in the record is
                usually not retained. However, it can be useful for applications that require more detailed
                information about the behavior of the preprocessor.
            </summary>
        </member>
        <member name="F:LibClang.TranslationUnitFlags.Incomplete">
            <summary>
                Used to indicate that the translation unit is incomplete. When a translation unit is
                considered "incomplete", semantic analysis that is typically performed at the end of the
                translation unit will be suppressed. For example, this suppresses the completion of tentative
                declarations in C and of instantiation of implicitly-instantiation function templates in C++.
                This option is typically used when parsing a header with the intent of producing a precompiled
                header.
            </summary>
        </member>
        <member name="F:LibClang.TranslationUnitFlags.PrecompiledPreamble">
            <summary>
                Used to indicate that the translation unit should be built with an implicit precompiled
                header for the preamble. An implicit precompiled header is used as an optimization when a
                particular translation unit is likely to be reparsed many times when the sources aren't
                changing that often. In this case, an implicit precompiled header will be built containing all
                of the initial includes at the top of the main file (what we refer to as the "preamble" of the
                file). In subsequent parses, if the preamble or the files in it have not changed,
                clang_reparseTranslationUnit() will re-use the implicit precompiled header to improve parsing
                performance.
            </summary>
        </member>
        <member name="F:LibClang.TranslationUnitFlags.CacheCompletionResults">
            <summary>
                Used to indicate that the translation unit should cache some code-completion results with
                each reparse of the source file. Caching of code-completion results is a performance
                optimization that introduces some overhead to reparsing but improves the performance of
                code-completion operations.
            </summary>
        </member>
        <member name="F:LibClang.TranslationUnitFlags.ForSerialization">
            <summary>
                Used to indicate that the translation unit will be serialized with
                clang_saveTranslationUnit. This option is typically used when parsing a header with the intent
                of producing a precompiled header.
            </summary>
        </member>
        <member name="F:LibClang.TranslationUnitFlags.CXXChainedPCH">
            <summary>
                DEPRECATED: Enabled chained precompiled preambles in C++. Note: this is a *temporary*
                option that is available only while we are testing C++ precompiled preamble support. It is
                deprecated.
            </summary>
        </member>
        <member name="F:LibClang.TranslationUnitFlags.SkipFunctionBodies">
            <summary>
                Used to indicate that function/method bodies should be skipped while parsing. This option
                can be used to search for declarations/definitions while ignoring the usages.
            </summary>
        </member>
        <member name="F:LibClang.TranslationUnitFlags.IncludeBriefCommentsInCodeCompletion">
            <summary>
                Used to indicate that brief documentation comments should be included into the set of code
                completions returned from this translation unit.
            </summary>
        </member>
        <member name="F:LibClang.TranslationUnitFlags.CreatePreambleOnFirstParse">
            <summary>
                Used to indicate that the precompiled preamble should be created on the first parse.
                Otherwise it will be created on the first reparse. This trades runtime on the first parse
                (serializing the preamble takes time) for reduced runtime on the second parse (can now reuse
                the preamble).
            </summary>
        </member>
        <member name="F:LibClang.TranslationUnitFlags.KeepGoing">
            <summary>
                Do not stop processing when fatal errors are encountered. When fatal errors are
                encountered while parsing a translation unit, semantic analysis is typically stopped early when
                compiling code. A common source for fatal errors are unresolvable include files. For the
                purposes of an IDE, this is undesirable behavior and as much information as possible should be
                reported. Use this flag to enable this behavior.
            </summary>
        </member>
        <member name="F:LibClang.TranslationUnitFlags.SingleFileParse">
            <summary>Sets the preprocessor in a mode for parsing a single file only.</summary>
        </member>
        <member name="T:LibClang.TUResourceUsageKind">
            <summary>Categorizes how memory is being used by a translation unit.</summary>
        </member>
        <member name="F:LibClang.TUResourceUsageKind.AST">
            <summary></summary>
        </member>
        <member name="F:LibClang.TUResourceUsageKind.Identifiers">
            <summary></summary>
        </member>
        <member name="F:LibClang.TUResourceUsageKind.Selectors">
            <summary></summary>
        </member>
        <member name="F:LibClang.TUResourceUsageKind.GlobalCompletionResults">
            <summary></summary>
        </member>
        <member name="F:LibClang.TUResourceUsageKind.SourceManagerContentCache">
            <summary></summary>
        </member>
        <member name="F:LibClang.TUResourceUsageKind.ASTSideTables">
            <summary></summary>
        </member>
        <member name="F:LibClang.TUResourceUsageKind.SourceManagerMembufferMalloc">
            <summary></summary>
        </member>
        <member name="F:LibClang.TUResourceUsageKind.SourceManagerMembufferMMap">
            <summary></summary>
        </member>
        <member name="F:LibClang.TUResourceUsageKind.ExternalASTSourceMembufferMalloc">
            <summary></summary>
        </member>
        <member name="F:LibClang.TUResourceUsageKind.ExternalASTSourceMembufferMMap">
            <summary></summary>
        </member>
        <member name="F:LibClang.TUResourceUsageKind.Preprocessor">
            <summary></summary>
        </member>
        <member name="F:LibClang.TUResourceUsageKind.PreprocessingRecord">
            <summary></summary>
        </member>
        <member name="F:LibClang.TUResourceUsageKind.SourceManagerDataStructures">
            <summary></summary>
        </member>
        <member name="F:LibClang.TUResourceUsageKind.PreprocessorHeaderSearch">
            <summary></summary>
        </member>
        <member name="F:LibClang.TUResourceUsageKind.MEMORYINBYTESBEGIN">
            <summary></summary>
        </member>
        <member name="F:LibClang.TUResourceUsageKind.MEMORYINBYTESEND">
            <summary></summary>
        </member>
        <member name="F:LibClang.TUResourceUsageKind.First">
            <summary></summary>
        </member>
        <member name="F:LibClang.TUResourceUsageKind.Last">
            <summary></summary>
        </member>
        <member name="T:LibClang.TypeKind">
            <summary>Describes the kind of type</summary>
        </member>
        <member name="F:LibClang.TypeKind.Invalid">
            <summary>Represents an invalid type (e.g., where no type is available).</summary>
        </member>
        <member name="F:LibClang.TypeKind.Unexposed">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Void">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Bool">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.CharU">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.UChar">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Char16">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Char32">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.UShort">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.UInt">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.ULong">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.ULongLong">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.UInt128">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.CharS">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.SChar">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.WChar">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Short">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Int">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Long">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.LongLong">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Int128">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Float">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Double">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.LongDouble">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.NullPtr">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Overload">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Dependent">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.ObjCId">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.ObjCClass">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.ObjCSel">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Float128">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Half">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Float16">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.FirstBuiltin">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.LastBuiltin">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Complex">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Pointer">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.BlockPointer">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.LValueReference">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.RValueReference">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Record">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Enum">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Typedef">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.ObjCInterface">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.ObjCObjectPointer">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.FunctionNoProto">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.FunctionProto">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.ConstantArray">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Vector">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.IncompleteArray">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.VariableArray">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.DependentSizedArray">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.MemberPointer">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Auto">
            <summary>A type whose specific kind is not exposed via this interface.</summary>
        </member>
        <member name="F:LibClang.TypeKind.Elaborated">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.Pipe">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage1dRO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage1dArrayRO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage1dBufferRO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dRO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dArrayRO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dDepthRO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dArrayDepthRO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dMSAARO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dArrayMSAARO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dMSAADepthRO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dArrayMSAADepthRO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage3dRO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage1dWO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage1dArrayWO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage1dBufferWO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dWO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dArrayWO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dDepthWO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dArrayDepthWO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dMSAAWO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dArrayMSAAWO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dMSAADepthWO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dArrayMSAADepthWO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage3dWO">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage1dRW">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage1dArrayRW">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage1dBufferRW">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dRW">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dArrayRW">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dDepthRW">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dArrayDepthRW">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dMSAARW">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dArrayMSAARW">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dMSAADepthRW">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage2dArrayMSAADepthRW">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLImage3dRW">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLSampler">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLEvent">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLQueue">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="F:LibClang.TypeKind.OCLReserveID">
            <summary>
                Represents a type that was referred to using an elaborated type keyword. E.g., struct S,
                or via a qualified name, e.g., N::M::type, or both.
            </summary>
        </member>
        <member name="T:LibClang.TypeLayoutError">
            <summary>
                List the possible error codes for clang_Type_getSizeOf, clang_Type_getAlignOf,
                clang_Type_getOffsetOf and clang_Cursor_getOffsetOf. A value of this enumeration type can be
                returned if the target type is not a valid argument to sizeof, alignof or offsetof.
            </summary>
        </member>
        <member name="F:LibClang.TypeLayoutError.Invalid">
            <summary>Type is of kind CXType_Invalid.</summary>
        </member>
        <member name="F:LibClang.TypeLayoutError.Incomplete">
            <summary>The type is an incomplete Type.</summary>
        </member>
        <member name="F:LibClang.TypeLayoutError.Dependent">
            <summary>The type is a dependent Type.</summary>
        </member>
        <member name="F:LibClang.TypeLayoutError.NotConstantSize">
            <summary>The type is not a constant size type.</summary>
        </member>
        <member name="F:LibClang.TypeLayoutError.InvalidFieldName">
            <summary>The Field name is not valid for this record.</summary>
        </member>
        <member name="T:LibClang.VisibilityKind">
            <summary></summary>
        </member>
        <member name="F:LibClang.VisibilityKind.Invalid">
            <summary>This value indicates that no visibility information is available for a provided CXCursor.</summary>
        </member>
        <member name="F:LibClang.VisibilityKind.Hidden">
            <summary>Symbol not seen by the linker.</summary>
        </member>
        <member name="F:LibClang.VisibilityKind.Protected">
            <summary>Symbol seen by the linker but resolves to a symbol inside this object.</summary>
        </member>
        <member name="F:LibClang.VisibilityKind.Default">
            <summary>Symbol seen by the linker and acts like a normal symbol.</summary>
        </member>
        <member name="F:LibClang.VisitorResult.Break">
            <summary></summary>
        </member>
        <member name="F:LibClang.VisitorResult.Continue">
            <summary></summary>
        </member>
        <member name="T:LibClang.ClientData">
            <summary>
            Pointer type representing arbitrary client data.
            <para>Can be used interchangeably with a <see cref="T:System.IntPtr"/> type.</para>
            </summary>
        </member>
        <member name="M:LibClang.ClientData.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:LibClang.ClientData"/> struct.
            </summary>
            <param name="address">The address in memory.</param>
        </member>
        <member name="P:LibClang.ClientData.Null">
            <summary>
            Gets the null <see cref="T:LibClang.ClientData"/> value.
            </summary>
            <value>
            The null data.
            </value>
        </member>
        <member name="M:LibClang.ClientData.op_Implicit(LibClang.ClientData)~System.IntPtr">
            <summary>
            Performs an implicit conversion from <see cref="T:LibClang.ClientData"/> to <see cref="T:System.IntPtr"/>.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:LibClang.ClientData.op_Implicit(System.IntPtr)~LibClang.ClientData">
            <summary>
            Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:LibClang.ClientData"/>.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:LibClang.CodeCompleteResults">
            <summary>
                Contains the results of code-completion. This data structure contains the results of code
                completion, as produced by clang_codeCompleteAt(). Its contents must be freed by
                clang_disposeCodeCompleteResults.
            </summary>
        </member>
        <member name="P:LibClang.CodeCompleteResults.Count">
            <summary>The number of code-completion results stored in the results array.</summary>
        </member>
        <member name="P:LibClang.CodeCompleteResults.Diagnostics">
            <summary>Gets the diagnostics.</summary>
            <value>The diagnostics.</value>
        </member>
        <member name="P:LibClang.CodeCompleteResults.DiagnosticsCount">
            <summary>
                Determine the number of diagnostics produced prior to the location where code completion
                was performed.
            </summary>
            <value>The diagnostics count.</value>
        </member>
        <member name="P:LibClang.CodeCompleteResults.ObjCSelector">
            <summary>Gets the Objective-C selector.</summary>
            <value>The Objective-C selector.</value>
        </member>
        <member name="M:LibClang.CodeCompleteResults.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="M:LibClang.CodeCompleteResults.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate
                through the collection.
            </returns>
        </member>
        <member name="M:LibClang.CodeCompleteResults.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibClang.CodeCompleteResults.GetContainerKind(System.Boolean@)">
            <summary>Returns the cursor kind for the container for the current code completion context.</summary>
            <param name="incomplete"><c>true</c> if information is incomplete, otherwise <c>false</c>.</param>
            <returns>The container kind.</returns>
        </member>
        <member name="M:LibClang.CodeCompleteResults.GetContainerUSR">
            <summary>
                Returns the USR for the container for the current code completion context. If there is not
                a container for the current context, this function will return the empty string. the code
                completion results to query the USR for the container
            </summary>
            <returns>The USR string.</returns>
        </member>
        <member name="M:LibClang.CodeCompleteResults.GetContexts">
            <summary>Determines what completions are appropriate for the context the given code completion.</summary>
            <returns>
                The kinds of completions that are appropriate for use along with the given code completion
                results.
            </returns>
        </member>
        <member name="M:LibClang.CodeCompleteResults.GetDiagnostic(System.UInt32)">
            <summary>Retrieve a diagnostic associated with the this code completion.</summary>
            <param name="index">The zero-based diagnostic number to retrieve.</param>
            <returns>The requested diagnostic.</returns>
        </member>
        <member name="M:LibClang.CodeCompleteResults.GetDiagnostic(System.Int32)">
            <summary>Retrieve a diagnostic associated with the this code completion.</summary>
            <param name="index">The zero-based diagnostic number to retrieve.</param>
            <returns>The requested diagnostic.</returns>
        </member>
        <member name="T:LibClang.Comment">
            <summary>A parsed comment.</summary>
        </member>
        <member name="P:LibClang.Comment.Children">
            <summary>Gets the children comments.</summary>
            <value>The children.</value>
        </member>
        <member name="P:LibClang.Comment.ChildrenCount">
            <summary>Gets the number of children comments.</summary>
            <value>The children count.</value>
        </member>
        <member name="P:LibClang.Comment.Direction">
            <summary>Gets the parameter passing direction.</summary>
            <value>The direction.</value>
        </member>
        <member name="P:LibClang.Comment.HtmlAttrCount">
            <summary>Gets the HTML attribute count.</summary>
            <value>The HTML attribute count.</value>
        </member>
        <member name="P:LibClang.Comment.InlineArgumentCount">
            <summary>Gets the inline argument count.</summary>
            <value>The inline argument count.</value>
        </member>
        <member name="P:LibClang.Comment.InlineCommandName">
            <summary>Gets the name of the inline command.</summary>
            <value>The name of the inline command.</value>
        </member>
        <member name="P:LibClang.Comment.InlineCommentHasTrailingNewline">
            <summary>
                <c>true</c> if <see cref="T:LibClang.Comment" /> is inline content and has a newline immediately
                following it in the comment text.
                <para>Newlines between paragraphs do not count.</para>
            </summary>
            <value><c>true</c> if inline comment has trailing newline; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Comment.InlineRenderKind">
            <summary>Gets the most appropriate rendering mode, chosen on command semantics in Doxygen.</summary>
            <value>The kind of the inline render kind.</value>
        </member>
        <member name="P:LibClang.Comment.IsDirectionExplicit">
            <summary>Gets a value indicating whether this instance is direction explicit.</summary>
            <value><c>true</c> if this instance is direction explicit; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Comment.IsParamIndexValid">
            <summary>Gets a value indicating whether this instance is parameter index valid.</summary>
            <value><c>true</c> if this instance is parameter index valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Comment.IsParamPositionValid">
            <summary>Gets a value indicating whether this TParam is parameter position valid.</summary>
            <value><c>true</c> if this instance is parameter position valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Comment.IsSelfClosingHtmlTag">
            <summary>Gets a value indicating whether this instance is self closing HTML tag.</summary>
            <value><c>true</c> if this instance is self closing HTML tag; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Comment.IsWhitespace">
            <summary>
                A CommentParagraph node is considered whitespace if it contains only text nodes that are
                empty or whitespace.
            </summary>
            <value><c>true</c> if this instance is whitespace; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Comment.Kind">
            <summary>Gets the kind of the comment.</summary>
            <value>The kind.</value>
        </member>
        <member name="M:LibClang.Comment.GetArgumentCount">
            <summary>Gets the number of word-like arguments</summary>
            <returns>The argument count.</returns>
        </member>
        <member name="M:LibClang.Comment.GetBlockCommandArgText(System.UInt32)">
            <summary>Gets the block command argument text of the specified word-like argument.</summary>
            <param name="index">The index of the argument.</param>
            <returns>The associated text.</returns>
        </member>
        <member name="M:LibClang.Comment.GetBlockCommandArgText(System.Int32)">
            <summary>Gets the block command argument text of the specified word-like argument.</summary>
            <param name="index">The index of the argument.</param>
            <returns>The associated text.</returns>
        </member>
        <member name="M:LibClang.Comment.GetBlockCommandParagraph">
            <summary>Gets the block command paragraph argument of the block command</summary>
            <returns>The paragraph.</returns>
        </member>
        <member name="M:LibClang.Comment.GetChildAt(System.UInt32)">
            <summary>Gets the child comment at the specified index.</summary>
            <param name="index">The index of the child comment to retrieve.</param>
            <returns>The child comment</returns>
        </member>
        <member name="M:LibClang.Comment.GetChildAt(System.Int32)">
            <summary>Gets the child comment at the specified index.</summary>
            <param name="index">The index of the child comment to retrieve.</param>
            <returns>The child comment</returns>
        </member>
        <member name="M:LibClang.Comment.GetCommandName">
            <summary>Gets the name of the block command.</summary>
            <returns>The name of the block command.</returns>
        </member>
        <member name="M:LibClang.Comment.GetHtmlTagAttrName(System.UInt32)">
            <summary>Gets the name of the HTML tag attribute.</summary>
            <param name="index">The index of the attribute.</param>
            <returns>The name of the specified attribute.</returns>
        </member>
        <member name="M:LibClang.Comment.GetHtmlTagAttrName(System.Int32)">
            <summary>Gets the name of the HTML tag attribute.</summary>
            <param name="index">The index of the attribute.</param>
            <returns>The name of the specified attribute.</returns>
        </member>
        <member name="M:LibClang.Comment.GetHtmlTagAttrValue(System.UInt32)">
            <summary>Gets the value of the HTML tag attribute.</summary>
            <param name="index">The index of the attribute.</param>
            <returns>The value of the specified attribute.</returns>
        </member>
        <member name="M:LibClang.Comment.GetHtmlTagAttrValue(System.Int32)">
            <summary>Gets the value of the HTML tag attribute.</summary>
            <param name="index">The index of the attribute.</param>
            <returns>The value of the specified attribute.</returns>
        </member>
        <member name="M:LibClang.Comment.GetHtmlTagName">
            <summary>Gets the name of the HTML tag.</summary>
            <returns>The HTML tag name.</returns>
        </member>
        <member name="M:LibClang.Comment.GetInlineArgText(System.UInt32)">
            <summary>Gets the inline argument text.</summary>
            <param name="index">The specified index to retrieve.</param>
            <returns>The argument text.</returns>
        </member>
        <member name="M:LibClang.Comment.GetInlineArgText(System.Int32)">
            <summary>Gets the inline argument text.</summary>
            <param name="index">The specified index to retrieve.</param>
            <returns>The argument text.</returns>
        </member>
        <member name="M:LibClang.Comment.GetParamDepth">
            <summary>Gets the parameter depth.</summary>
            <returns></returns>
        </member>
        <member name="M:LibClang.Comment.GetParamIndex(System.UInt32)">
            <summary>Gets the index of the parameter.</summary>
            <param name="depth">The depth.</param>
            <returns>The index.</returns>
        </member>
        <member name="M:LibClang.Comment.GetParamIndex">
            <summary>Gets the index of the parameter.</summary>
            <returns>The index.</returns>
        </member>
        <member name="M:LibClang.Comment.GetParamName">
            <summary>Gets the name of the template parameter.</summary>
            <returns>The name.</returns>
        </member>
        <member name="M:LibClang.Comment.GetParamText">
            <summary>Gets the parameter text.</summary>
            <returns>The text.</returns>
        </member>
        <member name="M:LibClang.Comment.GetText">
            <summary>Gets the text for.</summary>
            <returns>The text.</returns>
        </member>
        <member name="M:LibClang.Comment.GetVerbatimBlockText">
            <summary>Gets the verbatim block text.</summary>
            <returns></returns>
        </member>
        <member name="M:LibClang.Comment.GetVerbatimLineText">
            <summary>Gets the verbatim line text.</summary>
            <returns></returns>
        </member>
        <member name="M:LibClang.Comment.HtmlTagToString">
            <summary>Convert an HTML tag AST node to string.</summary>
            <returns>The HTML string.</returns>
        </member>
        <member name="M:LibClang.Comment.ToHtml">
            <summary>Convert a given full parsed comment to an HTML fragment.</summary>
            <returns>An HTML string.</returns>
        </member>
        <member name="M:LibClang.Comment.ToXml">
            <summary>Convert a given full parsed comment to an XML document.</summary>
            <returns>An XML string.</returns>
        </member>
        <member name="M:LibClang.CompilationDatabase.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.CompilationDatabase" /> struct.</summary>
            <param name="address">The address in memory.</param>
        </member>
        <member name="P:LibClang.CompilationDatabase.Null">
            <summary>Gets the null (invalid) <see cref="T:LibClang.CompilationDatabase" />.</summary>
            <value>A null <see cref="T:LibClang.CompilationDatabase" />.</value>
        </member>
        <member name="P:LibClang.CompilationDatabase.Commands">
            <summary>Get all the compile commands in this compilation database.</summary>
            <value>The commands.</value>
        </member>
        <member name="M:LibClang.CompilationDatabase.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="M:LibClang.CompilationDatabase.FromDirectory(System.String,LibClang.CompilationDatabaseError@)">
            <summary>Creates a compilation database from the database found in directory build directory.</summary>
            <param name="buildDir">The build directory.</param>
            <param name="error">The error code result.</param>
            <returns>A newly created <see cref="T:LibClang.CompilationDatabase" />.</returns>
        </member>
        <member name="M:LibClang.CompilationDatabase.GetCompileCommands(System.String)">
            <summary>Find the compile commands used for a file.</summary>
            <param name="filename">The file to query.</param>
            <returns>The commands for the specified file.</returns>
        </member>
        <member name="M:LibClang.CompilationDatabase.op_Implicit(LibClang.CompilationDatabase)~System.IntPtr">
            <summary>
                Performs an implicit conversion from <see cref="T:LibClang.CompilationDatabase" /> to
                <see cref="T:System.IntPtr" />.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:LibClang.CompileCommand.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.CompileCommand" /> struct.</summary>
            <param name="address">The address in memory.</param>
        </member>
        <member name="P:LibClang.CompileCommand.Null">
            <summary>Gets the null (invalid) <see cref="T:LibClang.CompileCommand" />.</summary>
            <value>A null <see cref="T:LibClang.CompileCommand" />.</value>
        </member>
        <member name="P:LibClang.CompileCommand.ArgumentCount">
            <summary>Get the number of arguments in the compiler invocation.</summary>
            <value>The argument count.</value>
        </member>
        <member name="P:LibClang.CompileCommand.Arguments">
            <summary>Gets the arguments associated with this <see cref="T:LibClang.CompileCommand" />.</summary>
            <value>The arguments.</value>
        </member>
        <member name="P:LibClang.CompileCommand.Directory">
            <summary>Get the working directory where the <see cref="T:LibClang.CompileCommand" /> was executed from</summary>
            <value>The directory.</value>
        </member>
        <member name="P:LibClang.CompileCommand.Filename">
            <summary>Get the filename associated with the <see cref="T:LibClang.CompileCommand" />.</summary>
            <value>The filename.</value>
        </member>
        <member name="P:LibClang.CompileCommand.MappedSourcesCount">
            <summary>Get the number of source mappings for the compiler invocation.</summary>
            <value>The mapped sources count.</value>
        </member>
        <member name="M:LibClang.CompileCommand.GetArgument(System.UInt32)">
            <summary>Get the specified argument value in the compiler invocations.
                <para>For invariant, argument 0 is the compiler executable.</para>
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:LibClang.CompileCommand.GetArgument(System.Int32)">
            <summary>Get the specified argument value in the compiler invocations.
                <para>For invariant, argument 0 is the compiler executable.</para>
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:LibClang.CompileCommand.GetMappedSourceContent(System.UInt32)">
            <summary>Get the specified mapped source content for the compiler invocation.</summary>
            <param name="index">The index to retrieve.</param>
            <returns>The specified content.</returns>
        </member>
        <member name="M:LibClang.CompileCommand.GetMappedSourceContent(System.Int32)">
            <summary>Get the specified mapped source content for the compiler invocation.</summary>
            <param name="index">The index to retrieve.</param>
            <returns>The specified content.</returns>
        </member>
        <member name="M:LibClang.CompileCommand.GetMappedSourcePath(System.UInt32)">
            <summary>Get the specified mapped source path for the compiler invocation.</summary>
            <param name="index">The index to retrieve.</param>
            <returns>The specified source.</returns>
        </member>
        <member name="M:LibClang.CompileCommand.GetMappedSourcePath(System.Int32)">
            <summary>Get the specified mapped source path for the compiler invocation.</summary>
            <param name="index">The index to retrieve.</param>
            <returns>The specified source.</returns>
        </member>
        <member name="M:LibClang.CompileCommand.ToString">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:LibClang.CompileCommand.op_Implicit(LibClang.CompileCommand)~System.IntPtr">
            <summary>
                Performs an implicit conversion from <see cref="T:LibClang.CompileCommand" /> to
                <see cref="T:System.IntPtr" />.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:LibClang.CompileCommands.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.CompileCommands" /> struct.</summary>
            <param name="address">The address in memory.</param>
        </member>
        <member name="P:LibClang.CompileCommands.Item(System.Int32)">
            <summary>Gets the <see cref="T:LibClang.CompileCommand" /> at the specified index.</summary>
            <value>The <see cref="T:LibClang.CompileCommand" />.</value>
            <param name="index">The index.</param>
            <returns>The specified <see cref="T:LibClang.CompileCommand" />.</returns>
        </member>
        <member name="P:LibClang.CompileCommands.Item(System.UInt32)">
            <summary>Gets the <see cref="T:LibClang.CompileCommand" /> at the specified index.</summary>
            <value>The <see cref="T:LibClang.CompileCommand" />.</value>
            <param name="index">The index.</param>
            <returns>The specified <see cref="T:LibClang.CompileCommand" />.</returns>
        </member>
        <member name="P:LibClang.CompileCommands.Null">
            <summary>Gets the null (invalid) <see cref="T:LibClang.CompileCommands" />.</summary>
            <value>A null <see cref="T:LibClang.CompileCommands" /> object.</value>
        </member>
        <member name="P:LibClang.CompileCommands.Count">
            <summary>Get the number of <see cref="T:LibClang.CompileCommand" /> objects for a file.</summary>
            <value>The command count.</value>
        </member>
        <member name="M:LibClang.CompileCommands.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="M:LibClang.CompileCommands.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate
                through the collection.
            </returns>
        </member>
        <member name="M:LibClang.CompileCommands.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibClang.CompileCommands.GetCommand(System.UInt32)">
            <summary>Get the specified <see cref="T:LibClang.CompileCommand" /> for a file.</summary>
            <param name="index">The index of the command to retrieve.</param>
            <returns>The command.</returns>
        </member>
        <member name="M:LibClang.CompileCommands.GetCommand(System.Int32)">
            <summary>Get the specified <see cref="T:LibClang.CompileCommand" /> for a file.</summary>
            <param name="index">The index of the command to retrieve.</param>
            <returns>The command.</returns>
        </member>
        <member name="M:LibClang.CompileCommands.op_Implicit(LibClang.CompileCommands)~System.IntPtr">
            <summary>
                Performs an implicit conversion from <see cref="T:LibClang.CompileCommands" /> to
                <see cref="T:System.IntPtr" />.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:LibClang.CompletionResult">
            <summary>A single result of code completion.</summary>
        </member>
        <member name="F:LibClang.CompletionResult.CursorKind">
            <summary>
                The kind of entity that this completion refers to. The cursor kind will be a macro,
                keyword, or a declaration (one of the *Decl cursor kinds), describing the entity that the
                completion is referring to. In the future, we would like to provide a full cursor, to allow the
                client to extract additional information from declaration.
            </summary>
        </member>
        <member name="F:LibClang.CompletionResult.CompletionString">
            <summary>
                The code-completion string that describes how to insert this code-completion result into
                the editing buffer.
            </summary>
        </member>
        <member name="M:LibClang.CompletionString.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.CompletionString" /> struct.</summary>
            <param name="address">The address in memory.</param>
        </member>
        <member name="P:LibClang.CompletionString.AnnotationCount">
            <summary>Retrieve the number of annotations associated with the given completion string.</summary>
            <value>The number of annotations associated with the given completion string.</value>
        </member>
        <member name="P:LibClang.CompletionString.Availability">
            <summary>Determine the availability of the entity that this code-completion string refers to.</summary>
            <value>The availability.</value>
        </member>
        <member name="P:LibClang.CompletionString.BriefComment">
            <summary>
                Retrieve the brief documentation comment attached to the declaration that corresponds to
                the completion string.
            </summary>
            <value>The brief comment.</value>
        </member>
        <member name="P:LibClang.CompletionString.ChunkCount">
            <summary>Retrieve the number of chunks in the given code-completion string.</summary>
            <value>The chunk count.</value>
        </member>
        <member name="P:LibClang.CompletionString.Parent">
            <summary>Retrieve the parent context of the completion string.</summary>
            <value>The parent.</value>
        </member>
        <member name="P:LibClang.CompletionString.Priority">
            <summary>
                Determine the priority of this code completion. query.
                <para>
                    The priority of this completion string. Smaller values indicate higher-priority (more
                    likely) completions.
                </para>
            </summary>
            <value>The priority.</value>
        </member>
        <member name="M:LibClang.CompletionString.GetAnnotation(System.UInt32)">
            <summary>Retrieve the annotation associated with the given completion string.</summary>
            <param name="index">The 0-based index of the annotation of the completion string.</param>
            <returns>The annotation string associated with the completion at the specified index.</returns>
        </member>
        <member name="M:LibClang.CompletionString.GetAnnotation(System.Int32)">
            <summary>Retrieve the annotation associated with the given completion string.</summary>
            <param name="index">The 0-based index of the annotation of the completion string.</param>
            <returns>The annotation string associated with the completion at the specified index.</returns>
        </member>
        <member name="M:LibClang.CompletionString.GetChunkCompletion(System.UInt32)">
            <summary>
                Retrieve the completion string associated with a particular chunk within a completion
                string.
            </summary>
            <param name="index">The 0-based index of the chunk in the completion string.</param>
            <returns>The completion string associated with the chunk at index.</returns>
        </member>
        <member name="M:LibClang.CompletionString.GetChunkCompletion(System.Int32)">
            <summary>
                Retrieve the completion string associated with a particular chunk within a completion
                string.
            </summary>
            <param name="index">The 0-based index of the chunk in the completion string.</param>
            <returns>The completion string associated with the chunk at index.</returns>
        </member>
        <member name="M:LibClang.CompletionString.GetChunkKind(System.UInt32)">
            <summary>Determine the kind of a particular chunk within a completion string.</summary>
            <param name="index">The 0-based index of the chunk in the completion string.</param>
            <returns>The kind of the specified index.</returns>
        </member>
        <member name="M:LibClang.CompletionString.GetChunkKind(System.Int32)">
            <summary>Determine the kind of a particular chunk within a completion string.</summary>
            <param name="index">The 0-based index of the chunk in the completion string.</param>
            <returns>The kind of the specified index.</returns>
        </member>
        <member name="M:LibClang.CompletionString.GetChunkText(System.UInt32)">
            <summary>Retrieve the text associated with a particular chunk within the completion string.</summary>
            <param name="index">The 0-based index of the chunk in the completion string.</param>
            <returns>The text associated with the chunk at index.</returns>
        </member>
        <member name="M:LibClang.CompletionString.GetChunkText(System.Int32)">
            <summary>Retrieve the text associated with a particular chunk within the completion string.</summary>
            <param name="index">The 0-based index of the chunk in the completion string.</param>
            <returns>The text associated with the chunk at index.</returns>
        </member>
        <member name="M:LibClang.CompletionString.op_Implicit(LibClang.CompletionString)~System.IntPtr">
            <summary>
                Performs an implicit conversion from <see cref="T:LibClang.CompletionString" /> to
                <see cref="T:System.IntPtr" />.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:LibClang.Cursor">
            <summary>
                A cursor representing some element in the abstract syntax tree for a translation unit.
                <para>
                    The cursor abstraction unifies the different kinds of entities in a program--declaration,
                    statements, expressions, references to declarations, etc.--under a single "cursor"
                    abstraction with a common set of operations. Common operation for a cursor include: getting
                    the physical location in a source file where the cursor points, getting the name associated
                    with a cursor, and retrieving cursors for any child nodes of a particular cursor. Cursors
                    can be produced in two specific ways.
                </para>
                <para>
                    <see cref="M:LibClang.Clang.GetTranslationUnitCursor(LibClang.TranslationUnit)" /> produces a cursor for a translation unit,
                    from which one can use <see cref="M:LibClang.Clang.VisitChildren(LibClang.Cursor,LibClang.CursorVisitor,LibClang.ClientData)" /> to explore the rest of the
                    translation unit. <see cref="M:LibClang.Clang.GetCursor(LibClang.TranslationUnit,LibClang.SourceLocation)" />maps from a physical source location to the
                    entity that resides at that location, allowing one to map from the source code into the
                    AST.
                </para>
            </summary>
        </member>
        <member name="P:LibClang.Cursor.Null">
            <summary>Retrieve the null cursor, which represents no entity.</summary>
            <value>A null cursor.</value>
        </member>
        <member name="P:LibClang.Cursor.AccessSpecifier">
            <summary>Returns the access control level for the referenced object.</summary>
            <value>The access specifier.</value>
        </member>
        <member name="P:LibClang.Cursor.Arguments">
            <summary>Returns an object to enumerate through the arguments.</summary>
            <value>The arguments.</value>
        </member>
        <member name="P:LibClang.Cursor.AvailabilityKind">
            <summary>
                Determine the availability of the entity that this cursor refers to, taking the current
                target platform into account.
            </summary>
            <value>The availability of the cursor.</value>
        </member>
        <member name="P:LibClang.Cursor.Canonical">
            <summary>
                Retrieve the canonical cursor corresponding to the given cursor.
                <para>
                    In the C family of languages, many kinds of entities can be declared several times within
                    a single translation unit.
                </para>
            </summary>
            <value>The canonical cursor.</value>
        </member>
        <member name="P:LibClang.Cursor.CommentRange">
            <summary>
                Assuming cursor represents a declaration, returns the associated comment's source range.
                The range may include multiple consecutive comments with whitespace in between.
            </summary>
            <value>The comment range.</value>
        </member>
        <member name="P:LibClang.Cursor.CursorIsMacroBuiltin">
            <summary>Determine whether this cursor that is a macro, is a builtin one.</summary>
            <value><c>true</c> if [cursor is macro builtin]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.DisplayName">
            <summary>
                Retrieve the display name for the entity referenced by this cursor.
                <para>
                    The display name contains extra information that helps identify the cursor, such as the
                    parameters of a function or template or the arguments of a class template specialization.
                </para>
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:LibClang.Cursor.EnumDeclIsScoped">
            <summary>Determine if an enum declaration refers to a scoped enum.</summary>
            <value><c>true</c> if [enum decl is scoped]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.ExceptionKind">
            <summary>
                Retrieve the exception specification type associated with this cursor. This only returns a
                valid result if the cursor refers to a function or method.
            </summary>
        </member>
        <member name="P:LibClang.Cursor.FieldDeclBitWidth">
            <summary>Retrieve the bit width of a bit field declaration as an integer.
                <para>If a cursor that is not a bit field declaration is passed in, -1 is returned.</para>
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:LibClang.Cursor.HasAttrs">
            <summary>Determine whether the given cursor has any attributes.</summary>
            <value><c>true</c> if this instance has attrs; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IBOutletCollectionType">
            <summary>
                For cursors representing an IB outlet collection attribute, this function returns the
                collection element type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:LibClang.Cursor.IncludeFile">
            <summary>Retrieve the file that is included by this inclusion directive cursor.</summary>
            <value>The include file.</value>
        </member>
        <member name="P:LibClang.Cursor.IsAbstract">
            <summary>
                Determine if a C++ record is abstract, i.e. whether a class or struct has a pure virtual
                member function.
            </summary>
            <value><c>true</c> if this instance is abstract; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsAnonymous">
            <summary>Determine whether the given cursor represents an anonymous record declaration.</summary>
            <value><c>true</c> if this instance is anonymous; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsBitField">
            <summary>Returns non-zero if the cursor specifies a Record member that is a bitfield.</summary>
            <value><c>true</c> if this instance is bit field; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsConst">
            <summary>Determine if a C++ member function or member function template is declared 'const'.</summary>
            <value><c>true</c> if this instance is constant; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsConvertingConstructor">
            <summary>Determine if a C++ constructor is a converting constructor.</summary>
            <value><c>true</c> if this instance is converting constructor; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsCopyConstructor">
            <summary>Determine if a C++ constructor is a copy constructor.</summary>
            <value><c>true</c> if this instance is copy constructor; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsDefaultConstructor">
            <summary>Determine if a C++ constructor is the default constructor.</summary>
            <value><c>true</c> if this instance is default constructor; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsDefaulted">
            <summary>Determine if a C++ method is declared '= default'.</summary>
            <value><c>true</c> if this instance is defaulted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsDefinition">
            <summary>
                Determine whether the declaration pointed to by this cursor is also a definition of that
                entity.
            </summary>
            <value><c>true</c> if this instance is definition; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsDynamicCall">
            <summary>
                Given a cursor pointing to a C++ method call or an Objective-C message, returns true if
                the method/message is "dynamic", meaning: For a C++ method: the call is virtual. For an
                Objective-C message: the receiver is an object instance, not 'super' or a specific class. If
                the method/message is "static" or the cursor does not point to a method/message, it will return
                false.
            </summary>
            <value><c>true</c> if this instance is dynamic call; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsFunctionInlined">
            <summary>Determine whether this cursor that is a function declaration, is an inline declaration.</summary>
            <value><c>true</c> if this instance is function inlined; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsMacroFunctionLike">
            <summary>Determine whether this cursor is a macro, is function like.</summary>
            <value><c>true</c> if cursor is macro function like; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsMoveConstructor">
            <summary>Determine if a C++ constructor is a move constructor.</summary>
            <value><c>true</c> if this instance is move constructor; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsMutable">
            <summary>Determine if a C++ field is declared 'mutable'.</summary>
            <value><c>true</c> if this instance is mutable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsNull">
            <summary>Returns flag indicating if cursor is null.</summary>
            <value><c>true</c> if this instance is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsObjCOptional">
            <summary>
                Given a cursor that represents an Objective-C method or property declaration, return
                non-zero if the declaration was affected by " @ optional".
            </summary>
            <value><c>true</c> if this instance is object c optional; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsPureVirtual">
            <summary>Determine if a C++ member function or member function template is pure virtual.</summary>
            <value><c>true</c> if this instance is pure virtual; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsStatic">
            <summary>Determine if a C++ member function or member function template is declared 'static'.</summary>
            <value><c>true</c> if this instance is static; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsVariadic">
            <summary>Returns non-zero if the given cursor is a variadic function or method.</summary>
            <value><c>true</c> if this instance is variadic; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsVirtual">
            <summary>
                Determine if a C++ member function or member function template is explicitly declared
                'virtual' or if it overrides a virtual method from one of the base classes.
            </summary>
            <value><c>true</c> if this instance is virtual; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.IsVirtualBase">
            <summary>Returns <c>true</c> if the base class specified by the cursor is virtual.</summary>
            <value><c>true</c> if this instance is virtual base; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Cursor.Kind">
            <summary>Retrieve the kind of the given cursor.</summary>
            <value>The cursor kind.</value>
        </member>
        <member name="P:LibClang.Cursor.Language">
            <summary>Determine the "language" of the entity referred to by this cursor.</summary>
            <value>The language specifier.</value>
        </member>
        <member name="P:LibClang.Cursor.LexicalParent">
            <summary>Determine the lexical parent of the this cursor.</summary>
        </member>
        <member name="P:LibClang.Cursor.Linkage">
            <summary>Determine the linkage of the entity referred to by this cursor.</summary>
        </member>
        <member name="P:LibClang.Cursor.Location">
            <summary>
                Retrieve the physical location of the source constructor referenced by this cursor.
                <para>
                    The location of a declaration is typically the location of the name of that declaration,
                    where the name of that declaration would occur if it is unnamed, or some keyword that
                    introduces that particular declaration.
                </para>
                <para>The location of a reference is where that reference occurs within the source code.</para>
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:LibClang.Cursor.ObjCTypeEncoding">
            <summary>Returns the Objective-C type encoding for the this declaration cursor.</summary>
            <value>The Objective-C type encoding.</value>
        </member>
        <member name="P:LibClang.Cursor.OverloadedDecls">
            <summary>Gets the overloaded declarations.</summary>
            <value>The overloaded declarations.</value>
        </member>
        <member name="P:LibClang.Cursor.OverloadedDeclsCount">
            <summary>Gets the overloaded declarations count.</summary>
            <value>The overloaded declarations count.</value>
        </member>
        <member name="P:LibClang.Cursor.RawCommentText">
            <summary>
                Assuming cursor represents a declaration, return the associated comment text, including
                comment markers.
            </summary>
            <value>The raw comment text.</value>
        </member>
        <member name="P:LibClang.Cursor.ResultType">
            <summary>
                Retrieve the return type associated with a given cursor. This only returns a valid type if
                the cursor refers to a function or method.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:LibClang.Cursor.SemanticParent">
            <summary>Determine the semantic parent of the given cursor.</summary>
            <value>The semantic parent.</value>
        </member>
        <member name="P:LibClang.Cursor.Spelling">
            <summary>Retrieve a name for the entity referenced by this cursor.</summary>
        </member>
        <member name="P:LibClang.Cursor.TemplateKind">
            <summary>
                Given a cursor that represents a template, determine the cursor kind of the
                specializations would be generated by instantiating the template.
            </summary>
            <value>The kind of the template.</value>
        </member>
        <member name="P:LibClang.Cursor.TLSKind">
            <summary>
                Determine the "thread-local storage (TLS) kind" of the declaration referred to by a
                cursor.
            </summary>
            <value>The kind.</value>
        </member>
        <member name="P:LibClang.Cursor.TranslationUnit">
            <summary>Returns the translation unit that the cursor originated from.</summary>
            <value>The translation unit.</value>
        </member>
        <member name="P:LibClang.Cursor.Type">
            <summary>Retrieve the type of this cursor (if any).</summary>
            <value>The type.</value>
        </member>
        <member name="P:LibClang.Cursor.USR">
            <summary>
                Retrieve a Unified Symbol Resolution (USR) for the entity referenced by the given cursor.
                <para>
                    A Unified Symbol Resolution (USR) is a string that identifies a particular entity
                    (function, class, variable, etc.) within a program. USRs can be compared across translation
                    units to determine, e.g., when references in one translation refer to an entity defined in
                    another translation unit.
                </para>
            </summary>
        </member>
        <member name="P:LibClang.Cursor.Visibility">
            <summary>
                Describe the visibility of the entity referred to by a cursor.
                <para>
                    This returns the default visibility if not explicitly specified by a visibility
                    attribute. The default visibility may be changed by commandline arguments. The cursor to
                    query.
                </para>
            </summary>
            <value>The visibility.</value>
        </member>
        <member name="M:LibClang.Cursor.Equals(LibClang.Cursor)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
                true if the current object is equal to the <paramref name="other">other</paramref>
                parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:LibClang.Cursor.CursorGetObjCPropertyAttributes">
            <summary>
                Given a cursor that represents a property declaration, return the associated property
                attributes.
            </summary>
            <returns>The bits-field attributes.</returns>
        </member>
        <member name="M:LibClang.Cursor.DisposeOverridden">
            <summary>Disposes the overridden cursors.</summary>
        </member>
        <member name="M:LibClang.Cursor.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:LibClang.Cursor.Evaluate">
            <summary>
                If cursor is a statement declaration tries to evaluate the statement and if its variable,
                tries to evaluate its initializer, into its corresponding type.
            </summary>
            <returns>The result of the evaluation.</returns>
        </member>
        <member name="M:LibClang.Cursor.FindReferencesInFile(LibClang.File,LibClang.CursorAndRangeVisitor)">
            <summary>Find references of a declaration in a specific file.</summary>
            <param name="file">The file to search for #import/#include directives. </param>
            <param name="visitor">
                The callback that will receive pairs of Cursor/CXSourceRange for each
                directive found.
            </param>
            <returns>The result of the enumerators.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetArgument(System.UInt32)">
            <summary>
                Retrieve the argument cursor of a function or method. The argument cursor can be
                determined for calls as well as for declarations of functions or methods. For other cursors and
                for invalid indices, an invalid cursor is returned.
            </summary>
            <param name="index">The index of the argument to retrieve.</param>
            <returns>The cursor representing the specified argument.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetArgument(System.Int32)">
            <summary>
                Retrieve the argument cursor of a function or method. The argument cursor can be
                determined for calls as well as for declarations of functions or methods. For other cursors and
                for invalid indices, an invalid cursor is returned.
            </summary>
            <param name="index">The index of the argument to retrieve.</param>
            <returns>The cursor representing the specified argument.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetArgumentsCount">
            <summary>
                Retrieve the number of non-variadic arguments associated with a given cursor. The number
                of arguments can be determined for calls as well as for declarations of functions or methods.
                For other cursors -1 is returned.
            </summary>
            <returns>The number of arguments.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetBriefCommentText">
            <summary>
                Assuming this cursor represents a documentable entity (e.g., declaration), return the
                associated brief paragraph; otherwise return the first paragraph.
            </summary>
            <returns>The comment text.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetCompletionString">
            <summary>Retrieve a completion string for an arbitrary declaration or macro definition cursor.</summary>
            <returns>
                A non-context-sensitive completion string for declaration and macro definition cursors, or
                null <see cref="T:LibClang.CompletionString" /> for other kinds of cursors.
            </returns>
        </member>
        <member name="M:LibClang.Cursor.GetCppManglings">
            <summary>
                Retrieve the Strings representing the mangled symbols of the C++ constructor or destructor
                at the cursor.
            </summary>
            <returns>The string set of manglings.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetCursorReferenceNameRange(LibClang.NameRefFlags,System.UInt32)">
            <summary>
                Given a cursor that references something else, return the source range covering that
                reference.
            </summary>
            <param name="nameFlags">The name flags.</param>
            <param name="pieceIndex">Index of the piece.</param>
            <returns>The source range.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetDefinition">
            <summary>
                For a cursor that is either a reference to or a declaration of some entity, retrieve a
                cursor that describes the definition of that entity. Some entities can be declared multiple
                times within a translation unit, but only one of those declarations can also be a definition.
            </summary>
            <returns>The definition cursor.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetEnumIntegerType">
            <summary>
                Retrieve the integer type of an enum declaration. If the cursor does not reference an enum
                declaration, an invalid type is returned.
            </summary>
            <returns>The enum integer type.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetEnumUnsignedValue">
            <summary>
                Retrieve the integer value of an enum constant declaration as a <see cref="T:System.UInt64" />.
                <para>
                    If the cursor does not reference an enum constant declaration,
                    <see cref="F:System.UInt64.MaxValue" /> is returned. Since this is also potentially a valid constant
                    value, the kind of the cursor must be verified before calling this function.
                </para>
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetEnumValue">
            <summary>
                Retrieve the integer value of an enum constant declaration as a <c>long</c>.
                <para>
                    If the cursor does not reference an enum constant declaration,
                    <see cref="F:System.Int64.MinValue" /> is returned. Since this is also potentially a valid constant
                    value, the kind of the cursor must be verified before calling this function.
                </para>
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetExtent">
            <summary>
                Retrieve the physical extent of the source construct referenced by the given cursor. The
                extent of a cursor starts with the file/line/column pointing at the first character within the
                source construct that the cursor refers to and ends with the last character within that source
                construct. For a declaration, the extent covers the declaration itself. For a reference, the
                extent covers the location of the reference (e.g., where the referenced entity was actually
                used).
            </summary>
            <returns>The extent.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures
                like a hash table.
            </returns>
        </member>
        <member name="M:LibClang.Cursor.GetKindSpelling">
            <summary>Gets the spelling for the cursor's <see cref="T:LibClang.CursorKind" />.</summary>
            <returns></returns>
        </member>
        <member name="M:LibClang.Cursor.GetMangling">
            <summary>Retrieve the string representing the mangled name of the cursor.</summary>
        </member>
        <member name="M:LibClang.Cursor.GetModule">
            <summary>Assuming cursor is a module declaration cursor, returns the associated module.</summary>
            <returns>The associated module.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetObjCDeclQualifiers">
            <summary>
                Given a cursor that represents an Objective-C method or parameter declaration, return the
                associated Objective-C qualifiers for the return type or the parameter respectively.
            </summary>
            <returns>The bits-field qualifiers.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetObjCManglings">
            <summary>
                Retrieve the Strings representing the mangled symbols of the ObjC class interface or
                implementation at the cursor.
            </summary>
            <returns>The string set of manglings.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetObjCSelectorIndex">
            <summary>
                If the cursor points to a selector identifier in an Objective-C method or message expression,
                this returns the selector index. This can be called to determine if the location points to a
                selector identifier.
                <para>
                    The selector index if the cursor is an Objective-C method or message expression and the
                    cursor is pointing to a selector identifier, or -1 otherwise.
                </para>
            </summary>
            <returns>The index.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetOffsetOfField">
            <summary>
                Return the offset of the field represented by the Cursor. If the cursor is not a field
                declaration, -1 is returned.
            </summary>
            <returns>The offset of the field.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetOverloadedDecl(System.UInt32)">
            <summary>Retrieve a cursor for one of the overloaded declarations at the specified index.</summary>
            <param name="index">The index to retrieve.</param>
            <returns>The associated cursor.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetOverloadedDecl(System.Int32)">
            <summary>Retrieve a cursor for one of the overloaded declarations at the specified index.</summary>
            <param name="index">The index to retrieve.</param>
            <returns>The associated cursor.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetOverridden">
            <summary>Gets the set of methods that are overridden by the given method.</summary>
            <returns></returns>
        </member>
        <member name="M:LibClang.Cursor.GetParsedComment">
            <summary>
                Given a cursor that represents a documentable entity (e.g., declaration), return the
                associated parsed comment as a full-comment AST node.
            </summary>
            <returns>The parsed comment.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetReceiverType">
            <summary>
                Assuming cursor is pointing to an Objective-C message or property reference, or C++ method
                call, returns the Type of the receiver.
            </summary>
            <returns>The receiver type.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetReferenced">
            <summary>
                For a cursor that is a reference, retrieve a cursor representing the entity that it
                references.
            </summary>
            <returns>The reference cursor.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetSpecializedCursorTemplate">
            <summary>
                Given a cursor that may represent a specialization or instantiation of a template,
                retrieve the cursor that represents the template that it specializes or from which it was
                instantiated.
            </summary>
            <returns>The cursor.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetSpellingNameRange(System.UInt32)">
            <summary>
                Retrieve a range for a piece that forms the cursors spelling name. Most of the times there
                is only one range for the complete spelling but for Objective-C methods and Objective-C message
                expressions, there are multiple pieces for each selector identifier.
            </summary>
            <param name="pieceIndex">
                The index of the spelling name piece. If this is greater than the actual
                number of pieces, it will return an invalid) range
            </param>
            <returns>The range.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetSpellingNameRange(System.Int32)">
            <summary>
                Retrieve a range for a piece that forms the cursors spelling name. Most of the times there
                is only one range for the complete spelling but for Objective-C methods and Objective-C message
                expressions, there are multiple pieces for each selector identifier.
            </summary>
            <param name="pieceIndex">
                The index of the spelling name piece. If this is greater than the actual
                number of pieces, it will return an invalid) range
            </param>
            <returns>The range.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetStorageClass">
            <summary>Returns the storage class for a function or variable declaration.</summary>
            <returns>The storage class.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetTemplateArgumentKind(System.UInt32)">
            <summary>Retrieve the kind of the specified template argument of the cursor.</summary>
            <param name="index">The index to retrieve.</param>
            <returns>The kind.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetTemplateArgumentKind(System.Int32)">
            <summary>Retrieve the kind of the specified template argument of the cursor.</summary>
            <param name="index">The index to retrieve.</param>
            <returns>The kind.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetTemplateArgumentsCount">
            <summary>
                Returns the number of template args of a function decl representing a template
                specialization. If the argument cursor cannot be converted into a template function
                declaration, -1 is returned.
            </summary>
            <returns>The number of template arguments.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetTemplateArgumentType(System.UInt32)">
            <summary>
                Retrieve a Type representing the type of a TemplateArgument of a function decl
                representing a template specialization.
            </summary>
            <param name="index">The index to retrieve.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetTemplateArgumentType(System.Int32)">
            <summary>
                Retrieve a Type representing the type of a TemplateArgument of a function decl
                representing a template specialization.
            </summary>
            <param name="index">The index to retrieve.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetTemplateArgumentUnsignedValue(System.UInt32)">
            <summary>
                Retrieve the value of an integral TemplateArgument (of a function decl representing a template
                specialization) as a <c>ulong</c>.
                <para>
                    It is undefined to call this function on a Cursor that does not represent a FunctionDecl
                    or whose specified index template argument is not an integral value.
                </para>
            </summary>
            <param name="index">The index to retrieve.</param>
            <returns>The value of the argument.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetTemplateArgumentUnsignedValue(System.Int32)">
            <summary>
                Retrieve the value of an integral TemplateArgument (of a function decl representing a template
                specialization) as a <c>ulong</c>.
                <para>
                    It is undefined to call this function on a Cursor that does not represent a FunctionDecl
                    or whose specified index template argument is not an integral value.
                </para>
            </summary>
            <param name="index">The index to retrieve.</param>
            <returns>The value of the argument.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetTemplateArgumentValue(System.UInt32)">
            <summary>
                Retrieve the value of an integral TemplateArgument (of a function decl representing a template
                specialization) as a <c>long</c>.
                <para>
                    It is undefined to call this function on a Cursor that does not represent a FunctionDecl
                    or whose specified index template argument is not an integral value.
                </para>
            </summary>
            <param name="index">The index to retrieve.</param>
            <returns>The value of the argument.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetTemplateArgumentValue(System.Int32)">
            <summary>
                Retrieve the value of an integral TemplateArgument (of a function decl representing a template
                specialization) as a <c>long</c>.
                <para>
                    It is undefined to call this function on a Cursor that does not represent a FunctionDecl
                    or whose specified index template argument is not an integral value.
                </para>
            </summary>
            <param name="index">The index to retrieve.</param>
            <returns>The value of the argument.</returns>
        </member>
        <member name="M:LibClang.Cursor.GetTypedefUnderlyingType">
            <summary>
                Retrieve the underlying type of a typedef declaration. If the cursor does not reference a
                typedef declaration, an invalid type is returned.
            </summary>
            <returns>The underlying type.</returns>
        </member>
        <member name="M:LibClang.Cursor.IsExternalSymbol(LibClang.String@,LibClang.String@,System.Boolean@)">
            <summary>
                Returns <c>true</c> if the given cursor points to a symbol marked with
                external_source_symbol attribute.
            </summary>
            <param name="language">The language.</param>
            <param name="definedIn">The defined in.</param>
            <param name="isGenerated"><c>true</c> if is generated.</param>
            <returns>
                <c>true</c> if the given cursor points to a symbol marked with external_source_symbol
                attribute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:LibClang.Cursor.ToString">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:LibClang.Cursor.VisitChildren(LibClang.CursorVisitor)">
            <summary>
                Visit the children of a particular cursor. This function visits all the direct children of
                the cursor, invoking the given <paramref name="visitor" /> function with the cursors of each
                visited child.
            </summary>
            <param name="visitor">The visitor function to invoke.</param>
        </member>
        <member name="M:LibClang.Cursor.VisitChildren(LibClang.CursorVisitor,LibClang.ClientData)">
            <summary>
                Visit the children of a particular cursor. This function visits all the direct children of
                the cursor, invoking the given <paramref name="visitor" /> function with the cursors of each
                visited child.
            </summary>
            <param name="visitor">The visitor function to invoke.</param>
            <param name="data">Any client data to pass as an argument.</param>
        </member>
        <member name="T:LibClang.CursorAndRangeVisitor">
            <summary></summary>
        </member>
        <member name="F:LibClang.CursorAndRangeVisitor.Context">
            <summary></summary>
        </member>
        <member name="F:LibClang.CursorAndRangeVisitor.Visit">
            <summary></summary>
        </member>
        <member name="M:LibClang.CursorSet.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.CursorSet" /> struct.</summary>
            <param name="address">The address in memory.</param>
        </member>
        <member name="P:LibClang.CursorSet.Null">
            <summary>Gets the null (invalid) <see cref="T:LibClang.CursorSet" />.</summary>
            <value>A null <see cref="T:LibClang.CursorSet" />.</value>
        </member>
        <member name="M:LibClang.CursorSet.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="M:LibClang.CursorSet.Create">
            <summary>Creates an empty <see cref="T:LibClang.CursorSet" />.</summary>
            <returns>A newly created <see cref="T:LibClang.CursorSet" />.</returns>
        </member>
        <member name="M:LibClang.CursorSet.Contains(LibClang.Cursor)">
            <summary>Queries a <see cref="T:LibClang.CursorSet" /> to see if it contains a specific <see cref="T:LibClang.Cursor" />.</summary>
            <param name="cursor">The cursor to query.</param>
            <returns><c>true</c> if set contains the specified cursor; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LibClang.CursorSet.Insert(LibClang.Cursor)">
            <summary>Inserts the specified cursor into the <see cref="T:LibClang.CursorSet" />.</summary>
            <param name="cursor">The cursor to insert.</param>
            <returns>
                <c>false</c> if the <see cref="T:LibClang.Cursor" /> was already in the set, and <c>true</c>
                otherwise.
            </returns>
        </member>
        <member name="M:LibClang.CursorSet.op_Implicit(LibClang.CursorSet)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:LibClang.CursorSet" /> to <see cref="T:System.IntPtr" />.</summary>
            <param name="instance">The instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:LibClang.Diagnostic.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.Diagnostic" /> struct.</summary>
            <param name="address">The address in memory.</param>
        </member>
        <member name="P:LibClang.Diagnostic.Null">
            <summary>Gets the null (invalid) <see cref="T:LibClang.Diagnostic" />.</summary>
            <value>A null <see cref="T:LibClang.Diagnostic" />.</value>
        </member>
        <member name="P:LibClang.Diagnostic.Category">
            <summary>Retrieve the category number for this diagnostic.</summary>
            <value>The category number.</value>
        </member>
        <member name="P:LibClang.Diagnostic.CategoryText">
            <summary>Retrieve the diagnostic category text for a given diagnostic.</summary>
            <value>The text of the given diagnostic category.</value>
        </member>
        <member name="P:LibClang.Diagnostic.Children">
            <summary>Retrieve the child diagnostics of <see cref="T:LibClang.Diagnostic" />.</summary>
            <value>The child diagnostics.</value>
        </member>
        <member name="P:LibClang.Diagnostic.FixItCount">
            <summary>Determine the number of fix-it hints associated with the given diagnostic.</summary>
            <value>The fix it count.</value>
        </member>
        <member name="P:LibClang.Diagnostic.Location">
            <summary>
                Retrieve the source location of the given diagnostic.
                <para>
                    This location is where Clang would print the caret ('^') when displaying the diagnostic
                    on the command line.
                </para>
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:LibClang.Diagnostic.RangeCount">
            <summary>Determine the number of source ranges associated with the given diagnostic.</summary>
            <value>The range count.</value>
        </member>
        <member name="P:LibClang.Diagnostic.Severity">
            <summary>Determine the severity of the given diagnostic.</summary>
            <value>The severity.</value>
        </member>
        <member name="P:LibClang.Diagnostic.Spelling">
            <summary>Retrieve the text of the given diagnostic.</summary>
            <value>The spelling.</value>
        </member>
        <member name="M:LibClang.Diagnostic.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="M:LibClang.Diagnostic.Format(LibClang.DiagnosticDisplayOptions)">
            <summary>
                Format the given diagnostic in a manner that is suitable for display. This routine will
                format the given diagnostic to a string, rendering the diagnostic according to the various
                options given.
            </summary>
            <param name="options">The options.</param>
            <returns>The formatted diagnostic string.</returns>
        </member>
        <member name="M:LibClang.Diagnostic.GetDiagnosticOption(LibClang.String@)">
            <summary>Retrieve the name of the command-line option that enabled this diagnostic.</summary>
            <param name="disable">
                The string that will be set to the option that disables this diagnostic (if
                any). A string that contains the command-line option used to enable this warning, such as
                "-Wconversion" or "-pedantic".
            </param>
            <returns>The option string.</returns>
        </member>
        <member name="M:LibClang.Diagnostic.GetDiagnosticOption">
            <summary>Retrieve the name of the command-line option that enabled this diagnostic.</summary>
            <returns>The option string.</returns>
        </member>
        <member name="M:LibClang.Diagnostic.GetFixIt(System.UInt32,LibClang.SourceRange@)">
            <summary>
                Retrieve the replacement information for a given fix-it. Fix-its are described in terms of
                a source range whose contents should be replaced by a string.
            </summary>
            <param name="index">The index to retrieve.</param>
            <param name="range">The range of text to replace.</param>
            <returns>The fix-it string.</returns>
        </member>
        <member name="M:LibClang.Diagnostic.GetFixIt(System.Int32,LibClang.SourceRange@)">
            <summary>
                Retrieve the replacement information for a given fix-it. Fix-its are described in terms of
                a source range whose contents should be replaced by a string.
            </summary>
            <param name="index">The index to retrieve.</param>
            <param name="range">The range of text to replace.</param>
            <returns>The fix-it string.</returns>
        </member>
        <member name="M:LibClang.Diagnostic.GetRange(System.UInt32)">
            <summary>Retrieve a source range associated with the diagnostic.</summary>
            <param name="index">The zero-based index specifying which range to the requested source range.</param>
            <returns>The specified <see cref="T:LibClang.SourceRange" />.</returns>
        </member>
        <member name="M:LibClang.Diagnostic.GetRange(System.Int32)">
            <summary>Retrieve a source range associated with the diagnostic.</summary>
            <param name="index">The zero-based index specifying which range to the requested source range.</param>
            <returns>The specified <see cref="T:LibClang.SourceRange" />.</returns>
        </member>
        <member name="M:LibClang.Diagnostic.ToString">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:LibClang.Diagnostic.op_Implicit(LibClang.Diagnostic)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:LibClang.Diagnostic" /> to <see cref="T:System.IntPtr" />.</summary>
            <param name="instance">The instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:LibClang.DiagnosticSet.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.DiagnosticSet" /> struct.</summary>
            <param name="address">The address in memory.</param>
        </member>
        <member name="P:LibClang.DiagnosticSet.Item(System.UInt32)">
            <summary>Gets the <see cref="T:LibClang.Diagnostic" /> at the specified index.</summary>
            <value>The <see cref="T:LibClang.Diagnostic" />.</value>
            <param name="index">The index.</param>
            <returns>The specified <see cref="T:LibClang.Diagnostic" /></returns>
        </member>
        <member name="P:LibClang.DiagnosticSet.Item(System.Int32)">
            <summary>Gets the <see cref="T:LibClang.Diagnostic" /> at the specified index.</summary>
            <value>The <see cref="T:LibClang.Diagnostic" />.</value>
            <param name="index">The index.</param>
            <returns>The specified <see cref="T:LibClang.Diagnostic" /></returns>
        </member>
        <member name="P:LibClang.DiagnosticSet.Null">
            <summary>Gets the null (invalid) <see cref="T:LibClang.DiagnosticSet" />.</summary>
            <value>A null <see cref="T:LibClang.DiagnosticSet" />.</value>
        </member>
        <member name="P:LibClang.DiagnosticSet.Count">
            <summary>Determine the number of diagnostics in a <see cref="T:LibClang.DiagnosticSet" /></summary>
            <value>The count.</value>
        </member>
        <member name="M:LibClang.DiagnosticSet.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="M:LibClang.DiagnosticSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate
                through the collection.
            </returns>
        </member>
        <member name="M:LibClang.DiagnosticSet.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibClang.DiagnosticSet.Load(System.String,LibClang.LoadDiagError@,System.String@)">
            <summary>Deserialize a set of diagnostics from a Clang diagnostics bitcode file.</summary>
            <param name="filename">The filename to load.</param>
            <param name="error">The error code result.</param>
            <param name="errorString">The error string.</param>
            <returns>The loaded <see cref="T:LibClang.DiagnosticSet" />.</returns>
        </member>
        <member name="M:LibClang.DiagnosticSet.GetDiagnostic(System.UInt32)">
            <summary>Retrieve a diagnostic associated with the given DiagnosticSet.</summary>
            <param name="index">The index to retrieve.</param>
            <returns>The specified <see cref="T:LibClang.Diagnostic" />.</returns>
        </member>
        <member name="M:LibClang.DiagnosticSet.GetDiagnostic(System.Int32)">
            <summary>Retrieve a diagnostic associated with the given DiagnosticSet.</summary>
            <param name="index">The index to retrieve.</param>
            <returns>The specified <see cref="T:LibClang.Diagnostic" />.</returns>
        </member>
        <member name="M:LibClang.DiagnosticSet.op_Implicit(LibClang.DiagnosticSet)~System.IntPtr">
            <summary>
                Performs an implicit conversion from <see cref="T:LibClang.DiagnosticSet" /> to <see cref="T:System.IntPtr" />
                .
            </summary>
            <param name="instance">The instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:LibClang.EvalResult.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.EvalResult" /> struct.</summary>
            <param name="address">The address in memory.</param>
        </member>
        <member name="P:LibClang.EvalResult.IsUnsigned">
            <summary>
                Returns <c>true</c> if the kind is <see cref="F:LibClang.EvalResultKind.Int" /> and the evaluation
                result resulted in an unsigned integer.
            </summary>
            <value><c>true</c> if this instance is unsigned; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.EvalResult.Kind">
            <summary>Returns the kind of the evaluated result.</summary>
            <value>The kind.</value>
        </member>
        <member name="M:LibClang.EvalResult.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="M:LibClang.EvalResult.ToDouble">
            <summary>
                Returns the evaluation result as double if the kind is <see cref="F:LibClang.EvalResultKind.Float" />
                .
            </summary>
            <returns>The value as a <see cref="T:System.Double" />.</returns>
        </member>
        <member name="M:LibClang.EvalResult.ToInt32">
            <summary>Returns the evaluation result as integer if the kind is <see cref="T:System.Int32" />.</summary>
            <returns>The value as an <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="M:LibClang.EvalResult.ToInt64">
            <summary>
                Returns the evaluation result as a <see cref="T:System.Int64" /> if the kind is
                <see cref="F:LibClang.EvalResultKind.Int" />. This prevents overflows that may happen if the result is
                returned with <see cref="M:LibClang.EvalResult.ToInt32" />.
            </summary>
            <returns>The value as an <see cref="T:System.Int64" />.</returns>
        </member>
        <member name="M:LibClang.EvalResult.ToUint64">
            <summary>
                Returns the evaluation result as an unsigned integer if the kind is
                <see cref="F:LibClang.EvalResultKind.Int" /> and <see cref="P:LibClang.EvalResult.IsUnsigned" /> is <c>true</c>.
            </summary>
            <returns>The value as an <see cref="T:System.UInt64" />.</returns>
        </member>
        <member name="M:LibClang.EvalResult.op_Implicit(LibClang.EvalResult)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:LibClang.EvalResult" /> to <see cref="T:System.IntPtr" />.</summary>
            <param name="instance">The instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:LibClang.File.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.File" /> struct.</summary>
            <param name="address">The address in memory.</param>
        </member>
        <member name="P:LibClang.File.FileTime">
            <summary>Retrieve the last modification time of the given file.</summary>
            <value>The file time.</value>
        </member>
        <member name="P:LibClang.File.FileTimeLong">
            <summary>Retrieve the last modification time of the given file.</summary>
            <value>The file time.</value>
        </member>
        <member name="P:LibClang.File.Id">
            <summary>Retrieve the unique ID for the given file.</summary>
            <value>The identifier.</value>
        </member>
        <member name="P:LibClang.File.Name">
            <summary>Retrieve the complete file and path name of the given file.</summary>
            <value>The name.</value>
        </member>
        <member name="M:LibClang.File.Equals(LibClang.File)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
                true if the current object is equal to the <paramref name="other">other</paramref>
                parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:LibClang.File.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:LibClang.File.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures
                like a hash table.
            </returns>
        </member>
        <member name="M:LibClang.File.op_Implicit(LibClang.File)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:LibClang.File" /> to <see cref="T:System.IntPtr" />.</summary>
            <param name="instance">The instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:LibClang.FileUniqueID">
            <summary>
                Uniquely identifies a <see cref="T:LibClang.File" />, that refers to the same underlying file, across
                an indexing session.
            </summary>
        </member>
        <member name="M:LibClang.FileUniqueID.Equals(LibClang.FileUniqueID)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
                true if the current object is equal to the <paramref name="other">other</paramref>
                parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:LibClang.FileUniqueID.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:LibClang.FileUniqueID.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures
                like a hash table.
            </returns>
        </member>
        <member name="T:LibClang.IdxAttrInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxAttrInfo.Kind">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxAttrInfo.Cursor">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxAttrInfo.Loc">
            <summary></summary>
        </member>
        <member name="T:LibClang.IdxBaseClassInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxBaseClassInfo.Base">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxBaseClassInfo.Cursor">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxBaseClassInfo.Loc">
            <summary></summary>
        </member>
        <member name="T:LibClang.IdxContainerInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxContainerInfo.Cursor">
            <summary></summary>
        </member>
        <member name="T:LibClang.IdxCXXClassDeclInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxCXXClassDeclInfo.DeclInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxCXXClassDeclInfo.Bases">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxCXXClassDeclInfo.NumBases">
            <summary></summary>
        </member>
        <member name="T:LibClang.IdxDeclInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxDeclInfo.EntityInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxDeclInfo.Cursor">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxDeclInfo.Loc">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxDeclInfo.SemanticContainer">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxDeclInfo.LexicalContainer">
            <summary>
                Generally same as #semanticContainer but can be different in cases like out-of-line C++
                member functions.
            </summary>
        </member>
        <member name="F:LibClang.IdxDeclInfo.IsRedeclaration">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxDeclInfo.IsDefinition">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxDeclInfo.IsContainer">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxDeclInfo.DeclAsContainer">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxDeclInfo.IsImplicit">
            <summary>
                Whether the declaration exists in code or was created implicitly by the compiler, e.g.
                implicit Objective-C methods for properties.
            </summary>
        </member>
        <member name="F:LibClang.IdxDeclInfo.Attributes">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxDeclInfo.NumAttributes">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxDeclInfo.Flags">
            <summary></summary>
        </member>
        <member name="T:LibClang.IdxEntityInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityInfo.Kind">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityInfo.TemplateKind">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityInfo.Lang">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityInfo.Cursor">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityInfo.Attributes">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityInfo.NumAttributes">
            <summary></summary>
        </member>
        <member name="T:LibClang.IdxEntityRefInfo">
            <summary>Data for IndexerCallbacks#indexEntityReference.</summary>
        </member>
        <member name="F:LibClang.IdxEntityRefInfo.Kind">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityRefInfo.Cursor">
            <summary>Reference cursor.</summary>
        </member>
        <member name="F:LibClang.IdxEntityRefInfo.Loc">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxEntityRefInfo.ReferencedEntity">
            <summary>The entity that gets referenced.</summary>
        </member>
        <member name="F:LibClang.IdxEntityRefInfo.ParentEntity">
            <summary>
                Immediate "parent" of the reference. For example: Foo *var; The parent of reference of
                type 'Foo' is the variable 'var'. For references inside statement bodies of functions/methods,
                the parentEntity will be the function/method.
            </summary>
        </member>
        <member name="F:LibClang.IdxEntityRefInfo.Container">
            <summary>Lexical container context of the reference.</summary>
        </member>
        <member name="T:LibClang.IdxIBOutletCollectionAttrInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxIBOutletCollectionAttrInfo.AttrInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxIBOutletCollectionAttrInfo.ObjcClass">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxIBOutletCollectionAttrInfo.ClassCursor">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxIBOutletCollectionAttrInfo.ClassLoc">
            <summary></summary>
        </member>
        <member name="T:LibClang.IdxImportedASTFileInfo">
            <summary>Data for IndexerCallbacks#importedASTFile.</summary>
        </member>
        <member name="F:LibClang.IdxImportedASTFileInfo.File">
            <summary>Top level AST file containing the imported PCH, module or submodule.</summary>
        </member>
        <member name="F:LibClang.IdxImportedASTFileInfo.Module">
            <summary>The imported module or NULL if the AST file is a PCH.</summary>
        </member>
        <member name="F:LibClang.IdxImportedASTFileInfo.Loc">
            <summary>Location where the file is imported. Applicable only for modules.</summary>
        </member>
        <member name="F:LibClang.IdxImportedASTFileInfo.IsImplicit">
            <summary>
                Non-zero if an inclusion directive was automatically turned into a module import.
                Applicable only for modules.
            </summary>
        </member>
        <member name="T:LibClang.IdxIncludedFileInfo">
            <summary>Data for ppIncludedFile callback.</summary>
        </member>
        <member name="F:LibClang.IdxIncludedFileInfo.HashLoc">
            <summary>Location of '#' in the # include/ # import directive.</summary>
        </member>
        <member name="F:LibClang.IdxIncludedFileInfo.Filename">
            <summary>Filename as written in the # include/ # import directive.</summary>
        </member>
        <member name="F:LibClang.IdxIncludedFileInfo.File">
            <summary>The actual file that the # include/ # import directive resolved to.</summary>
        </member>
        <member name="F:LibClang.IdxIncludedFileInfo.IsImport">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxIncludedFileInfo.IsAngled">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxIncludedFileInfo.IsModuleImport">
            <summary>Non-zero if the directive was automatically turned into a module import.</summary>
        </member>
        <member name="T:LibClang.IdxLoc">
            <summary>Source location passed to index callbacks.</summary>
        </member>
        <member name="P:LibClang.IdxLoc.Location">
            <summary>Retrieves the location represented by this <see cref="T:LibClang.IdxLoc" />.</summary>
            <value>The location.</value>
        </member>
        <member name="M:LibClang.IdxLoc.GetFileLocation(LibClang.IdxClientFile@,LibClang.File@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
                Retrieve the IdxFile, file, line, column, and offset represented by the given IdxLoc. If
                the location refers into a macro expansion, retrieves the location of the macro expansion and
                if it refers into a macro argument retrieves the location of the argument.
            </summary>
            <param name="indexFile">The index file.</param>
            <param name="file">The file.</param>
            <param name="line">The line.</param>
            <param name="column">The column.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="T:LibClang.IdxObjCCategoryDeclInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCCategoryDeclInfo.ContainerInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCCategoryDeclInfo.ObjcClass">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCCategoryDeclInfo.ClassCursor">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCCategoryDeclInfo.ClassLoc">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCCategoryDeclInfo.Protocols">
            <summary></summary>
        </member>
        <member name="T:LibClang.IdxObjCContainerDeclInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCContainerDeclInfo.DeclInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCContainerDeclInfo.Kind">
            <summary></summary>
        </member>
        <member name="T:LibClang.IdxObjCInterfaceDeclInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCInterfaceDeclInfo.ContainerInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCInterfaceDeclInfo.SuperInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCInterfaceDeclInfo.Protocols">
            <summary></summary>
        </member>
        <member name="T:LibClang.IdxObjCPropertyDeclInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCPropertyDeclInfo.DeclInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCPropertyDeclInfo.Getter">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCPropertyDeclInfo.Setter">
            <summary></summary>
        </member>
        <member name="T:LibClang.IdxObjCProtocolRefInfo">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCProtocolRefInfo.Protocol">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCProtocolRefInfo.Cursor">
            <summary></summary>
        </member>
        <member name="F:LibClang.IdxObjCProtocolRefInfo.Loc">
            <summary></summary>
        </member>
        <member name="P:LibClang.IdxObjCProtocolRefListInfo.Count">
            <summary>
            Gets the of <see cref="T:LibClang.IdxObjCProtocolRefInfo"/> objects in the collection.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:LibClang.IdxObjCProtocolRefListInfo.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LibClang.IdxObjCProtocolRefListInfo.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:LibClang.Index.GlobalOptions">
            <summary>Gets or sets general options associated with a index.</summary>
            <value>The global options.</value>
        </member>
        <member name="M:LibClang.Index.SetInvocationEmissionPathOption(System.String)">
            <summary>
                Sets the invocation emission path option. The invocation emission path specifies a path
                which will contain log files for certain LibClang invocations.
                <para>A <c>null</c> value (default) implies that LibClang invocations are not logged.</para>
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="T:LibClang.IndexerCallbacks">
            <summary>
                A group of callbacks used by <see cref="M:LibClang.Clang.IndexSourceFile(LibClang.IndexAction,LibClang.ClientData,LibClang.IndexerCallbacks,System.UInt32,System.UInt32,System.String,System.String[],System.Int32,LibClang.UnsavedFile[],System.UInt32,LibClang.TranslationUnit@,System.UInt32)" /> and
                <see cref="M:LibClang.Clang.IndexTranslationUnit(LibClang.IndexAction,LibClang.ClientData,LibClang.IndexerCallbacks,System.UInt32,System.UInt32,LibClang.TranslationUnit)" />.
            </summary>
        </member>
        <member name="F:LibClang.IndexerCallbacks.AbortQuery">
            <summary>Called periodically to check whether indexing should be aborted.</summary>
        </member>
        <member name="F:LibClang.IndexerCallbacks.Diagnostic">
            <summary>Called at the end of indexing; passes the complete diagnostic set.</summary>
        </member>
        <member name="F:LibClang.IndexerCallbacks.EnteredMainFile">
            <summary>Called when the main file is entered.</summary>
        </member>
        <member name="F:LibClang.IndexerCallbacks.IncludedFile">
            <summary>Called when a file gets #included/#imported</summary>
        </member>
        <member name="F:LibClang.IndexerCallbacks.ImportedASTFile">
            <summary>Called when a AST file(PCH or module) gets imported.</summary>
        </member>
        <member name="F:LibClang.IndexerCallbacks.StartedTranslationUnit">
            <summary>Called at the beginning of indexing a translation unit.</summary>
        </member>
        <member name="F:LibClang.IndexerCallbacks.IndexDeclaration">
            <summary>Called when a declaration is encountered.</summary>
        </member>
        <member name="F:LibClang.IndexerCallbacks.IndexEntityReference">
            <summary>Called to index a reference of an entity.</summary>
        </member>
        <member name="M:LibClang.Module.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.Module" /> struct.</summary>
            <param name="address">The address in memory.</param>
        </member>
        <member name="P:LibClang.Module.Null">
            <summary>Gets the null (invalid) <see cref="T:LibClang.Module" />.</summary>
            <value>A null <see cref="T:LibClang.Module" />.</value>
        </member>
        <member name="P:LibClang.Module.ASTFile">
            <summary>Gets the module file where the provided module object came from..</summary>
            <value>The module file where the provided module object came from..</value>
        </member>
        <member name="P:LibClang.Module.FullName">
            <summary>Gets the full name of the module, e.g. "std.vector".</summary>
            <value>The full name.</value>
        </member>
        <member name="P:LibClang.Module.IsSystem">
            <summary>Gets a value indicating whether this instance is system module.</summary>
            <value><c>true</c> if this instance is system; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Module.Name">
            <summary>
                a module object. the name of the module, e.g. for the 'std.vector' sub-module it will
                return "vector".
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:LibClang.Module.Parent">
            <summary>Gets the parent module.
                <para>If the given module is top-level, e.g. for 'std.vector' it will return the 'std' module.</para>
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:LibClang.Module.op_Implicit(LibClang.Module)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:LibClang.Module" /> to <see cref="T:System.IntPtr" />.</summary>
            <param name="instance">The instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:LibClang.ModuleMapDescriptor.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.ModuleMapDescriptor" /> struct.</summary>
            <param name="address">The address in memory.</param>
        </member>
        <member name="M:LibClang.ModuleMapDescriptor.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="M:LibClang.ModuleMapDescriptor.Create">
            <summary>Creates a <see cref="T:LibClang.ModuleMapDescriptor" /> object.</summary>
            <returns>A newly created <see cref="T:LibClang.ModuleMapDescriptor" /> object.</returns>
        </member>
        <member name="M:LibClang.ModuleMapDescriptor.SetFrameworkModuleName(System.String)">
            <summary>Sets the framework module name that the module map describes</summary>
            <param name="name">The name.</param>
            <returns>The result code.</returns>
        </member>
        <member name="M:LibClang.ModuleMapDescriptor.SetUmbrellaHeader(System.String)">
            <summary>Sets the umbrella header name that the module map describes.</summary>
            <param name="name">The name.</param>
            <returns>The result code.</returns>
        </member>
        <member name="M:LibClang.ModuleMapDescriptor.WriteToBuffer(System.Byte[]@)">
            <summary>Write out the <see cref="T:LibClang.ModuleMapDescriptor" /> object to a buffer.</summary>
            <param name="buffer">The buffer that received the output.</param>
            <returns>Flag indicating the success or failure of the operation.</returns>
        </member>
        <member name="M:LibClang.ModuleMapDescriptor.op_Implicit(LibClang.ModuleMapDescriptor)~System.IntPtr">
            <summary>
                Performs an implicit conversion from <see cref="T:LibClang.ModuleMapDescriptor" /> to
                <see cref="T:System.IntPtr" />.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:LibClang.PlatformAvailability">
            <summary>
                Describes the availability of a given entity on a particular platform, e.g., a particular
                class might only be available on Mac OS 10.7 or newer.
            </summary>
        </member>
        <member name="F:LibClang.PlatformAvailability.Platform">
            <summary>
                A string that describes the platform for which this structure provides availability
                information. Possible values are "ios" or "macos".
            </summary>
        </member>
        <member name="F:LibClang.PlatformAvailability.Introduced">
            <summary>The version number in which this entity was introduced.</summary>
        </member>
        <member name="F:LibClang.PlatformAvailability.Deprecated">
            <summary>The version number in which this entity was deprecated (but is still available).</summary>
        </member>
        <member name="F:LibClang.PlatformAvailability.Obsoleted">
            <summary>
                The version number in which this entity was obsoleted, and therefore is no longer
                available.
            </summary>
        </member>
        <member name="F:LibClang.PlatformAvailability.Unavailable">
            <summary>Whether the entity is unconditionally unavailable on this platform.</summary>
        </member>
        <member name="F:LibClang.PlatformAvailability.Message">
            <summary>An optional message to provide to a user of this API, e.g., to suggest replacement APIs.</summary>
        </member>
        <member name="M:LibClang.PlatformAvailability.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="M:LibClang.Remapping.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.Remapping" /> struct.</summary>
            <param name="address">The address in memory.</param>
        </member>
        <member name="P:LibClang.Remapping.FileCount">
            <summary>Gets the count of remapped files.</summary>
            <value>The file count.</value>
        </member>
        <member name="M:LibClang.Remapping.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="M:LibClang.Remapping.FromFile(System.String)">
            <summary>Retrieve a remapping.</summary>
            <param name="file">The path that contains metadata about remappings.</param>
            <returns>The requested remapping.</returns>
        </member>
        <member name="M:LibClang.Remapping.FromFiles(System.String[])">
            <summary>Retrieve a remapping from files containing remapping info.</summary>
            <param name="files">The files.</param>
            <returns>A newly created <see cref="T:LibClang.Remapping" /> object.</returns>
        </member>
        <member name="M:LibClang.Remapping.GetFilenames(System.UInt32,System.String@,System.String@)">
            <summary>Get the original and the associated filename from the remapping.</summary>
            <param name="index">The index to retrieve.</param>
            <param name="original">The original filename.</param>
            <param name="transformed">The transformed filename.</param>
        </member>
        <member name="M:LibClang.Remapping.GetFilenames(System.Int32,System.String@,System.String@)">
            <summary>Get the original and the associated filename from the remapping.</summary>
            <param name="index">The index to retrieve.</param>
            <param name="original">The original filename.</param>
            <param name="transformed">The transformed filename.</param>
        </member>
        <member name="M:LibClang.Remapping.op_Implicit(LibClang.Remapping)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:LibClang.Remapping" /> to <see cref="T:System.IntPtr" />.</summary>
            <param name="instance">The instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:LibClang.SourceLocation">
            <summary>Identifies a specific source location within a translation unit.</summary>
        </member>
        <member name="P:LibClang.SourceLocation.Null">
            <summary>Retrieve a null (invalid) source location.</summary>
            <value>A null location.</value>
        </member>
        <member name="P:LibClang.SourceLocation.IsFromMainFile">
            <summary>
                Returns <c>true</c> if the given source location is in the main file of the corresponding
                translation unit.
            </summary>
            <value><c>true</c> if this instance is from main file; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.SourceLocation.IsInSystemHeader">
            <summary>Returns <c>true</c> if the given source location is in a system header.</summary>
            <value><c>true</c> if this instance is in a system header; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:LibClang.SourceLocation.Equals(LibClang.SourceLocation)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
                <c>true</c> if the current object is equal to the <paramref name="other">other</paramref>
                parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:LibClang.SourceLocation.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:LibClang.SourceLocation.GetExpansionLocation(LibClang.File@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>Retrieve the file, line, column, and offset represented by the given source location.</summary>
            <param name="file">The file.</param>
            <param name="line">The line.</param>
            <param name="column">The column.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:LibClang.SourceLocation.GetFileLocation(LibClang.File@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>Retrieve the file, line, column, and offset represented by the given source location.</summary>
            <param name="file">The file.</param>
            <param name="line">The line.</param>
            <param name="column">The column.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:LibClang.SourceLocation.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures
                like a hash table.
            </returns>
        </member>
        <member name="M:LibClang.SourceLocation.GetInstantiationLocation(LibClang.File@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
                Legacy API to retrieve the file, line, column, and offset represented by the given source
                location.
            </summary>
            <param name="file">The file.</param>
            <param name="line">The line.</param>
            <param name="column">The column.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:LibClang.SourceLocation.GetPresumedLocation(LibClang.String@,System.UInt32@,System.UInt32@)">
            <summary>
                Retrieve the file, line and column represented by the given source location, as specified
                in a # line directive.
            </summary>
            <param name="filename">The filename.</param>
            <param name="line">The line.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:LibClang.SourceLocation.GetSpellingLocation(LibClang.File@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>Retrieve the file, line, column, and offset represented by the given source location.</summary>
            <param name="file">The file.</param>
            <param name="line">The line.</param>
            <param name="column">The column.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="T:LibClang.SourceRange">
            <summary>
                Identifies a half-open character range in the source code.
            </summary>
        </member>
        <member name="P:LibClang.SourceRange.Null">
            <summary>Retrieve a null (invalid) source range.</summary>
            <value>The null range.</value>
        </member>
        <member name="P:LibClang.SourceRange.End">
            <summary>Retrieve a source location representing the last character within a source range.</summary>
            <value>The end.</value>
        </member>
        <member name="P:LibClang.SourceRange.IsNull">
            <summary>Gets a value indicating whether this instance is null.</summary>
            <value><c>true</c> if this instance is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.SourceRange.Start">
            <summary>Retrieve a source location representing the first character within a source range.</summary>
            <value>The start.</value>
        </member>
        <member name="M:LibClang.SourceRange.Equals(LibClang.SourceRange)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
                true if the current object is equal to the <paramref name="other">other</paramref>
                parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:LibClang.SourceRange.Create(LibClang.SourceLocation,LibClang.SourceLocation)">
            <summary>Creates the specified <see cref="T:LibClang.SourceRange" /> given the beginning and ending locations.</summary>
            <param name="start">The start location.</param>
            <param name="end">The end location.</param>
            <returns>A newly created <see cref="T:LibClang.SourceRange" />.</returns>
        </member>
        <member name="M:LibClang.SourceRange.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:LibClang.SourceRange.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures
                like a hash table.
            </returns>
        </member>
        <member name="T:LibClang.SourceRangeList">
            <summary>Identifies an array of ranges.</summary>
        </member>
        <member name="P:LibClang.SourceRangeList.Count">
            <summary>The number of <see cref="T:LibClang.SourceRange" /> objects in the <see cref="T:LibClang.SourceRangeList" />.</summary>
        </member>
        <member name="M:LibClang.SourceRangeList.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="M:LibClang.SourceRangeList.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate
                through the collection.
            </returns>
        </member>
        <member name="M:LibClang.SourceRangeList.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:LibClang.String">
            <summary>
                A character string. The String type is used to return strings from the interface when the
                ownership of that string might differ from one call to the next.
            </summary>
        </member>
        <member name="M:LibClang.String.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="M:LibClang.String.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
                <para>
                    This method automatically calls <see cref="M:LibClang.String.Dispose" /> for the underlying native object
                    after marshalling.
                </para>
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:LibClang.String.op_Implicit(LibClang.String)~System.String">
            <summary>
                Performs an implicit conversion from <see cref="T:LibClang.String" /> to <see cref="T:System.String" />
                .
            </summary>
            <param name="str">The string.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:LibClang.StringSet">
            <summary></summary>
        </member>
        <member name="P:LibClang.StringSet.Count">
            <summary>Gets the number of <see cref="T:LibClang.String" /> objects within the <see cref="T:LibClang.StringSet" />.</summary>
            <value>The count.</value>
        </member>
        <member name="M:LibClang.StringSet.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="M:LibClang.StringSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate
                through the collection.
            </returns>
        </member>
        <member name="M:LibClang.StringSet.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibClang.TargetInfo.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.TargetInfo" /> struct.</summary>
            <param name="address">The address of the struct in memory.</param>
        </member>
        <member name="P:LibClang.TargetInfo.Null">
            <summary>Gets a null (invalid) instance of a <see cref="T:LibClang.TargetInfo" />.</summary>
            <value>A null <see cref="T:LibClang.TargetInfo" />.</value>
        </member>
        <member name="P:LibClang.TargetInfo.PointerWidth">
            <summary>Get the pointer width of the target in bits. Returns -1 in case of error.</summary>
            <value>The width of the pointer.</value>
        </member>
        <member name="P:LibClang.TargetInfo.Triple">
            <summary>Get the normalized target triple as a string.
                <para>Returns the empty string in case of any error.</para>
            </summary>
            <value>The triple.</value>
        </member>
        <member name="M:LibClang.TargetInfo.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="M:LibClang.TargetInfo.op_Implicit(LibClang.TargetInfo)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:LibClang.TargetInfo" /> to <see cref="T:System.IntPtr" />.</summary>
            <param name="instance">The instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:LibClang.Token">
            <summary>Describes a single preprocessing token.</summary>
        </member>
        <member name="M:LibClang.TranslationUnit.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.TranslationUnit" /> struct.</summary>
            <param name="address">The address of the struct in memory.</param>
        </member>
        <member name="P:LibClang.TranslationUnit.DefaultEditingOptions">
            <summary>
                Returns the set of flags that is suitable for parsing a translation unit that is being
                edited.
            </summary>
            <value>The default editing options.</value>
        </member>
        <member name="P:LibClang.TranslationUnit.Null">
            <summary>Gets a null (invalid) <see cref="T:LibClang.TranslationUnit" />.</summary>
            <value>A null <see cref="T:LibClang.TranslationUnit" />.</value>
        </member>
        <member name="P:LibClang.TranslationUnit.DefaultReparseOptions">
            <summary>Returns the set of flags that is suitable for reparsing a translation unit.</summary>
            <value>The default reparse options.</value>
        </member>
        <member name="P:LibClang.TranslationUnit.DefaultSaveOptions">
            <summary>Returns the set of flags that is suitable for saving a translation unit.</summary>
            <value>The default save options.</value>
        </member>
        <member name="P:LibClang.TranslationUnit.Diagnostics">
            <summary>Gets the diagnostics for this <see cref="T:LibClang.TranslationUnit" />.</summary>
            <value>The diagnostics.</value>
        </member>
        <member name="P:LibClang.TranslationUnit.DiagnosticsCount">
            <summary>Determine the number of diagnostics produced for this translation unit.</summary>
            <value>The diagnostics count.</value>
        </member>
        <member name="P:LibClang.TranslationUnit.Spelling">
            <summary>Get the original translation unit source file name.</summary>
            <value>The spelling.</value>
        </member>
        <member name="P:LibClang.TranslationUnit.TargetInfo">
            <summary>
                Get target information for this translation unit.
                <para>
                    The <see cref="P:LibClang.TranslationUnit.TargetInfo" /> object cannot outlive the <see cref="T:LibClang.TranslationUnit" />.
                    object.
                </para>
            </summary>
            <value>The target information.</value>
        </member>
        <member name="M:LibClang.TranslationUnit.AnnotateTokens(LibClang.Token[])">
            <summary>
                Annotate the given set of tokens by providing cursors for each token that can be mapped to
                a specific entity within the abstract syntax tree.
            </summary>
            <param name="tokens">The tokens to annotate.</param>
            <returns>The cursors for each token.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.CodeCompleteAt(System.String,System.UInt32,System.UInt32,LibClang.UnsavedFile[],LibClang.CodeCompleteFlags)">
            <summary>Perform code completion at a given location in a translation unit.</summary>
            <param name="filename">
                The name of the source file where code completion should be performed. This
                filename may be any file included in the translation unit.
            </param>
            <param name="line">The line at which code-completion should occur.</param>
            <param name="column">
                The column at which code-completion should occur. Note that the column should
                point just after the syntactic construct that initiated code completion, and not in the middle
                of a lexical token.
            </param>
            <param name="unsaved">
                The files that have not yet been saved to disk but may be required for
                parsing or code completion, including the contents of those files.
            </param>
            <param name="options">Extra options that control the behavior of code completion.</param>
            <returns>The code-completion results</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.CodeCompleteAt(System.String,System.UInt32,System.UInt32,LibClang.CodeCompleteFlags)">
            <summary>Perform code completion at a given location in a translation unit.</summary>
            <param name="filename">
                The name of the source file where code completion should be performed. This
                filename may be any file included in the translation unit.
            </param>
            <param name="line">The line at which code-completion should occur.</param>
            <param name="column">
                The column at which code-completion should occur. Note that the column should
                point just after the syntactic construct that initiated code completion, and not in the middle
                of a lexical token.
            </param>
            <param name="options">Extra options that control the behavior of code completion.</param>
            <returns>The code-completion results</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="M:LibClang.TranslationUnit.DisposeTokens(LibClang.Token[])">
            <summary>///
                <summary>Free the given set of tokens.</summary>
            </summary>
            <param name="tokens">The tokens to dispose.</param>
        </member>
        <member name="M:LibClang.TranslationUnit.FindIncludesInFile(LibClang.File,LibClang.CursorAndRangeVisitor)">
            <summary>Find #import/#include directives in a specific file.</summary>
            <param name="file">The file to search for #import/#include directives. </param>
            <param name="visitor">
                The callback that will receive pairs of Cursor/CXSourceRange for each
                directive found.
            </param>
            <returns>The result of the enumerators.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.GetAllSkippedRanges">
            <summary>
                Retrieve all ranges from all files that were skipped by the preprocessor. The preprocessor
                will skip lines when they are surrounded by an if/ifdef/ifndef directive whose condition does
                not evaluate to true.
            </summary>
            <returns>The list of skipped ranges.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.GetCursor">
            <summary>
                Retrieve the cursor that represents the given translation unit.
                <para>
                    The translation unit cursor can be used to start traversing the various declarations
                    within the given translation unit.
                </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibClang.TranslationUnit.GetCursor(LibClang.SourceLocation)">
            <summary>
                Map a source location to the cursor that describes the entity at that location in the
                source code.
            </summary>
            <param name="location">The location.</param>
            <returns>The cursor the specified location.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.GetDiagnostic(System.UInt32)">
            <summary>Retrieve a diagnostic associated with the <see cref="T:LibClang.TranslationUnit" />.</summary>
            <param name="index">The zero-based diagnostic number to retrieve.</param>
            <returns>The requested diagnostic</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.GetDiagnostic(System.Int32)">
            <summary>Retrieve a diagnostic associated with the <see cref="T:LibClang.TranslationUnit" />.</summary>
            <param name="index">The zero-based diagnostic number to retrieve.</param>
            <returns>The requested diagnostic</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.GetDiagnosticSet">
            <summary>Retrieve the complete set of diagnostics associated with a translation unit.</summary>
            <returns>The associated <see cref="T:LibClang.DiagnosticSet" />.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.GetFile(System.String)">
            <summary>Retrieve a file handle within this translation unit.</summary>
            <param name="filename">The name of the file to retrieve.</param>
            <returns>The file.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.GetFileContents(LibClang.File)">
            <summary>Gets the file contents.</summary>
            <param name="file">The file.</param>
            <returns>The contents of the file.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.GetInclusions(LibClang.InclusionVisitor)">
            <summary>Visit the set of preprocessor inclusions in a translation unit.</summary>
            <param name="visitor">
                The visitor function to be called with the provided data for every included
                file.
            </param>
        </member>
        <member name="M:LibClang.TranslationUnit.GetInclusions(LibClang.InclusionVisitor,LibClang.ClientData)">
            <summary>Visit the set of preprocessor inclusions in a translation unit.</summary>
            <param name="visitor">
                The visitor function to be called with the provided data for every included
                file.
            </param>
            <param name="data">Any client data to be passed along as an argument.</param>
        </member>
        <member name="M:LibClang.TranslationUnit.GetLocation(LibClang.File,System.UInt32,System.UInt32)">
            <summary>
                Retrieves the source location associated with a given file/line/column in a particular
                translation unit.
            </summary>
            <param name="file">The file.</param>
            <param name="line">The line number.</param>
            <param name="column">The column number.</param>
            <returns>The location</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.GetLocation(LibClang.File,System.Int32,System.Int32)">
            <summary>
                Retrieves the source location associated with a given file/line/column in a particular
                translation unit.
            </summary>
            <param name="file">The file.</param>
            <param name="line">The line number.</param>
            <param name="column">The column number.</param>
            <returns>The location</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.GetModule(LibClang.File)">
            <summary>Given a file header file, return the module that contains it, if one exists.</summary>
            <param name="file">The file header.</param>
            <returns>The <see cref="T:LibClang.Module" /> if one exists.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.GetModuleTopLevelHeadersCount(LibClang.Module)">
            <summary>a module object. the number of top level headers associated with this module.</summary>
            <param name="module">The module to query.</param>
            <returns>The number of top-level headers.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.GetResourceUsage">
            <summary>Return the memory usage of a translation unit.</summary>
            <returns>The resource usage.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.GetTokenExtent(LibClang.Token)">
            <summary>Retrieve a source range that covers the given token.</summary>
            <param name="token">The token to query.</param>
            <returns>The extent of the token.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.GetTokenLocation(LibClang.Token)">
            <summary>Retrieve the source location of the given token.</summary>
            <param name="token">The token to get location of.</param>
            <returns>The location of the token.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.GetTokenSpelling(LibClang.Token)">
            <summary>
                Determine the spelling of the given token. The spelling of a token is the textual
                representation of that token, e.g., the text of an identifier or keyword.
            </summary>
            <param name="token">The token to get spelling of.</param>
            <returns>The token spelling</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.GetTopLevelHeader(LibClang.Module,System.UInt32)">
            <summary>Gets the top level header for a module.</summary>
            <param name="module">The module to query.</param>
            <param name="index">The top level header index (zero-based).</param>
            <returns>The specified top level header associated with the module.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.GetTopLevelHeader(LibClang.Module,System.Int32)">
            <summary>Gets the top level header for a module.</summary>
            <param name="module">The module to query.</param>
            <param name="index">The top level header index (zero-based).</param>
            <returns>The specified top level header associated with the module.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.IsFileIncludeGuarded(LibClang.File)">
            <summary>
                Determine whether the given header is guarded against multiple inclusions, either with the
                conventional # ifndef/ # define/ # endif macro guards or with # pragma once.
            </summary>
            <param name="file">The file to query</param>
            <returns><c>true</c> if file is include guarded, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.LocationOffset(LibClang.File,System.UInt32)">
            <summary>
                Retrieves the source location associated with a given character offset in this translation
                unit.
            </summary>
            <param name="file">The file.</param>
            <param name="offset">The offset.</param>
            <returns>The location.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.Reparse(LibClang.ReparseFlags,LibClang.UnsavedFile[])">
            <summary>Reparse the source files that produced this translation unit.</summary>
            <param name="options">Options to apply.</param>
            <param name="unsaved">Unsaved files to pass.</param>
            <returns>The result code.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.Reparse(LibClang.ReparseFlags)">
            <summary>Reparse the source files that produced this translation unit.</summary>
            <param name="options">Options to apply.</param>
            <returns>The result code.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.Save(System.String,LibClang.SaveTranslationUnitFlags)">
            <summary>
                Saves a translation unit into a serialized representation of that translation unit on
                disk. Any translation unit that was parsed without error can be saved into a file.
            </summary>
            <param name="filename">The filename to save to.</param>
            <param name="options">The options to apply.</param>
            <returns>The result code.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.SkippedRanges(LibClang.File)">
            <summary>
                Retrieve all ranges that were skipped by the preprocessor. The preprocessor will skip
                lines when they are surrounded by an if/ifdef/ifndef directive whose condition does not
                evaluate to true.
            </summary>
            <param name="file">The file to query.</param>
            <returns>The list of skipped ranges.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.Suspend">
            <summary>
                Suspend a translation unit in order to free memory associated with it.
                <para>A suspended translation unit uses significantly less memory.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibClang.TranslationUnit.Tokenize(LibClang.SourceRange)">
            <summary>Tokenize the source code described by the given range into raw lexical tokens.</summary>
            <param name="range">The source range in which text should be tokenized.</param>
            <returns>The tokens within the range.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.TopLevelHeaders(LibClang.Module)">
            <summary>Gets the top-level headers for a <see cref="T:LibClang.Module" />.</summary>
            <param name="module">The module to query.</param>
            <returns>The top-level headers.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.ToString">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:LibClang.TranslationUnit.op_Implicit(LibClang.TranslationUnit)~System.IntPtr">
            <summary>
                Performs an implicit conversion from <see cref="T:LibClang.TranslationUnit" /> to
                <see cref="T:System.IntPtr" />.
            </summary>
            <param name="unit">The <see cref="T:LibClang.TranslationUnit" /> instance to be converted.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:LibClang.TUResourceUsage">
            <summary>The memory usage of a TranslationUnit, broken into categories.</summary>
        </member>
        <member name="P:LibClang.TUResourceUsage.Count">
            <summary>Gets the number of entries.</summary>
            <value>The count.</value>
        </member>
        <member name="M:LibClang.TUResourceUsage.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="M:LibClang.TUResourceUsage.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate
                through the collection.
            </returns>
        </member>
        <member name="M:LibClang.TUResourceUsage.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:LibClang.Type">
            <summary>The type of an element in the abstract syntax tree.</summary>
        </member>
        <member name="P:LibClang.Type.AddressSpace">
            <summary>Gets the address space of this <see cref="T:LibClang.Type" />.</summary>
            <value>The address space.</value>
        </member>
        <member name="P:LibClang.Type.AlignOf">
            <summary>Return the alignment of a type in bytes as per C++[expr.alignof] standard.</summary>
            <value>The alignment.</value>
        </member>
        <member name="P:LibClang.Type.ArgumentTypeCount">
            <summary>
                Retrieve the number of non-variadic parameters associated with a function type.
                <para>If a non-function type is passed in, -1 is returned.</para>
            </summary>
            <value>The argument type count.</value>
        </member>
        <member name="P:LibClang.Type.ArrayElementType">
            <summary>Return the element type of an array type.
                <para>If a non-array type is passed in, an invalid type is returned.</para>
            </summary>
            <value>The type of the array element.</value>
        </member>
        <member name="P:LibClang.Type.ArraySize">
            <summary>Return the array size of a constant array.
                <para>If a non-array type is passed in, -1 is returned.</para>
            </summary>
            <value>The size of the array.</value>
        </member>
        <member name="P:LibClang.Type.CallingConvention">
            <summary>
                Retrieve the calling convention associated with a function type.
                <para>If this is non-function type, <see cref="F:LibClang.CallingConv.Invalid" /> is returned.</para>
            </summary>
            <value>The calling convention.</value>
        </member>
        <member name="P:LibClang.Type.CanonicalType">
            <summary>
                Return the canonical type for a <see cref="T:LibClang.Type" />.
                <para>
                    Clang's type system explicitly models typedefs and all the ways a specific type can be
                    represented.
                </para>
                <para>
                    The canonical type is the underlying type with all the "sugar" removed.  For example, if
                    'T' is a typedef for <c>int</c>, the canonical type for 'T' would be <c>int</c>.
                </para>
            </summary>
            <value>The canonical type.</value>
        </member>
        <member name="P:LibClang.Type.ClassType">
            <summary>
                Return the class type of an member pointer type.
                <para>If this is a non-member-pointer type, an invalid type is returned.</para>
            </summary>
            <value>The type of the class.</value>
        </member>
        <member name="P:LibClang.Type.ElementsCount">
            <summary>
                Return the number of elements of an array or vector type.
                <para>If a type is passed in that is not an array or vector type, -1 is returned.</para>
            </summary>
            <value>The elements count.</value>
        </member>
        <member name="P:LibClang.Type.ElementType">
            <summary>
                Return the element type of an array, complex, or vector type.
                <para>
                    If a type is passed in that is not an array, complex, or vector type, an invalid type is
                    returned.
                </para>
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:LibClang.Type.ExceptionKind">
            <summary>Retrieve the exception specification type associated with a function type.</summary>
            <value>The kind of the exception.</value>
        </member>
        <member name="P:LibClang.Type.IsConstQualified">
            <summary>
                Determine whether a Type has the "const" qualifier set, without looking through typedefs
                that may have added "const" at a different level.
            </summary>
            <value><c>true</c> if this instance is constant qualified; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Type.IsFunctionVariadic">
            <summary>
                Return <c>true</c> if the <see cref="T:LibClang.Type" /> is a variadic function type, and
                <c>false</c> otherwise.
            </summary>
            <value><c>true</c> if this instance is function variadic; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Type.IsPODType">
            <summary>
                Return <c>true</c> if the <see cref="T:LibClang.Type" /> is a POD (plain old data) type, and
                <c>false</c> otherwise.
            </summary>
            <value><c>true</c> if this instance is POD type; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Type.IsRestrictQualified">
            <summary>
                Determine whether a Type has the "restrict" qualifier set, without looking through
                typedefs that may have added "restrict" at a different level.
            </summary>
            <value><c>true</c> if this instance is restrict qualified; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Type.IsTransparentTagTypedef">
            <summary>
                Gets a value indicating whether this instance is transparent tag typedef.
                <para>
                    A typedef is considered 'transparent' if it shares a name and spelling location with its
                    underlying tag type, as is the case with the NS_ENUM macro.
                </para>
            </summary>
            <value><c>true</c> if this instance is transparent tag typedef; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Type.IsVolatileQualified">
            <summary>
                Determine whether a Type has the "volatile" qualifier set, without looking through
                typedefs that may have added "volatile" at a different level.
            </summary>
            <value><c>true</c> if this instance is volatile qualified; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibClang.Type.NamedType">
            <summary>
                Retrieve the type named by the qualified-id.
                <para>If this is a non-elaborated type, an invalid type is returned.</para>
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:LibClang.Type.ObjCEncoding">
            <summary>Returns the Objective-C type encoding for the specified Type.</summary>
            <value>The Objective-C encoding.</value>
        </member>
        <member name="P:LibClang.Type.PointeeType">
            <summary>For pointer types, returns the type of the pointee.</summary>
            <value>The pointee type.</value>
        </member>
        <member name="P:LibClang.Type.RefQualifier">
            <summary>
                Retrieve the ref-qualifier kind of a function or method. The ref-qualifier is returned for
                C++ functions or methods.
                <para>
                    For other types or non-C++ declarations, <see cref="F:LibClang.RefQualifierKind.None" /> is
                    returned.
                </para>
            </summary>
        </member>
        <member name="P:LibClang.Type.ResultType">
            <summary>
                Retrieve the return type associated with a function type.
                <para>If a non-function type is passed in, an invalid type is returned.</para>
            </summary>
            <value>The type of the result.</value>
        </member>
        <member name="P:LibClang.Type.SizeOf">
            <summary>Return the size of a type in bytes as per C++[expr.sizeof] standard.</summary>
            <value>The size in bytes.</value>
        </member>
        <member name="P:LibClang.Type.Spelling">
            <summary>
                Pretty-print the underlying type using the rules of the language of the translation unit
                from which it came. If the type is invalid, an empty string is returned.
            </summary>
            <value>The spelling.</value>
        </member>
        <member name="P:LibClang.Type.TemplateArgumentCount">
            <summary>
                Returns the number of template arguments, or -1 if type T is not a template
                specialization.
            </summary>
            <value>The template argument count.</value>
        </member>
        <member name="P:LibClang.Type.TypedefName">
            <summary>Returns the typedef name of the given type.</summary>
            <value>The name of the typedef.</value>
        </member>
        <member name="M:LibClang.Type.Equals(LibClang.Type)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
                true if the current object is equal to the <paramref name="other">other</paramref>
                parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:LibClang.Type.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:LibClang.Type.GetArgumentType(System.UInt32)">
            <summary>
                Retrieve the type of a parameter of a function type.
                <para>
                    If a non-function type is passed in or the function does not have enough parameters, an
                    invalid type is returned.
                </para>
            </summary>
            <param name="index">The index to retrieve.</param>
            <returns>The type of the specified argument.</returns>
        </member>
        <member name="M:LibClang.Type.GetArgumentType(System.Int32)">
            <summary>
                Retrieve the type of a parameter of a function type.
                <para>
                    If a non-function type is passed in or the function does not have enough parameters, an
                    invalid type is returned.
                </para>
            </summary>
            <param name="index">The index to retrieve.</param>
            <returns>The type of the specified argument.</returns>
        </member>
        <member name="M:LibClang.Type.GetDeclaration">
            <summary>Return the cursor for the declaration of the this type.</summary>
            <returns>The name.</returns>
        </member>
        <member name="M:LibClang.Type.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures
                like a hash table.
            </returns>
        </member>
        <member name="M:LibClang.Type.GetTemplateArgAsType(System.UInt32)">
            <summary>
                Returns the type template argument of a template class specialization at given index.
                <para>
                    This property only returns template type arguments and does not handle template template
                    arguments or variadic packs.
                </para>
            </summary>
            <param name="index">The index to retrieve.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:LibClang.Type.GetTemplateArgAsType(System.Int32)">
            <summary>
                Returns the type template argument of a template class specialization at given index.
                <para>
                    This property only returns template type arguments and does not handle template template
                    arguments or variadic packs.
                </para>
            </summary>
            <param name="index">The index to retrieve.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:LibClang.Type.OffsetOf(System.String)">
            <summary>Return the offset of the field with the specified name.</summary>
            <param name="name">The name of the field.</param>
            <returns>The offset of the field.</returns>
        </member>
        <member name="M:LibClang.Type.ToString">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:LibClang.Type.VisitFields(LibClang.FieldVisitor)">
            <summary>
                Visit the fields of a particular type. This function visits all the direct fields of the
                given cursor, invoking the given visitor function with the cursors of each visited field.
            </summary>
            <param name="visitor">The visitor function to call for each field.</param>
            <returns>Visitor result returned by the function.</returns>
        </member>
        <member name="M:LibClang.Type.VisitFields(LibClang.FieldVisitor,LibClang.ClientData)">
            <summary>
                Visit the fields of a particular type. This function visits all the direct fields of the
                given cursor, invoking the given visitor function with the cursors of each visited field.
            </summary>
            <param name="visitor">The visitor function to call for each field.</param>
            <param name="data">Ant additional data.</param>
            <returns>Visitor result returned by the function.</returns>
        </member>
        <member name="T:LibClang.UnsavedFile">
            <summary>
                Provides the contents of a file that has not yet been saved to disk. Each CXUnsavedFile
                instance provides the name of a file on the system along with the current contents of that file
                that have not yet been saved to disk.
            </summary>
        </member>
        <member name="F:LibClang.UnsavedFile.Filename">
            <summary>
                The file whose contents have not yet been saved. This file must already exist in the file
                system.
            </summary>
        </member>
        <member name="P:LibClang.UnsavedFile.Contents">
            <summary>A buffer containing the unsaved contents of this file.</summary>
        </member>
        <member name="T:LibClang.Version">
            <summary>Describes a version number of the form major.minor.subminor.</summary>
        </member>
        <member name="F:LibClang.Version.Major">
            <summary>
                The major version number, e.g., the '10' in '10.7.3'. A negative value indicates that
                there is no version number at all.
            </summary>
        </member>
        <member name="F:LibClang.Version.Minor">
            <summary>
                The minor version number, e.g., the '7' in '10.7.3'. This value will be negative if no
                minor version number was provided, e.g., for version '10'.
            </summary>
        </member>
        <member name="F:LibClang.Version.SubMinor">
            <summary>
                The subminor version number, e.g., the '3' in '10.7.3'. This value will be negative if no
                minor or subminor version number was provided, e.g., in version '10' or '10.7'.
            </summary>
        </member>
        <member name="M:LibClang.Version.#ctor(System.Version)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.Version" /> struct.</summary>
            <param name="version">A <see cref="T:System.Version" /> to create from.</param>
        </member>
        <member name="M:LibClang.Version.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.Version" /> struct.</summary>
            <param name="major">The major part of the version.</param>
        </member>
        <member name="M:LibClang.Version.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.Version" /> struct.</summary>
            <param name="major">The major part of the version.</param>
            <param name="minor">The minor part of the version.</param>
        </member>
        <member name="M:LibClang.Version.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.Version" /> struct.</summary>
            <param name="major">The major part of the version.</param>
            <param name="minor">The minor part of the version.</param>
            <param name="subMinor">The sub-minor of the version.</param>
        </member>
        <member name="M:LibClang.Version.ToSystemVersion">
            <summary>Returns this <see cref="T:LibClang.Version" /> represented as a <see cref="T:System.Version" />.</summary>
            <returns>The <see cref="T:System.Version" /> representation of this version.</returns>
        </member>
        <member name="M:LibClang.Version.op_Implicit(LibClang.Version)~System.Version">
            <summary>
                Performs an implicit conversion from <see cref="T:LibClang.Version" /> to
                <see cref="T:System.Version" />.
            </summary>
            <param name="version">The version.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:LibClang.Version.op_Explicit(System.Version)~LibClang.Version">
            <summary>
                Performs an explicit conversion from <see cref="T:System.Version" /> to
                <see cref="T:LibClang.Version" />.
            </summary>
            <param name="version">The version.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:LibClang.VirtualFileOverlay.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:LibClang.VirtualFileOverlay" /> struct.</summary>
            <param name="address">The address of the struct in memory.</param>
        </member>
        <member name="M:LibClang.VirtualFileOverlay.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="M:LibClang.VirtualFileOverlay.Create">
            <summary>Create a <see cref="T:LibClang.VirtualFileOverlay" /> object.</summary>
            <returns>A newly created object.</returns>
        </member>
        <member name="M:LibClang.VirtualFileOverlay.AddFileMapping(System.String,System.String)">
            <summary>
                Map an absolute virtual file path to an absolute real one. The virtual path must be
                canonicalized (not contain "."/"..").
            </summary>
            <param name="virtualPath">The virtual path to map.</param>
            <param name="realPath">The real path.</param>
            <returns>Flag indicating the success or failure of the operation.</returns>
        </member>
        <member name="M:LibClang.VirtualFileOverlay.SetCodeSensitivity(System.Boolean)">
            <summary>
                Set the case sensitivity for the <see cref="T:LibClang.VirtualFileOverlay" /> object.
                <para>
                    The <see cref="T:LibClang.VirtualFileOverlay" /> object is case-sensitive by default, this option
                    can be used to override the default.
                </para>
            </summary>
            <param name="caseSensitive">
                <c>true</c> to set as case-sensitive, or <c>false</c> for
                case-insensitivity.
            </param>
            <returns>Flag indicating the success or failure of the operation.</returns>
        </member>
        <member name="M:LibClang.VirtualFileOverlay.WriteToBuffer(System.Byte[]@)">
            <summary>Write out the <see cref="T:LibClang.VirtualFileOverlay" /> object to a buffer.</summary>
            <param name="buffer">The buffer that received the output.</param>
            <returns>Flag indicating the success or failure of the operation.</returns>
        </member>
        <member name="M:LibClang.VirtualFileOverlay.op_Implicit(LibClang.VirtualFileOverlay)~System.IntPtr">
            <summary>
                Performs an implicit conversion from <see cref="T:LibClang.VirtualFileOverlay" /> to
                <see cref="T:System.IntPtr" />.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
    </members>
</doc>
